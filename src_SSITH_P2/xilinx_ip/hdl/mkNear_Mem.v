//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1
// RDY_server_reset_response_get  O     1 reg
// imem_valid                     O     1
// imem_is_i32_not_i16            O     1 const
// imem_pc                        O    64 reg
// imem_instr                     O    32
// imem_exc                       O     1
// imem_exc_code                  O     4
// imem_tval                      O    64 reg
// imem_master_awvalid            O     1 reg
// imem_master_awid               O     4 reg
// imem_master_awaddr             O    64 reg
// imem_master_awlen              O     8 reg
// imem_master_awsize             O     3 reg
// imem_master_awburst            O     2 reg
// imem_master_awlock             O     1 reg
// imem_master_awcache            O     4 reg
// imem_master_awprot             O     3 reg
// imem_master_awqos              O     4 reg
// imem_master_awregion           O     4 reg
// imem_master_wvalid             O     1 reg
// imem_master_wdata              O    64 reg
// imem_master_wstrb              O     8 reg
// imem_master_wlast              O     1 reg
// imem_master_bready             O     1 reg
// imem_master_arvalid            O     1 reg
// imem_master_arid               O     4 reg
// imem_master_araddr             O    64 reg
// imem_master_arlen              O     8 reg
// imem_master_arsize             O     3 reg
// imem_master_arburst            O     2 reg
// imem_master_arlock             O     1 reg
// imem_master_arcache            O     4 reg
// imem_master_arprot             O     3 reg
// imem_master_arqos              O     4 reg
// imem_master_arregion           O     4 reg
// imem_master_rready             O     1 reg
// dmem_valid                     O     1
// dmem_word64                    O    64
// dmem_st_amo_val                O    64
// dmem_exc                       O     1
// dmem_exc_code                  O     4
// mem_master_awvalid             O     1 reg
// mem_master_awid                O     4 reg
// mem_master_awaddr              O    64 reg
// mem_master_awlen               O     8 reg
// mem_master_awsize              O     3 reg
// mem_master_awburst             O     2 reg
// mem_master_awlock              O     1 reg
// mem_master_awcache             O     4 reg
// mem_master_awprot              O     3 reg
// mem_master_awqos               O     4 reg
// mem_master_awregion            O     4 reg
// mem_master_wvalid              O     1 reg
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_wlast               O     1 reg
// mem_master_bready              O     1 reg
// mem_master_arvalid             O     1 reg
// mem_master_arid                O     4 reg
// mem_master_araddr              O    64 reg
// mem_master_arlen               O     8 reg
// mem_master_arsize              O     3 reg
// mem_master_arburst             O     2 reg
// mem_master_arlock              O     1 reg
// mem_master_arcache             O     4 reg
// mem_master_arprot              O     3 reg
// mem_master_arqos               O     4 reg
// mem_master_arregion            O     4 reg
// mem_master_rready              O     1 reg
// RDY_server_fence_i_request_put  O     1
// RDY_server_fence_i_response_get  O     1
// RDY_server_fence_request_put   O     1 reg
// RDY_server_fence_response_get  O     1 reg
// RDY_sfence_vma_server_request_put  O     1 const
// RDY_sfence_vma_server_response_get  O     1 const
// RDY_ma_ddr4_ready              O     1 const
// mv_status                      O     8
// CLK                            I     1 clock
// RST_N                          I     1 reset
// imem_req_f3                    I     3 unused
// imem_req_addr                  I    64
// imem_req_priv                  I     2
// imem_req_sstatus_SUM           I     1
// imem_req_mstatus_MXR           I     1
// imem_req_satp                  I    64
// imem_master_awready            I     1
// imem_master_wready             I     1
// imem_master_bvalid             I     1
// imem_master_bid                I     4 reg
// imem_master_bresp              I     2 reg
// imem_master_arready            I     1
// imem_master_rvalid             I     1
// imem_master_rid                I     4 reg
// imem_master_rdata              I    64 reg
// imem_master_rresp              I     2 reg
// imem_master_rlast              I     1 reg
// dmem_req_op                    I     2
// dmem_req_f3                    I     3
// dmem_req_amo_funct7            I     7
// dmem_req_addr                  I    64
// dmem_req_store_value           I    64
// dmem_req_priv                  I     2
// dmem_req_sstatus_SUM           I     1
// dmem_req_mstatus_MXR           I     1
// dmem_req_satp                  I    64
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bid                 I     4 reg
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rid                 I     4 reg
// mem_master_rdata               I    64 reg
// mem_master_rresp               I     2 reg
// mem_master_rlast               I     1 reg
// server_fence_request_put       I     8 unused
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_imem_req                    I     1
// EN_dmem_req                    I     1
// EN_server_fence_i_request_put  I     1
// EN_server_fence_i_response_get  I     1
// EN_server_fence_request_put    I     1
// EN_server_fence_response_get   I     1
// EN_sfence_vma_server_request_put  I     1
// EN_sfence_vma_server_response_get  I     1 unused
// EN_ma_ddr4_ready               I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkNear_Mem(CLK,
		  RST_N,

		  EN_server_reset_request_put,
		  RDY_server_reset_request_put,

		  EN_server_reset_response_get,
		  RDY_server_reset_response_get,

		  imem_req_f3,
		  imem_req_addr,
		  imem_req_priv,
		  imem_req_sstatus_SUM,
		  imem_req_mstatus_MXR,
		  imem_req_satp,
		  EN_imem_req,

		  imem_valid,

		  imem_is_i32_not_i16,

		  imem_pc,

		  imem_instr,

		  imem_exc,

		  imem_exc_code,

		  imem_tval,

		  imem_master_awvalid,

		  imem_master_awid,

		  imem_master_awaddr,

		  imem_master_awlen,

		  imem_master_awsize,

		  imem_master_awburst,

		  imem_master_awlock,

		  imem_master_awcache,

		  imem_master_awprot,

		  imem_master_awqos,

		  imem_master_awregion,

		  imem_master_awready,

		  imem_master_wvalid,

		  imem_master_wdata,

		  imem_master_wstrb,

		  imem_master_wlast,

		  imem_master_wready,

		  imem_master_bvalid,
		  imem_master_bid,
		  imem_master_bresp,

		  imem_master_bready,

		  imem_master_arvalid,

		  imem_master_arid,

		  imem_master_araddr,

		  imem_master_arlen,

		  imem_master_arsize,

		  imem_master_arburst,

		  imem_master_arlock,

		  imem_master_arcache,

		  imem_master_arprot,

		  imem_master_arqos,

		  imem_master_arregion,

		  imem_master_arready,

		  imem_master_rvalid,
		  imem_master_rid,
		  imem_master_rdata,
		  imem_master_rresp,
		  imem_master_rlast,

		  imem_master_rready,

		  dmem_req_op,
		  dmem_req_f3,
		  dmem_req_amo_funct7,
		  dmem_req_addr,
		  dmem_req_store_value,
		  dmem_req_priv,
		  dmem_req_sstatus_SUM,
		  dmem_req_mstatus_MXR,
		  dmem_req_satp,
		  EN_dmem_req,

		  dmem_valid,

		  dmem_word64,

		  dmem_st_amo_val,

		  dmem_exc,

		  dmem_exc_code,

		  mem_master_awvalid,

		  mem_master_awid,

		  mem_master_awaddr,

		  mem_master_awlen,

		  mem_master_awsize,

		  mem_master_awburst,

		  mem_master_awlock,

		  mem_master_awcache,

		  mem_master_awprot,

		  mem_master_awqos,

		  mem_master_awregion,

		  mem_master_awready,

		  mem_master_wvalid,

		  mem_master_wdata,

		  mem_master_wstrb,

		  mem_master_wlast,

		  mem_master_wready,

		  mem_master_bvalid,
		  mem_master_bid,
		  mem_master_bresp,

		  mem_master_bready,

		  mem_master_arvalid,

		  mem_master_arid,

		  mem_master_araddr,

		  mem_master_arlen,

		  mem_master_arsize,

		  mem_master_arburst,

		  mem_master_arlock,

		  mem_master_arcache,

		  mem_master_arprot,

		  mem_master_arqos,

		  mem_master_arregion,

		  mem_master_arready,

		  mem_master_rvalid,
		  mem_master_rid,
		  mem_master_rdata,
		  mem_master_rresp,
		  mem_master_rlast,

		  mem_master_rready,

		  EN_server_fence_i_request_put,
		  RDY_server_fence_i_request_put,

		  EN_server_fence_i_response_get,
		  RDY_server_fence_i_response_get,

		  server_fence_request_put,
		  EN_server_fence_request_put,
		  RDY_server_fence_request_put,

		  EN_server_fence_response_get,
		  RDY_server_fence_response_get,

		  EN_sfence_vma_server_request_put,
		  RDY_sfence_vma_server_request_put,

		  EN_sfence_vma_server_response_get,
		  RDY_sfence_vma_server_response_get,

		  EN_ma_ddr4_ready,
		  RDY_ma_ddr4_ready,

		  mv_status);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method imem_req
  input  [2 : 0] imem_req_f3;
  input  [63 : 0] imem_req_addr;
  input  [1 : 0] imem_req_priv;
  input  imem_req_sstatus_SUM;
  input  imem_req_mstatus_MXR;
  input  [63 : 0] imem_req_satp;
  input  EN_imem_req;

  // value method imem_valid
  output imem_valid;

  // value method imem_is_i32_not_i16
  output imem_is_i32_not_i16;

  // value method imem_pc
  output [63 : 0] imem_pc;

  // value method imem_instr
  output [31 : 0] imem_instr;

  // value method imem_exc
  output imem_exc;

  // value method imem_exc_code
  output [3 : 0] imem_exc_code;

  // value method imem_tval
  output [63 : 0] imem_tval;

  // value method imem_master_m_awvalid
  output imem_master_awvalid;

  // value method imem_master_m_awid
  output [3 : 0] imem_master_awid;

  // value method imem_master_m_awaddr
  output [63 : 0] imem_master_awaddr;

  // value method imem_master_m_awlen
  output [7 : 0] imem_master_awlen;

  // value method imem_master_m_awsize
  output [2 : 0] imem_master_awsize;

  // value method imem_master_m_awburst
  output [1 : 0] imem_master_awburst;

  // value method imem_master_m_awlock
  output imem_master_awlock;

  // value method imem_master_m_awcache
  output [3 : 0] imem_master_awcache;

  // value method imem_master_m_awprot
  output [2 : 0] imem_master_awprot;

  // value method imem_master_m_awqos
  output [3 : 0] imem_master_awqos;

  // value method imem_master_m_awregion
  output [3 : 0] imem_master_awregion;

  // value method imem_master_m_awuser

  // action method imem_master_m_awready
  input  imem_master_awready;

  // value method imem_master_m_wvalid
  output imem_master_wvalid;

  // value method imem_master_m_wdata
  output [63 : 0] imem_master_wdata;

  // value method imem_master_m_wstrb
  output [7 : 0] imem_master_wstrb;

  // value method imem_master_m_wlast
  output imem_master_wlast;

  // value method imem_master_m_wuser

  // action method imem_master_m_wready
  input  imem_master_wready;

  // action method imem_master_m_bvalid
  input  imem_master_bvalid;
  input  [3 : 0] imem_master_bid;
  input  [1 : 0] imem_master_bresp;

  // value method imem_master_m_bready
  output imem_master_bready;

  // value method imem_master_m_arvalid
  output imem_master_arvalid;

  // value method imem_master_m_arid
  output [3 : 0] imem_master_arid;

  // value method imem_master_m_araddr
  output [63 : 0] imem_master_araddr;

  // value method imem_master_m_arlen
  output [7 : 0] imem_master_arlen;

  // value method imem_master_m_arsize
  output [2 : 0] imem_master_arsize;

  // value method imem_master_m_arburst
  output [1 : 0] imem_master_arburst;

  // value method imem_master_m_arlock
  output imem_master_arlock;

  // value method imem_master_m_arcache
  output [3 : 0] imem_master_arcache;

  // value method imem_master_m_arprot
  output [2 : 0] imem_master_arprot;

  // value method imem_master_m_arqos
  output [3 : 0] imem_master_arqos;

  // value method imem_master_m_arregion
  output [3 : 0] imem_master_arregion;

  // value method imem_master_m_aruser

  // action method imem_master_m_arready
  input  imem_master_arready;

  // action method imem_master_m_rvalid
  input  imem_master_rvalid;
  input  [3 : 0] imem_master_rid;
  input  [63 : 0] imem_master_rdata;
  input  [1 : 0] imem_master_rresp;
  input  imem_master_rlast;

  // value method imem_master_m_rready
  output imem_master_rready;

  // action method dmem_req
  input  [1 : 0] dmem_req_op;
  input  [2 : 0] dmem_req_f3;
  input  [6 : 0] dmem_req_amo_funct7;
  input  [63 : 0] dmem_req_addr;
  input  [63 : 0] dmem_req_store_value;
  input  [1 : 0] dmem_req_priv;
  input  dmem_req_sstatus_SUM;
  input  dmem_req_mstatus_MXR;
  input  [63 : 0] dmem_req_satp;
  input  EN_dmem_req;

  // value method dmem_valid
  output dmem_valid;

  // value method dmem_word64
  output [63 : 0] dmem_word64;

  // value method dmem_st_amo_val
  output [63 : 0] dmem_st_amo_val;

  // value method dmem_exc
  output dmem_exc;

  // value method dmem_exc_code
  output [3 : 0] dmem_exc_code;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_m_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_m_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_m_awlock
  output mem_master_awlock;

  // value method mem_master_m_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_m_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_m_wlast
  output mem_master_wlast;

  // value method mem_master_m_wuser

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_m_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_m_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_m_arlock
  output mem_master_arlock;

  // value method mem_master_m_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_m_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;

  // value method mem_master_m_rready
  output mem_master_rready;

  // action method server_fence_i_request_put
  input  EN_server_fence_i_request_put;
  output RDY_server_fence_i_request_put;

  // action method server_fence_i_response_get
  input  EN_server_fence_i_response_get;
  output RDY_server_fence_i_response_get;

  // action method server_fence_request_put
  input  [7 : 0] server_fence_request_put;
  input  EN_server_fence_request_put;
  output RDY_server_fence_request_put;

  // action method server_fence_response_get
  input  EN_server_fence_response_get;
  output RDY_server_fence_response_get;

  // action method sfence_vma_server_request_put
  input  EN_sfence_vma_server_request_put;
  output RDY_sfence_vma_server_request_put;

  // action method sfence_vma_server_response_get
  input  EN_sfence_vma_server_response_get;
  output RDY_sfence_vma_server_response_get;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // value method mv_status
  output [7 : 0] mv_status;

  // signals for module outputs
  wire [63 : 0] dmem_st_amo_val,
		dmem_word64,
		imem_master_araddr,
		imem_master_awaddr,
		imem_master_wdata,
		imem_pc,
		imem_tval,
		mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata;
  wire [31 : 0] imem_instr;
  wire [7 : 0] imem_master_arlen,
	       imem_master_awlen,
	       imem_master_wstrb,
	       mem_master_arlen,
	       mem_master_awlen,
	       mem_master_wstrb,
	       mv_status;
  wire [3 : 0] dmem_exc_code,
	       imem_exc_code,
	       imem_master_arcache,
	       imem_master_arid,
	       imem_master_arqos,
	       imem_master_arregion,
	       imem_master_awcache,
	       imem_master_awid,
	       imem_master_awqos,
	       imem_master_awregion,
	       mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] imem_master_arprot,
	       imem_master_arsize,
	       imem_master_awprot,
	       imem_master_awsize,
	       mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] imem_master_arburst,
	       imem_master_awburst,
	       mem_master_arburst,
	       mem_master_awburst;
  wire RDY_ma_ddr4_ready,
       RDY_server_fence_i_request_put,
       RDY_server_fence_i_response_get,
       RDY_server_fence_request_put,
       RDY_server_fence_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_sfence_vma_server_request_put,
       RDY_sfence_vma_server_response_get,
       dmem_exc,
       dmem_valid,
       imem_exc,
       imem_is_i32_not_i16,
       imem_master_arlock,
       imem_master_arvalid,
       imem_master_awlock,
       imem_master_awvalid,
       imem_master_bready,
       imem_master_rready,
       imem_master_wlast,
       imem_master_wvalid,
       imem_valid,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register rg_state
  reg [1 : 0] rg_state;
  reg [1 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // ports of submodule d_mmu_cache
  wire [131 : 0] d_mmu_cache$imem_ptw_server_response_get;
  wire [127 : 0] d_mmu_cache$imem_pte_writeback_p_put,
		 d_mmu_cache$imem_ptw_server_request_put;
  wire [63 : 0] d_mmu_cache$mem_master_araddr,
		d_mmu_cache$mem_master_awaddr,
		d_mmu_cache$mem_master_rdata,
		d_mmu_cache$mem_master_wdata,
		d_mmu_cache$req_satp,
		d_mmu_cache$req_st_value,
		d_mmu_cache$req_va,
		d_mmu_cache$st_amo_val,
		d_mmu_cache$word64;
  wire [7 : 0] d_mmu_cache$mem_master_arlen,
	       d_mmu_cache$mem_master_awlen,
	       d_mmu_cache$mem_master_wstrb,
	       d_mmu_cache$mv_status;
  wire [6 : 0] d_mmu_cache$req_amo_funct7;
  wire [3 : 0] d_mmu_cache$exc_code,
	       d_mmu_cache$mem_master_arcache,
	       d_mmu_cache$mem_master_arid,
	       d_mmu_cache$mem_master_arqos,
	       d_mmu_cache$mem_master_arregion,
	       d_mmu_cache$mem_master_awcache,
	       d_mmu_cache$mem_master_awid,
	       d_mmu_cache$mem_master_awqos,
	       d_mmu_cache$mem_master_awregion,
	       d_mmu_cache$mem_master_bid,
	       d_mmu_cache$mem_master_rid;
  wire [2 : 0] d_mmu_cache$mem_master_arprot,
	       d_mmu_cache$mem_master_arsize,
	       d_mmu_cache$mem_master_awprot,
	       d_mmu_cache$mem_master_awsize,
	       d_mmu_cache$req_f3;
  wire [1 : 0] d_mmu_cache$mem_master_arburst,
	       d_mmu_cache$mem_master_awburst,
	       d_mmu_cache$mem_master_bresp,
	       d_mmu_cache$mem_master_rresp,
	       d_mmu_cache$req_op,
	       d_mmu_cache$req_priv;
  wire d_mmu_cache$EN_flush_server_request_put,
       d_mmu_cache$EN_flush_server_response_get,
       d_mmu_cache$EN_imem_pte_writeback_p_put,
       d_mmu_cache$EN_imem_ptw_server_request_put,
       d_mmu_cache$EN_imem_ptw_server_response_get,
       d_mmu_cache$EN_ma_ddr4_ready,
       d_mmu_cache$EN_req,
       d_mmu_cache$EN_tlb_flush,
       d_mmu_cache$RDY_flush_server_request_put,
       d_mmu_cache$RDY_flush_server_response_get,
       d_mmu_cache$RDY_imem_pte_writeback_p_put,
       d_mmu_cache$RDY_imem_ptw_server_request_put,
       d_mmu_cache$RDY_imem_ptw_server_response_get,
       d_mmu_cache$exc,
       d_mmu_cache$flush_server_request_put,
       d_mmu_cache$mem_master_arlock,
       d_mmu_cache$mem_master_arready,
       d_mmu_cache$mem_master_arvalid,
       d_mmu_cache$mem_master_awlock,
       d_mmu_cache$mem_master_awready,
       d_mmu_cache$mem_master_awvalid,
       d_mmu_cache$mem_master_bready,
       d_mmu_cache$mem_master_bvalid,
       d_mmu_cache$mem_master_rlast,
       d_mmu_cache$mem_master_rready,
       d_mmu_cache$mem_master_rvalid,
       d_mmu_cache$mem_master_wlast,
       d_mmu_cache$mem_master_wready,
       d_mmu_cache$mem_master_wvalid,
       d_mmu_cache$req_mstatus_MXR,
       d_mmu_cache$req_sstatus_SUM,
       d_mmu_cache$valid;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule i_mmu_cache
  wire [131 : 0] i_mmu_cache$ptw_client_response_put;
  wire [127 : 0] i_mmu_cache$pte_writeback_g_get,
		 i_mmu_cache$ptw_client_request_get;
  wire [63 : 0] i_mmu_cache$addr,
		i_mmu_cache$mem_master_araddr,
		i_mmu_cache$mem_master_awaddr,
		i_mmu_cache$mem_master_rdata,
		i_mmu_cache$mem_master_wdata,
		i_mmu_cache$req_satp,
		i_mmu_cache$req_va,
		i_mmu_cache$word64;
  wire [7 : 0] i_mmu_cache$mem_master_arlen,
	       i_mmu_cache$mem_master_awlen,
	       i_mmu_cache$mem_master_wstrb;
  wire [3 : 0] i_mmu_cache$exc_code,
	       i_mmu_cache$mem_master_arcache,
	       i_mmu_cache$mem_master_arid,
	       i_mmu_cache$mem_master_arqos,
	       i_mmu_cache$mem_master_arregion,
	       i_mmu_cache$mem_master_awcache,
	       i_mmu_cache$mem_master_awid,
	       i_mmu_cache$mem_master_awqos,
	       i_mmu_cache$mem_master_awregion,
	       i_mmu_cache$mem_master_bid,
	       i_mmu_cache$mem_master_rid;
  wire [2 : 0] i_mmu_cache$mem_master_arprot,
	       i_mmu_cache$mem_master_arsize,
	       i_mmu_cache$mem_master_awprot,
	       i_mmu_cache$mem_master_awsize;
  wire [1 : 0] i_mmu_cache$mem_master_arburst,
	       i_mmu_cache$mem_master_awburst,
	       i_mmu_cache$mem_master_bresp,
	       i_mmu_cache$mem_master_rresp,
	       i_mmu_cache$req_priv;
  wire i_mmu_cache$EN_flush_server_request_put,
       i_mmu_cache$EN_flush_server_response_get,
       i_mmu_cache$EN_ma_ddr4_ready,
       i_mmu_cache$EN_pte_writeback_g_get,
       i_mmu_cache$EN_ptw_client_request_get,
       i_mmu_cache$EN_ptw_client_response_put,
       i_mmu_cache$EN_req,
       i_mmu_cache$EN_tlb_flush,
       i_mmu_cache$RDY_flush_server_request_put,
       i_mmu_cache$RDY_flush_server_response_get,
       i_mmu_cache$RDY_pte_writeback_g_get,
       i_mmu_cache$RDY_ptw_client_request_get,
       i_mmu_cache$RDY_ptw_client_response_put,
       i_mmu_cache$exc,
       i_mmu_cache$flush_server_request_put,
       i_mmu_cache$mem_master_arlock,
       i_mmu_cache$mem_master_arready,
       i_mmu_cache$mem_master_arvalid,
       i_mmu_cache$mem_master_awlock,
       i_mmu_cache$mem_master_awready,
       i_mmu_cache$mem_master_awvalid,
       i_mmu_cache$mem_master_bready,
       i_mmu_cache$mem_master_bvalid,
       i_mmu_cache$mem_master_rlast,
       i_mmu_cache$mem_master_rready,
       i_mmu_cache$mem_master_rvalid,
       i_mmu_cache$mem_master_wlast,
       i_mmu_cache$mem_master_wready,
       i_mmu_cache$mem_master_wvalid,
       i_mmu_cache$req_mstatus_MXR,
       i_mmu_cache$req_sstatus_SUM,
       i_mmu_cache$valid;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_ClientServerRequest,
       CAN_FIRE_RL_ClientServerResponse,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_dmem_req,
       CAN_FIRE_imem_master_m_arready,
       CAN_FIRE_imem_master_m_awready,
       CAN_FIRE_imem_master_m_bvalid,
       CAN_FIRE_imem_master_m_rvalid,
       CAN_FIRE_imem_master_m_wready,
       CAN_FIRE_imem_req,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_server_fence_i_request_put,
       CAN_FIRE_server_fence_i_response_get,
       CAN_FIRE_server_fence_request_put,
       CAN_FIRE_server_fence_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_sfence_vma_server_request_put,
       CAN_FIRE_sfence_vma_server_response_get,
       WILL_FIRE_RL_ClientServerRequest,
       WILL_FIRE_RL_ClientServerResponse,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_dmem_req,
       WILL_FIRE_imem_master_m_arready,
       WILL_FIRE_imem_master_m_awready,
       WILL_FIRE_imem_master_m_bvalid,
       WILL_FIRE_imem_master_m_rvalid,
       WILL_FIRE_imem_master_m_wready,
       WILL_FIRE_imem_req,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_server_fence_i_request_put,
       WILL_FIRE_server_fence_i_response_get,
       WILL_FIRE_server_fence_request_put,
       WILL_FIRE_server_fence_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_sfence_vma_server_request_put,
       WILL_FIRE_sfence_vma_server_response_get;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h1952;
  reg [31 : 0] v__h2057;
  reg [31 : 0] v__h1946;
  reg [31 : 0] v__h2051;
  // synopsys translate_on

  // remaining internal signals
  wire NOT_cfg_verbosity_read__5_ULE_1_6___d17;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = rg_state == 2'd2 ;
  assign CAN_FIRE_server_reset_request_put = rg_state == 2'd2 ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method imem_req
  assign CAN_FIRE_imem_req = 1'd1 ;
  assign WILL_FIRE_imem_req = EN_imem_req ;

  // value method imem_valid
  assign imem_valid = i_mmu_cache$valid ;

  // value method imem_is_i32_not_i16
  assign imem_is_i32_not_i16 = 1'd1 ;

  // value method imem_pc
  assign imem_pc = i_mmu_cache$addr ;

  // value method imem_instr
  assign imem_instr = i_mmu_cache$word64[31:0] ;

  // value method imem_exc
  assign imem_exc = i_mmu_cache$exc ;

  // value method imem_exc_code
  assign imem_exc_code = i_mmu_cache$exc_code ;

  // value method imem_tval
  assign imem_tval = i_mmu_cache$addr ;

  // value method imem_master_m_awvalid
  assign imem_master_awvalid = i_mmu_cache$mem_master_awvalid ;

  // value method imem_master_m_awid
  assign imem_master_awid = i_mmu_cache$mem_master_awid ;

  // value method imem_master_m_awaddr
  assign imem_master_awaddr = i_mmu_cache$mem_master_awaddr ;

  // value method imem_master_m_awlen
  assign imem_master_awlen = i_mmu_cache$mem_master_awlen ;

  // value method imem_master_m_awsize
  assign imem_master_awsize = i_mmu_cache$mem_master_awsize ;

  // value method imem_master_m_awburst
  assign imem_master_awburst = i_mmu_cache$mem_master_awburst ;

  // value method imem_master_m_awlock
  assign imem_master_awlock = i_mmu_cache$mem_master_awlock ;

  // value method imem_master_m_awcache
  assign imem_master_awcache = i_mmu_cache$mem_master_awcache ;

  // value method imem_master_m_awprot
  assign imem_master_awprot = i_mmu_cache$mem_master_awprot ;

  // value method imem_master_m_awqos
  assign imem_master_awqos = i_mmu_cache$mem_master_awqos ;

  // value method imem_master_m_awregion
  assign imem_master_awregion = i_mmu_cache$mem_master_awregion ;

  // action method imem_master_m_awready
  assign CAN_FIRE_imem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_awready = 1'd1 ;

  // value method imem_master_m_wvalid
  assign imem_master_wvalid = i_mmu_cache$mem_master_wvalid ;

  // value method imem_master_m_wdata
  assign imem_master_wdata = i_mmu_cache$mem_master_wdata ;

  // value method imem_master_m_wstrb
  assign imem_master_wstrb = i_mmu_cache$mem_master_wstrb ;

  // value method imem_master_m_wlast
  assign imem_master_wlast = i_mmu_cache$mem_master_wlast ;

  // action method imem_master_m_wready
  assign CAN_FIRE_imem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_wready = 1'd1 ;

  // action method imem_master_m_bvalid
  assign CAN_FIRE_imem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_bvalid = 1'd1 ;

  // value method imem_master_m_bready
  assign imem_master_bready = i_mmu_cache$mem_master_bready ;

  // value method imem_master_m_arvalid
  assign imem_master_arvalid = i_mmu_cache$mem_master_arvalid ;

  // value method imem_master_m_arid
  assign imem_master_arid = i_mmu_cache$mem_master_arid ;

  // value method imem_master_m_araddr
  assign imem_master_araddr = i_mmu_cache$mem_master_araddr ;

  // value method imem_master_m_arlen
  assign imem_master_arlen = i_mmu_cache$mem_master_arlen ;

  // value method imem_master_m_arsize
  assign imem_master_arsize = i_mmu_cache$mem_master_arsize ;

  // value method imem_master_m_arburst
  assign imem_master_arburst = i_mmu_cache$mem_master_arburst ;

  // value method imem_master_m_arlock
  assign imem_master_arlock = i_mmu_cache$mem_master_arlock ;

  // value method imem_master_m_arcache
  assign imem_master_arcache = i_mmu_cache$mem_master_arcache ;

  // value method imem_master_m_arprot
  assign imem_master_arprot = i_mmu_cache$mem_master_arprot ;

  // value method imem_master_m_arqos
  assign imem_master_arqos = i_mmu_cache$mem_master_arqos ;

  // value method imem_master_m_arregion
  assign imem_master_arregion = i_mmu_cache$mem_master_arregion ;

  // action method imem_master_m_arready
  assign CAN_FIRE_imem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_arready = 1'd1 ;

  // action method imem_master_m_rvalid
  assign CAN_FIRE_imem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_rvalid = 1'd1 ;

  // value method imem_master_m_rready
  assign imem_master_rready = i_mmu_cache$mem_master_rready ;

  // action method dmem_req
  assign CAN_FIRE_dmem_req = 1'd1 ;
  assign WILL_FIRE_dmem_req = EN_dmem_req ;

  // value method dmem_valid
  assign dmem_valid = d_mmu_cache$valid ;

  // value method dmem_word64
  assign dmem_word64 = d_mmu_cache$word64 ;

  // value method dmem_st_amo_val
  assign dmem_st_amo_val = d_mmu_cache$st_amo_val ;

  // value method dmem_exc
  assign dmem_exc = d_mmu_cache$exc ;

  // value method dmem_exc_code
  assign dmem_exc_code = d_mmu_cache$exc_code ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid = d_mmu_cache$mem_master_awvalid ;

  // value method mem_master_m_awid
  assign mem_master_awid = d_mmu_cache$mem_master_awid ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = d_mmu_cache$mem_master_awaddr ;

  // value method mem_master_m_awlen
  assign mem_master_awlen = d_mmu_cache$mem_master_awlen ;

  // value method mem_master_m_awsize
  assign mem_master_awsize = d_mmu_cache$mem_master_awsize ;

  // value method mem_master_m_awburst
  assign mem_master_awburst = d_mmu_cache$mem_master_awburst ;

  // value method mem_master_m_awlock
  assign mem_master_awlock = d_mmu_cache$mem_master_awlock ;

  // value method mem_master_m_awcache
  assign mem_master_awcache = d_mmu_cache$mem_master_awcache ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = d_mmu_cache$mem_master_awprot ;

  // value method mem_master_m_awqos
  assign mem_master_awqos = d_mmu_cache$mem_master_awqos ;

  // value method mem_master_m_awregion
  assign mem_master_awregion = d_mmu_cache$mem_master_awregion ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid = d_mmu_cache$mem_master_wvalid ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = d_mmu_cache$mem_master_wdata ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = d_mmu_cache$mem_master_wstrb ;

  // value method mem_master_m_wlast
  assign mem_master_wlast = d_mmu_cache$mem_master_wlast ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = d_mmu_cache$mem_master_bready ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid = d_mmu_cache$mem_master_arvalid ;

  // value method mem_master_m_arid
  assign mem_master_arid = d_mmu_cache$mem_master_arid ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = d_mmu_cache$mem_master_araddr ;

  // value method mem_master_m_arlen
  assign mem_master_arlen = d_mmu_cache$mem_master_arlen ;

  // value method mem_master_m_arsize
  assign mem_master_arsize = d_mmu_cache$mem_master_arsize ;

  // value method mem_master_m_arburst
  assign mem_master_arburst = d_mmu_cache$mem_master_arburst ;

  // value method mem_master_m_arlock
  assign mem_master_arlock = d_mmu_cache$mem_master_arlock ;

  // value method mem_master_m_arcache
  assign mem_master_arcache = d_mmu_cache$mem_master_arcache ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = d_mmu_cache$mem_master_arprot ;

  // value method mem_master_m_arqos
  assign mem_master_arqos = d_mmu_cache$mem_master_arqos ;

  // value method mem_master_m_arregion
  assign mem_master_arregion = d_mmu_cache$mem_master_arregion ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = d_mmu_cache$mem_master_rready ;

  // action method server_fence_i_request_put
  assign RDY_server_fence_i_request_put =
	     d_mmu_cache$RDY_flush_server_request_put &&
	     i_mmu_cache$RDY_flush_server_request_put ;
  assign CAN_FIRE_server_fence_i_request_put =
	     d_mmu_cache$RDY_flush_server_request_put &&
	     i_mmu_cache$RDY_flush_server_request_put ;
  assign WILL_FIRE_server_fence_i_request_put =
	     EN_server_fence_i_request_put ;

  // action method server_fence_i_response_get
  assign RDY_server_fence_i_response_get =
	     d_mmu_cache$RDY_flush_server_response_get &&
	     i_mmu_cache$RDY_flush_server_response_get ;
  assign CAN_FIRE_server_fence_i_response_get =
	     d_mmu_cache$RDY_flush_server_response_get &&
	     i_mmu_cache$RDY_flush_server_response_get ;
  assign WILL_FIRE_server_fence_i_response_get =
	     EN_server_fence_i_response_get ;

  // action method server_fence_request_put
  assign RDY_server_fence_request_put =
	     d_mmu_cache$RDY_flush_server_request_put ;
  assign CAN_FIRE_server_fence_request_put =
	     d_mmu_cache$RDY_flush_server_request_put ;
  assign WILL_FIRE_server_fence_request_put = EN_server_fence_request_put ;

  // action method server_fence_response_get
  assign RDY_server_fence_response_get =
	     d_mmu_cache$RDY_flush_server_response_get ;
  assign CAN_FIRE_server_fence_response_get =
	     d_mmu_cache$RDY_flush_server_response_get ;
  assign WILL_FIRE_server_fence_response_get = EN_server_fence_response_get ;

  // action method sfence_vma_server_request_put
  assign RDY_sfence_vma_server_request_put = 1'd1 ;
  assign CAN_FIRE_sfence_vma_server_request_put = 1'd1 ;
  assign WILL_FIRE_sfence_vma_server_request_put =
	     EN_sfence_vma_server_request_put ;

  // action method sfence_vma_server_response_get
  assign RDY_sfence_vma_server_response_get = 1'd1 ;
  assign CAN_FIRE_sfence_vma_server_response_get = 1'd1 ;
  assign WILL_FIRE_sfence_vma_server_response_get =
	     EN_sfence_vma_server_response_get ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready = 1'd1 ;
  assign CAN_FIRE_ma_ddr4_ready = 1'd1 ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // value method mv_status
  assign mv_status = d_mmu_cache$mv_status ;

  // submodule d_mmu_cache
  mkD_MMU_Cache d_mmu_cache(.CLK(CLK),
			    .RST_N(RST_N),
			    .flush_server_request_put(d_mmu_cache$flush_server_request_put),
			    .imem_pte_writeback_p_put(d_mmu_cache$imem_pte_writeback_p_put),
			    .imem_ptw_server_request_put(d_mmu_cache$imem_ptw_server_request_put),
			    .mem_master_arready(d_mmu_cache$mem_master_arready),
			    .mem_master_awready(d_mmu_cache$mem_master_awready),
			    .mem_master_bid(d_mmu_cache$mem_master_bid),
			    .mem_master_bresp(d_mmu_cache$mem_master_bresp),
			    .mem_master_bvalid(d_mmu_cache$mem_master_bvalid),
			    .mem_master_rdata(d_mmu_cache$mem_master_rdata),
			    .mem_master_rid(d_mmu_cache$mem_master_rid),
			    .mem_master_rlast(d_mmu_cache$mem_master_rlast),
			    .mem_master_rresp(d_mmu_cache$mem_master_rresp),
			    .mem_master_rvalid(d_mmu_cache$mem_master_rvalid),
			    .mem_master_wready(d_mmu_cache$mem_master_wready),
			    .req_amo_funct7(d_mmu_cache$req_amo_funct7),
			    .req_f3(d_mmu_cache$req_f3),
			    .req_mstatus_MXR(d_mmu_cache$req_mstatus_MXR),
			    .req_op(d_mmu_cache$req_op),
			    .req_priv(d_mmu_cache$req_priv),
			    .req_satp(d_mmu_cache$req_satp),
			    .req_sstatus_SUM(d_mmu_cache$req_sstatus_SUM),
			    .req_st_value(d_mmu_cache$req_st_value),
			    .req_va(d_mmu_cache$req_va),
			    .EN_req(d_mmu_cache$EN_req),
			    .EN_flush_server_request_put(d_mmu_cache$EN_flush_server_request_put),
			    .EN_flush_server_response_get(d_mmu_cache$EN_flush_server_response_get),
			    .EN_tlb_flush(d_mmu_cache$EN_tlb_flush),
			    .EN_imem_ptw_server_request_put(d_mmu_cache$EN_imem_ptw_server_request_put),
			    .EN_imem_ptw_server_response_get(d_mmu_cache$EN_imem_ptw_server_response_get),
			    .EN_imem_pte_writeback_p_put(d_mmu_cache$EN_imem_pte_writeback_p_put),
			    .EN_ma_ddr4_ready(d_mmu_cache$EN_ma_ddr4_ready),
			    .valid(d_mmu_cache$valid),
			    .addr(),
			    .word64(d_mmu_cache$word64),
			    .st_amo_val(d_mmu_cache$st_amo_val),
			    .exc(d_mmu_cache$exc),
			    .exc_code(d_mmu_cache$exc_code),
			    .RDY_flush_server_request_put(d_mmu_cache$RDY_flush_server_request_put),
			    .RDY_flush_server_response_get(d_mmu_cache$RDY_flush_server_response_get),
			    .RDY_tlb_flush(),
			    .RDY_imem_ptw_server_request_put(d_mmu_cache$RDY_imem_ptw_server_request_put),
			    .imem_ptw_server_response_get(d_mmu_cache$imem_ptw_server_response_get),
			    .RDY_imem_ptw_server_response_get(d_mmu_cache$RDY_imem_ptw_server_response_get),
			    .RDY_imem_pte_writeback_p_put(d_mmu_cache$RDY_imem_pte_writeback_p_put),
			    .mem_master_awvalid(d_mmu_cache$mem_master_awvalid),
			    .mem_master_awid(d_mmu_cache$mem_master_awid),
			    .mem_master_awaddr(d_mmu_cache$mem_master_awaddr),
			    .mem_master_awlen(d_mmu_cache$mem_master_awlen),
			    .mem_master_awsize(d_mmu_cache$mem_master_awsize),
			    .mem_master_awburst(d_mmu_cache$mem_master_awburst),
			    .mem_master_awlock(d_mmu_cache$mem_master_awlock),
			    .mem_master_awcache(d_mmu_cache$mem_master_awcache),
			    .mem_master_awprot(d_mmu_cache$mem_master_awprot),
			    .mem_master_awqos(d_mmu_cache$mem_master_awqos),
			    .mem_master_awregion(d_mmu_cache$mem_master_awregion),
			    .mem_master_wvalid(d_mmu_cache$mem_master_wvalid),
			    .mem_master_wdata(d_mmu_cache$mem_master_wdata),
			    .mem_master_wstrb(d_mmu_cache$mem_master_wstrb),
			    .mem_master_wlast(d_mmu_cache$mem_master_wlast),
			    .mem_master_bready(d_mmu_cache$mem_master_bready),
			    .mem_master_arvalid(d_mmu_cache$mem_master_arvalid),
			    .mem_master_arid(d_mmu_cache$mem_master_arid),
			    .mem_master_araddr(d_mmu_cache$mem_master_araddr),
			    .mem_master_arlen(d_mmu_cache$mem_master_arlen),
			    .mem_master_arsize(d_mmu_cache$mem_master_arsize),
			    .mem_master_arburst(d_mmu_cache$mem_master_arburst),
			    .mem_master_arlock(d_mmu_cache$mem_master_arlock),
			    .mem_master_arcache(d_mmu_cache$mem_master_arcache),
			    .mem_master_arprot(d_mmu_cache$mem_master_arprot),
			    .mem_master_arqos(d_mmu_cache$mem_master_arqos),
			    .mem_master_arregion(d_mmu_cache$mem_master_arregion),
			    .mem_master_rready(d_mmu_cache$mem_master_rready),
			    .RDY_ma_ddr4_ready(),
			    .mv_status(d_mmu_cache$mv_status));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule i_mmu_cache
  mkI_MMU_Cache i_mmu_cache(.CLK(CLK),
			    .RST_N(RST_N),
			    .flush_server_request_put(i_mmu_cache$flush_server_request_put),
			    .mem_master_arready(i_mmu_cache$mem_master_arready),
			    .mem_master_awready(i_mmu_cache$mem_master_awready),
			    .mem_master_bid(i_mmu_cache$mem_master_bid),
			    .mem_master_bresp(i_mmu_cache$mem_master_bresp),
			    .mem_master_bvalid(i_mmu_cache$mem_master_bvalid),
			    .mem_master_rdata(i_mmu_cache$mem_master_rdata),
			    .mem_master_rid(i_mmu_cache$mem_master_rid),
			    .mem_master_rlast(i_mmu_cache$mem_master_rlast),
			    .mem_master_rresp(i_mmu_cache$mem_master_rresp),
			    .mem_master_rvalid(i_mmu_cache$mem_master_rvalid),
			    .mem_master_wready(i_mmu_cache$mem_master_wready),
			    .ptw_client_response_put(i_mmu_cache$ptw_client_response_put),
			    .req_mstatus_MXR(i_mmu_cache$req_mstatus_MXR),
			    .req_priv(i_mmu_cache$req_priv),
			    .req_satp(i_mmu_cache$req_satp),
			    .req_sstatus_SUM(i_mmu_cache$req_sstatus_SUM),
			    .req_va(i_mmu_cache$req_va),
			    .EN_req(i_mmu_cache$EN_req),
			    .EN_flush_server_request_put(i_mmu_cache$EN_flush_server_request_put),
			    .EN_flush_server_response_get(i_mmu_cache$EN_flush_server_response_get),
			    .EN_tlb_flush(i_mmu_cache$EN_tlb_flush),
			    .EN_ptw_client_request_get(i_mmu_cache$EN_ptw_client_request_get),
			    .EN_ptw_client_response_put(i_mmu_cache$EN_ptw_client_response_put),
			    .EN_pte_writeback_g_get(i_mmu_cache$EN_pte_writeback_g_get),
			    .EN_ma_ddr4_ready(i_mmu_cache$EN_ma_ddr4_ready),
			    .valid(i_mmu_cache$valid),
			    .addr(i_mmu_cache$addr),
			    .word64(i_mmu_cache$word64),
			    .exc(i_mmu_cache$exc),
			    .exc_code(i_mmu_cache$exc_code),
			    .RDY_flush_server_request_put(i_mmu_cache$RDY_flush_server_request_put),
			    .RDY_flush_server_response_get(i_mmu_cache$RDY_flush_server_response_get),
			    .RDY_tlb_flush(),
			    .ptw_client_request_get(i_mmu_cache$ptw_client_request_get),
			    .RDY_ptw_client_request_get(i_mmu_cache$RDY_ptw_client_request_get),
			    .RDY_ptw_client_response_put(i_mmu_cache$RDY_ptw_client_response_put),
			    .pte_writeback_g_get(i_mmu_cache$pte_writeback_g_get),
			    .RDY_pte_writeback_g_get(i_mmu_cache$RDY_pte_writeback_g_get),
			    .mem_master_awvalid(i_mmu_cache$mem_master_awvalid),
			    .mem_master_awid(i_mmu_cache$mem_master_awid),
			    .mem_master_awaddr(i_mmu_cache$mem_master_awaddr),
			    .mem_master_awlen(i_mmu_cache$mem_master_awlen),
			    .mem_master_awsize(i_mmu_cache$mem_master_awsize),
			    .mem_master_awburst(i_mmu_cache$mem_master_awburst),
			    .mem_master_awlock(i_mmu_cache$mem_master_awlock),
			    .mem_master_awcache(i_mmu_cache$mem_master_awcache),
			    .mem_master_awprot(i_mmu_cache$mem_master_awprot),
			    .mem_master_awqos(i_mmu_cache$mem_master_awqos),
			    .mem_master_awregion(i_mmu_cache$mem_master_awregion),
			    .mem_master_wvalid(i_mmu_cache$mem_master_wvalid),
			    .mem_master_wdata(i_mmu_cache$mem_master_wdata),
			    .mem_master_wstrb(i_mmu_cache$mem_master_wstrb),
			    .mem_master_wlast(i_mmu_cache$mem_master_wlast),
			    .mem_master_bready(i_mmu_cache$mem_master_bready),
			    .mem_master_arvalid(i_mmu_cache$mem_master_arvalid),
			    .mem_master_arid(i_mmu_cache$mem_master_arid),
			    .mem_master_araddr(i_mmu_cache$mem_master_araddr),
			    .mem_master_arlen(i_mmu_cache$mem_master_arlen),
			    .mem_master_arsize(i_mmu_cache$mem_master_arsize),
			    .mem_master_arburst(i_mmu_cache$mem_master_arburst),
			    .mem_master_arlock(i_mmu_cache$mem_master_arlock),
			    .mem_master_arcache(i_mmu_cache$mem_master_arcache),
			    .mem_master_arprot(i_mmu_cache$mem_master_arprot),
			    .mem_master_arqos(i_mmu_cache$mem_master_arqos),
			    .mem_master_arregion(i_mmu_cache$mem_master_arregion),
			    .mem_master_rready(i_mmu_cache$mem_master_rready),
			    .RDY_ma_ddr4_ready());

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_quad_spi_0_mem_addr_base(),
		    .m_quad_spi_0_mem_addr_size(),
		    .m_quad_spi_0_mem_addr_lim(),
		    .m_quad_spi_0_reg_addr_base(),
		    .m_quad_spi_0_reg_addr_size(),
		    .m_quad_spi_0_reg_addr_lim(),
		    .m_ethernet_0_addr_base(),
		    .m_ethernet_0_addr_size(),
		    .m_ethernet_0_addr_lim(),
		    .m_dma_0_addr_base(),
		    .m_dma_0_addr_size(),
		    .m_dma_0_addr_lim(),
		    .m_uart16550_0_addr_base(),
		    .m_uart16550_0_addr_size(),
		    .m_uart16550_0_addr_lim(),
		    .m_gpio0_addr_base(),
		    .m_gpio0_addr_size(),
		    .m_gpio0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_ddr4_0_uncached_addr_base(),
		    .m_ddr4_0_uncached_addr_size(),
		    .m_ddr4_0_uncached_addr_lim(),
		    .m_ddr4_0_cached_addr_base(),
		    .m_ddr4_0_cached_addr_size(),
		    .m_ddr4_0_cached_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // rule RL_ClientServerRequest
  assign CAN_FIRE_RL_ClientServerRequest =
	     d_mmu_cache$RDY_imem_ptw_server_request_put &&
	     i_mmu_cache$RDY_ptw_client_request_get ;
  assign WILL_FIRE_RL_ClientServerRequest = CAN_FIRE_RL_ClientServerRequest ;

  // rule RL_ClientServerResponse
  assign CAN_FIRE_RL_ClientServerResponse =
	     d_mmu_cache$RDY_imem_ptw_server_response_get &&
	     i_mmu_cache$RDY_ptw_client_response_put ;
  assign WILL_FIRE_RL_ClientServerResponse =
	     CAN_FIRE_RL_ClientServerResponse ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     d_mmu_cache$RDY_imem_pte_writeback_p_put &&
	     i_mmu_cache$RDY_pte_writeback_g_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset = rg_state == 2'd0 ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     f_reset_rsps$FULL_N && rg_state == 2'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete = CAN_FIRE_RL_rl_reset_complete ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = 4'h0 ;
  assign cfg_verbosity$EN = 1'b0 ;

  // register rg_state
  always@(EN_server_reset_request_put or
	  WILL_FIRE_RL_rl_reset or WILL_FIRE_RL_rl_reset_complete)
  begin
    case (1'b1) // synopsys parallel_case
      EN_server_reset_request_put: rg_state$D_IN = 2'd0;
      WILL_FIRE_RL_rl_reset: rg_state$D_IN = 2'd1;
      WILL_FIRE_RL_rl_reset_complete: rg_state$D_IN = 2'd2;
      default: rg_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     EN_server_reset_request_put || WILL_FIRE_RL_rl_reset ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // submodule d_mmu_cache
  assign d_mmu_cache$flush_server_request_put = 1'd0 ;
  assign d_mmu_cache$imem_pte_writeback_p_put =
	     i_mmu_cache$pte_writeback_g_get ;
  assign d_mmu_cache$imem_ptw_server_request_put =
	     i_mmu_cache$ptw_client_request_get ;
  assign d_mmu_cache$mem_master_arready = mem_master_arready ;
  assign d_mmu_cache$mem_master_awready = mem_master_awready ;
  assign d_mmu_cache$mem_master_bid = mem_master_bid ;
  assign d_mmu_cache$mem_master_bresp = mem_master_bresp ;
  assign d_mmu_cache$mem_master_bvalid = mem_master_bvalid ;
  assign d_mmu_cache$mem_master_rdata = mem_master_rdata ;
  assign d_mmu_cache$mem_master_rid = mem_master_rid ;
  assign d_mmu_cache$mem_master_rlast = mem_master_rlast ;
  assign d_mmu_cache$mem_master_rresp = mem_master_rresp ;
  assign d_mmu_cache$mem_master_rvalid = mem_master_rvalid ;
  assign d_mmu_cache$mem_master_wready = mem_master_wready ;
  assign d_mmu_cache$req_amo_funct7 = dmem_req_amo_funct7 ;
  assign d_mmu_cache$req_f3 = dmem_req_f3 ;
  assign d_mmu_cache$req_mstatus_MXR = dmem_req_mstatus_MXR ;
  assign d_mmu_cache$req_op = dmem_req_op ;
  assign d_mmu_cache$req_priv = dmem_req_priv ;
  assign d_mmu_cache$req_satp = dmem_req_satp ;
  assign d_mmu_cache$req_sstatus_SUM = dmem_req_sstatus_SUM ;
  assign d_mmu_cache$req_st_value = dmem_req_store_value ;
  assign d_mmu_cache$req_va = dmem_req_addr ;
  assign d_mmu_cache$EN_req = EN_dmem_req ;
  assign d_mmu_cache$EN_flush_server_request_put =
	     EN_server_fence_i_request_put || EN_server_fence_request_put ;
  assign d_mmu_cache$EN_flush_server_response_get =
	     EN_server_fence_i_response_get || EN_server_fence_response_get ;
  assign d_mmu_cache$EN_tlb_flush = EN_sfence_vma_server_request_put ;
  assign d_mmu_cache$EN_imem_ptw_server_request_put =
	     CAN_FIRE_RL_ClientServerRequest ;
  assign d_mmu_cache$EN_imem_ptw_server_response_get =
	     CAN_FIRE_RL_ClientServerResponse ;
  assign d_mmu_cache$EN_imem_pte_writeback_p_put =
	     CAN_FIRE_RL_mkConnectionGetPut ;
  assign d_mmu_cache$EN_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = CAN_FIRE_RL_rl_reset_complete ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule i_mmu_cache
  assign i_mmu_cache$flush_server_request_put = 1'd0 ;
  assign i_mmu_cache$mem_master_arready = imem_master_arready ;
  assign i_mmu_cache$mem_master_awready = imem_master_awready ;
  assign i_mmu_cache$mem_master_bid = imem_master_bid ;
  assign i_mmu_cache$mem_master_bresp = imem_master_bresp ;
  assign i_mmu_cache$mem_master_bvalid = imem_master_bvalid ;
  assign i_mmu_cache$mem_master_rdata = imem_master_rdata ;
  assign i_mmu_cache$mem_master_rid = imem_master_rid ;
  assign i_mmu_cache$mem_master_rlast = imem_master_rlast ;
  assign i_mmu_cache$mem_master_rresp = imem_master_rresp ;
  assign i_mmu_cache$mem_master_rvalid = imem_master_rvalid ;
  assign i_mmu_cache$mem_master_wready = imem_master_wready ;
  assign i_mmu_cache$ptw_client_response_put =
	     d_mmu_cache$imem_ptw_server_response_get ;
  assign i_mmu_cache$req_mstatus_MXR = imem_req_mstatus_MXR ;
  assign i_mmu_cache$req_priv = imem_req_priv ;
  assign i_mmu_cache$req_satp = imem_req_satp ;
  assign i_mmu_cache$req_sstatus_SUM = imem_req_sstatus_SUM ;
  assign i_mmu_cache$req_va = imem_req_addr ;
  assign i_mmu_cache$EN_req = EN_imem_req ;
  assign i_mmu_cache$EN_flush_server_request_put =
	     EN_server_fence_i_request_put ;
  assign i_mmu_cache$EN_flush_server_response_get =
	     EN_server_fence_i_response_get ;
  assign i_mmu_cache$EN_tlb_flush = EN_sfence_vma_server_request_put ;
  assign i_mmu_cache$EN_ptw_client_request_get =
	     CAN_FIRE_RL_ClientServerRequest ;
  assign i_mmu_cache$EN_ptw_client_response_put =
	     CAN_FIRE_RL_ClientServerResponse ;
  assign i_mmu_cache$EN_pte_writeback_g_get = CAN_FIRE_RL_mkConnectionGetPut ;
  assign i_mmu_cache$EN_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign NOT_cfg_verbosity_read__5_ULE_1_6___d17 = cfg_verbosity > 4'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd2;
	rg_state <= `BSV_ASSIGNMENT_DELAY 2'd2;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    rg_state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && NOT_cfg_verbosity_read__5_ULE_1_6___d17)
	begin
	  v__h1952 = $stime;
	  #0;
	end
    v__h1946 = v__h1952 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && NOT_cfg_verbosity_read__5_ULE_1_6___d17)
	$display("%0d: Near_Mem.rl_reset", v__h1946);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete &&
	  NOT_cfg_verbosity_read__5_ULE_1_6___d17)
	begin
	  v__h2057 = $stime;
	  #0;
	end
    v__h2051 = v__h2057 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete &&
	  NOT_cfg_verbosity_read__5_ULE_1_6___d17)
	$display("%0d: Near_Mem.rl_reset_complete", v__h2051);
  end
  // synopsys translate_on
endmodule  // mkNear_Mem

