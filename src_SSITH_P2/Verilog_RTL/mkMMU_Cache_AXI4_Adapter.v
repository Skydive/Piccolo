//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_p_mem_line_req_put         O     1 reg
// RDY_p_mem_line_write_data_put  O     1 reg
// g_mem_line_read_data_get       O    65 reg
// RDY_g_mem_line_read_data_get   O     1 reg
// RDY_p_mem_single_req_put       O     1 reg
// RDY_p_mem_single_write_data_put  O     1 reg
// g_mem_single_read_data_get     O    65 reg
// RDY_g_mem_single_read_data_get  O     1 reg
// mv_write_error                 O     1 reg
// mem_master_awvalid             O     1 reg
// mem_master_awid                O     4 reg
// mem_master_awaddr              O    64 reg
// mem_master_awlen               O     8 reg
// mem_master_awsize              O     3 reg
// mem_master_awburst             O     2 reg
// mem_master_awlock              O     1 reg
// mem_master_awcache             O     4 reg
// mem_master_awprot              O     3 reg
// mem_master_awqos               O     4 reg
// mem_master_awregion            O     4 reg
// mem_master_wvalid              O     1 reg
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_wlast               O     1 reg
// mem_master_bready              O     1 reg
// mem_master_arvalid             O     1 reg
// mem_master_arid                O     4 reg
// mem_master_araddr              O    64 reg
// mem_master_arlen               O     8 reg
// mem_master_arsize              O     3 reg
// mem_master_arburst             O     2 reg
// mem_master_arlock              O     1 reg
// mem_master_arcache             O     4 reg
// mem_master_arprot              O     3 reg
// mem_master_arqos               O     4 reg
// mem_master_arregion            O     4 reg
// mem_master_rready              O     1 reg
// RDY_ma_ddr4_ready              O     1 const
// mv_status                      O     8
// CLK                            I     1 clock
// RST_N                          I     1 reset
// p_mem_line_req_put             I    65 reg
// p_mem_line_write_data_put      I    64 reg
// p_mem_single_req_put           I    67 reg
// p_mem_single_write_data_put    I    64 reg
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bid                 I     4 reg
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rid                 I     4 reg
// mem_master_rdata               I    64 reg
// mem_master_rresp               I     2 reg
// mem_master_rlast               I     1 reg
// EN_p_mem_line_req_put          I     1
// EN_p_mem_line_write_data_put   I     1
// EN_p_mem_single_req_put        I     1
// EN_p_mem_single_write_data_put  I     1
// EN_ma_ddr4_ready               I     1
// EN_g_mem_line_read_data_get    I     1
// EN_g_mem_single_read_data_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_Cache_AXI4_Adapter(CLK,
				RST_N,

				p_mem_line_req_put,
				EN_p_mem_line_req_put,
				RDY_p_mem_line_req_put,

				p_mem_line_write_data_put,
				EN_p_mem_line_write_data_put,
				RDY_p_mem_line_write_data_put,

				EN_g_mem_line_read_data_get,
				g_mem_line_read_data_get,
				RDY_g_mem_line_read_data_get,

				p_mem_single_req_put,
				EN_p_mem_single_req_put,
				RDY_p_mem_single_req_put,

				p_mem_single_write_data_put,
				EN_p_mem_single_write_data_put,
				RDY_p_mem_single_write_data_put,

				EN_g_mem_single_read_data_get,
				g_mem_single_read_data_get,
				RDY_g_mem_single_read_data_get,

				mv_write_error,

				mem_master_awvalid,

				mem_master_awid,

				mem_master_awaddr,

				mem_master_awlen,

				mem_master_awsize,

				mem_master_awburst,

				mem_master_awlock,

				mem_master_awcache,

				mem_master_awprot,

				mem_master_awqos,

				mem_master_awregion,

				mem_master_awready,

				mem_master_wvalid,

				mem_master_wdata,

				mem_master_wstrb,

				mem_master_wlast,

				mem_master_wready,

				mem_master_bvalid,
				mem_master_bid,
				mem_master_bresp,

				mem_master_bready,

				mem_master_arvalid,

				mem_master_arid,

				mem_master_araddr,

				mem_master_arlen,

				mem_master_arsize,

				mem_master_arburst,

				mem_master_arlock,

				mem_master_arcache,

				mem_master_arprot,

				mem_master_arqos,

				mem_master_arregion,

				mem_master_arready,

				mem_master_rvalid,
				mem_master_rid,
				mem_master_rdata,
				mem_master_rresp,
				mem_master_rlast,

				mem_master_rready,

				EN_ma_ddr4_ready,
				RDY_ma_ddr4_ready,

				mv_status);
  parameter [2 : 0] verbosity = 3'b0;
  input  CLK;
  input  RST_N;

  // action method p_mem_line_req_put
  input  [64 : 0] p_mem_line_req_put;
  input  EN_p_mem_line_req_put;
  output RDY_p_mem_line_req_put;

  // action method p_mem_line_write_data_put
  input  [63 : 0] p_mem_line_write_data_put;
  input  EN_p_mem_line_write_data_put;
  output RDY_p_mem_line_write_data_put;

  // actionvalue method g_mem_line_read_data_get
  input  EN_g_mem_line_read_data_get;
  output [64 : 0] g_mem_line_read_data_get;
  output RDY_g_mem_line_read_data_get;

  // action method p_mem_single_req_put
  input  [66 : 0] p_mem_single_req_put;
  input  EN_p_mem_single_req_put;
  output RDY_p_mem_single_req_put;

  // action method p_mem_single_write_data_put
  input  [63 : 0] p_mem_single_write_data_put;
  input  EN_p_mem_single_write_data_put;
  output RDY_p_mem_single_write_data_put;

  // actionvalue method g_mem_single_read_data_get
  input  EN_g_mem_single_read_data_get;
  output [64 : 0] g_mem_single_read_data_get;
  output RDY_g_mem_single_read_data_get;

  // value method mv_write_error
  output mv_write_error;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_m_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_m_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_m_awlock
  output mem_master_awlock;

  // value method mem_master_m_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_m_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_m_wlast
  output mem_master_wlast;

  // value method mem_master_m_wuser

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_m_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_m_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_m_arlock
  output mem_master_arlock;

  // value method mem_master_m_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_m_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;

  // value method mem_master_m_rready
  output mem_master_rready;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // value method mv_status
  output [7 : 0] mv_status;

  // signals for module outputs
  wire [64 : 0] g_mem_line_read_data_get, g_mem_single_read_data_get;
  wire [63 : 0] mem_master_araddr, mem_master_awaddr, mem_master_wdata;
  wire [7 : 0] mem_master_arlen,
	       mem_master_awlen,
	       mem_master_wstrb,
	       mv_status;
  wire [3 : 0] mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst;
  wire RDY_g_mem_line_read_data_get,
       RDY_g_mem_single_read_data_get,
       RDY_ma_ddr4_ready,
       RDY_p_mem_line_req_put,
       RDY_p_mem_line_write_data_put,
       RDY_p_mem_single_req_put,
       RDY_p_mem_single_write_data_put,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       mv_write_error;

  // register rg_ddr4_ready
  reg rg_ddr4_ready;
  wire rg_ddr4_ready$D_IN, rg_ddr4_ready$EN;

  // register rg_rd_beat
  reg [7 : 0] rg_rd_beat;
  wire [7 : 0] rg_rd_beat$D_IN;
  wire rg_rd_beat$EN;

  // register rg_rd_client_id
  reg rg_rd_client_id;
  wire rg_rd_client_id$D_IN, rg_rd_client_id$EN;

  // register rg_rd_data_lower32
  reg [31 : 0] rg_rd_data_lower32;
  wire [31 : 0] rg_rd_data_lower32$D_IN;
  wire rg_rd_data_lower32$EN;

  // register rg_rd_data_lower32_ok
  reg rg_rd_data_lower32_ok;
  wire rg_rd_data_lower32_ok$D_IN, rg_rd_data_lower32_ok$EN;

  // register rg_rd_rsps_pending
  reg [3 : 0] rg_rd_rsps_pending;
  wire [3 : 0] rg_rd_rsps_pending$D_IN;
  wire rg_rd_rsps_pending$EN;

  // register rg_wr_beat
  reg [7 : 0] rg_wr_beat;
  wire [7 : 0] rg_wr_beat$D_IN;
  wire rg_wr_beat$EN;

  // register rg_wr_rsps_pending
  reg [3 : 0] rg_wr_rsps_pending;
  wire [3 : 0] rg_wr_rsps_pending$D_IN;
  wire rg_wr_rsps_pending$EN;

  // register rg_write_error
  reg rg_write_error;
  wire rg_write_error$D_IN, rg_write_error$EN;

  // ports of submodule f_line_read_data
  wire [64 : 0] f_line_read_data$D_IN, f_line_read_data$D_OUT;
  wire f_line_read_data$CLR,
       f_line_read_data$DEQ,
       f_line_read_data$EMPTY_N,
       f_line_read_data$ENQ,
       f_line_read_data$FULL_N;

  // ports of submodule f_line_reqs
  wire [64 : 0] f_line_reqs$D_IN, f_line_reqs$D_OUT;
  wire f_line_reqs$CLR,
       f_line_reqs$DEQ,
       f_line_reqs$EMPTY_N,
       f_line_reqs$ENQ,
       f_line_reqs$FULL_N;

  // ports of submodule f_line_write_data
  wire [63 : 0] f_line_write_data$D_IN, f_line_write_data$D_OUT;
  wire f_line_write_data$CLR,
       f_line_write_data$DEQ,
       f_line_write_data$EMPTY_N,
       f_line_write_data$ENQ,
       f_line_write_data$FULL_N;

  // ports of submodule f_rd_rsp_control
  wire [10 : 0] f_rd_rsp_control$D_IN, f_rd_rsp_control$D_OUT;
  wire f_rd_rsp_control$CLR,
       f_rd_rsp_control$DEQ,
       f_rd_rsp_control$EMPTY_N,
       f_rd_rsp_control$ENQ,
       f_rd_rsp_control$FULL_N;

  // ports of submodule f_single_read_data
  wire [64 : 0] f_single_read_data$D_IN, f_single_read_data$D_OUT;
  wire f_single_read_data$CLR,
       f_single_read_data$DEQ,
       f_single_read_data$EMPTY_N,
       f_single_read_data$ENQ,
       f_single_read_data$FULL_N;

  // ports of submodule f_single_reqs
  wire [66 : 0] f_single_reqs$D_IN, f_single_reqs$D_OUT;
  wire f_single_reqs$CLR,
       f_single_reqs$DEQ,
       f_single_reqs$EMPTY_N,
       f_single_reqs$ENQ,
       f_single_reqs$FULL_N;

  // ports of submodule f_single_write_data
  wire [63 : 0] f_single_write_data$D_IN, f_single_write_data$D_OUT;
  wire f_single_write_data$CLR,
       f_single_write_data$DEQ,
       f_single_write_data$EMPTY_N,
       f_single_write_data$ENQ,
       f_single_write_data$FULL_N;

  // ports of submodule f_wr_data_control
  wire [13 : 0] f_wr_data_control$D_IN, f_wr_data_control$D_OUT;
  wire f_wr_data_control$CLR,
       f_wr_data_control$DEQ,
       f_wr_data_control$EMPTY_N,
       f_wr_data_control$ENQ,
       f_wr_data_control$FULL_N;

  // ports of submodule master_xactor_f_rd_addr
  wire [96 : 0] master_xactor_f_rd_addr$D_IN, master_xactor_f_rd_addr$D_OUT;
  wire master_xactor_f_rd_addr$CLR,
       master_xactor_f_rd_addr$DEQ,
       master_xactor_f_rd_addr$EMPTY_N,
       master_xactor_f_rd_addr$ENQ,
       master_xactor_f_rd_addr$FULL_N;

  // ports of submodule master_xactor_f_rd_data
  wire [70 : 0] master_xactor_f_rd_data$D_IN, master_xactor_f_rd_data$D_OUT;
  wire master_xactor_f_rd_data$CLR,
       master_xactor_f_rd_data$DEQ,
       master_xactor_f_rd_data$EMPTY_N,
       master_xactor_f_rd_data$ENQ,
       master_xactor_f_rd_data$FULL_N;

  // ports of submodule master_xactor_f_wr_addr
  wire [96 : 0] master_xactor_f_wr_addr$D_IN, master_xactor_f_wr_addr$D_OUT;
  wire master_xactor_f_wr_addr$CLR,
       master_xactor_f_wr_addr$DEQ,
       master_xactor_f_wr_addr$EMPTY_N,
       master_xactor_f_wr_addr$ENQ,
       master_xactor_f_wr_addr$FULL_N;

  // ports of submodule master_xactor_f_wr_data
  wire [72 : 0] master_xactor_f_wr_data$D_IN, master_xactor_f_wr_data$D_OUT;
  wire master_xactor_f_wr_data$CLR,
       master_xactor_f_wr_data$DEQ,
       master_xactor_f_wr_data$EMPTY_N,
       master_xactor_f_wr_data$ENQ,
       master_xactor_f_wr_data$FULL_N;

  // ports of submodule master_xactor_f_wr_resp
  wire [5 : 0] master_xactor_f_wr_resp$D_IN, master_xactor_f_wr_resp$D_OUT;
  wire master_xactor_f_wr_resp$CLR,
       master_xactor_f_wr_resp$DEQ,
       master_xactor_f_wr_resp$EMPTY_N,
       master_xactor_f_wr_resp$ENQ,
       master_xactor_f_wr_resp$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_line_read_req,
       CAN_FIRE_RL_rl_line_write_req,
       CAN_FIRE_RL_rl_read_data,
       CAN_FIRE_RL_rl_single_read_req,
       CAN_FIRE_RL_rl_single_write_req,
       CAN_FIRE_RL_rl_write_data,
       CAN_FIRE_RL_rl_write_rsp,
       CAN_FIRE_g_mem_line_read_data_get,
       CAN_FIRE_g_mem_single_read_data_get,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_p_mem_line_req_put,
       CAN_FIRE_p_mem_line_write_data_put,
       CAN_FIRE_p_mem_single_req_put,
       CAN_FIRE_p_mem_single_write_data_put,
       WILL_FIRE_RL_rl_line_read_req,
       WILL_FIRE_RL_rl_line_write_req,
       WILL_FIRE_RL_rl_read_data,
       WILL_FIRE_RL_rl_single_read_req,
       WILL_FIRE_RL_rl_single_write_req,
       WILL_FIRE_RL_rl_write_data,
       WILL_FIRE_RL_rl_write_rsp,
       WILL_FIRE_g_mem_line_read_data_get,
       WILL_FIRE_g_mem_single_read_data_get,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_p_mem_line_req_put,
       WILL_FIRE_p_mem_line_write_data_put,
       WILL_FIRE_p_mem_single_req_put,
       WILL_FIRE_p_mem_single_write_data_put;

  // inputs to muxes for submodule ports
  wire [96 : 0] MUX_master_xactor_f_rd_addr$enq_1__VAL_1,
		MUX_master_xactor_f_rd_addr$enq_1__VAL_2;
  wire [13 : 0] MUX_f_wr_data_control$enq_1__VAL_1;
  wire [10 : 0] MUX_f_rd_rsp_control$enq_1__VAL_1;
  wire [7 : 0] MUX_rg_rd_beat$write_1__VAL_1;
  wire [3 : 0] MUX_rg_rd_rsps_pending$write_1__VAL_1,
	       MUX_rg_rd_rsps_pending$write_1__VAL_2,
	       MUX_rg_wr_rsps_pending$write_1__VAL_1,
	       MUX_rg_wr_rsps_pending$write_1__VAL_2;
  wire MUX_rg_rd_beat$write_1__SEL_2,
       MUX_rg_rd_rsps_pending$write_1__SEL_1,
       MUX_rg_wr_rsps_pending$write_1__SEL_1,
       MUX_rg_wr_rsps_pending$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h2456;
  reg [31 : 0] v__h3805;
  reg [31 : 0] v__h2611;
  reg [31 : 0] v__h2978;
  reg [31 : 0] v__h3077;
  reg [31 : 0] v__h3128;
  reg [31 : 0] v__h4085;
  reg [31 : 0] v__h4318;
  reg [31 : 0] v__h4944;
  reg [31 : 0] v__h1936;
  reg [31 : 0] v__h1930;
  reg [31 : 0] v__h2450;
  reg [31 : 0] v__h2605;
  reg [31 : 0] v__h2972;
  reg [31 : 0] v__h3071;
  reg [31 : 0] v__h3122;
  reg [31 : 0] v__h3799;
  reg [31 : 0] v__h4079;
  reg [31 : 0] v__h4312;
  reg [31 : 0] v__h4938;
  // synopsys translate_on

  // remaining internal signals
  reg [7 : 0] strb__h3518;
  wire [63 : 0] data__h3523, fabric_addr__h2207;
  wire [7 : 0] strb__h3525, x__h3481;
  wire [2 : 0] x__h2716;
  wire master_xactor_f_rd_data_i_notEmpty_AND_IF_rg_r_ETC___d7,
       master_xactor_f_wr_data_i_notFull__04_AND_IF_f_ETC___d110,
       rg_rd_beat_EQ_f_rd_rsp_control_first__0_BITS_7_ETC___d16,
       rg_wr_beat_12_EQ_f_wr_data_control_first__05_B_ETC___d118;

  // action method p_mem_line_req_put
  assign RDY_p_mem_line_req_put = f_line_reqs$FULL_N ;
  assign CAN_FIRE_p_mem_line_req_put = f_line_reqs$FULL_N ;
  assign WILL_FIRE_p_mem_line_req_put = EN_p_mem_line_req_put ;

  // action method p_mem_line_write_data_put
  assign RDY_p_mem_line_write_data_put = f_line_write_data$FULL_N ;
  assign CAN_FIRE_p_mem_line_write_data_put = f_line_write_data$FULL_N ;
  assign WILL_FIRE_p_mem_line_write_data_put = EN_p_mem_line_write_data_put ;

  // actionvalue method g_mem_line_read_data_get
  assign g_mem_line_read_data_get = f_line_read_data$D_OUT ;
  assign RDY_g_mem_line_read_data_get = f_line_read_data$EMPTY_N ;
  assign CAN_FIRE_g_mem_line_read_data_get = f_line_read_data$EMPTY_N ;
  assign WILL_FIRE_g_mem_line_read_data_get = EN_g_mem_line_read_data_get ;

  // action method p_mem_single_req_put
  assign RDY_p_mem_single_req_put = f_single_reqs$FULL_N ;
  assign CAN_FIRE_p_mem_single_req_put = f_single_reqs$FULL_N ;
  assign WILL_FIRE_p_mem_single_req_put = EN_p_mem_single_req_put ;

  // action method p_mem_single_write_data_put
  assign RDY_p_mem_single_write_data_put = f_single_write_data$FULL_N ;
  assign CAN_FIRE_p_mem_single_write_data_put = f_single_write_data$FULL_N ;
  assign WILL_FIRE_p_mem_single_write_data_put =
	     EN_p_mem_single_write_data_put ;

  // actionvalue method g_mem_single_read_data_get
  assign g_mem_single_read_data_get = f_single_read_data$D_OUT ;
  assign RDY_g_mem_single_read_data_get = f_single_read_data$EMPTY_N ;
  assign CAN_FIRE_g_mem_single_read_data_get = f_single_read_data$EMPTY_N ;
  assign WILL_FIRE_g_mem_single_read_data_get =
	     EN_g_mem_single_read_data_get ;

  // value method mv_write_error
  assign mv_write_error = rg_write_error ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid = master_xactor_f_wr_addr$EMPTY_N ;

  // value method mem_master_m_awid
  assign mem_master_awid = master_xactor_f_wr_addr$D_OUT[96:93] ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = master_xactor_f_wr_addr$D_OUT[92:29] ;

  // value method mem_master_m_awlen
  assign mem_master_awlen = master_xactor_f_wr_addr$D_OUT[28:21] ;

  // value method mem_master_m_awsize
  assign mem_master_awsize = master_xactor_f_wr_addr$D_OUT[20:18] ;

  // value method mem_master_m_awburst
  assign mem_master_awburst = master_xactor_f_wr_addr$D_OUT[17:16] ;

  // value method mem_master_m_awlock
  assign mem_master_awlock = master_xactor_f_wr_addr$D_OUT[15] ;

  // value method mem_master_m_awcache
  assign mem_master_awcache = master_xactor_f_wr_addr$D_OUT[14:11] ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = master_xactor_f_wr_addr$D_OUT[10:8] ;

  // value method mem_master_m_awqos
  assign mem_master_awqos = master_xactor_f_wr_addr$D_OUT[7:4] ;

  // value method mem_master_m_awregion
  assign mem_master_awregion = master_xactor_f_wr_addr$D_OUT[3:0] ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid = master_xactor_f_wr_data$EMPTY_N ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = master_xactor_f_wr_data$D_OUT[72:9] ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = master_xactor_f_wr_data$D_OUT[8:1] ;

  // value method mem_master_m_wlast
  assign mem_master_wlast = master_xactor_f_wr_data$D_OUT[0] ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = master_xactor_f_wr_resp$FULL_N ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid = master_xactor_f_rd_addr$EMPTY_N ;

  // value method mem_master_m_arid
  assign mem_master_arid = master_xactor_f_rd_addr$D_OUT[96:93] ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = master_xactor_f_rd_addr$D_OUT[92:29] ;

  // value method mem_master_m_arlen
  assign mem_master_arlen = master_xactor_f_rd_addr$D_OUT[28:21] ;

  // value method mem_master_m_arsize
  assign mem_master_arsize = master_xactor_f_rd_addr$D_OUT[20:18] ;

  // value method mem_master_m_arburst
  assign mem_master_arburst = master_xactor_f_rd_addr$D_OUT[17:16] ;

  // value method mem_master_m_arlock
  assign mem_master_arlock = master_xactor_f_rd_addr$D_OUT[15] ;

  // value method mem_master_m_arcache
  assign mem_master_arcache = master_xactor_f_rd_addr$D_OUT[14:11] ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = master_xactor_f_rd_addr$D_OUT[10:8] ;

  // value method mem_master_m_arqos
  assign mem_master_arqos = master_xactor_f_rd_addr$D_OUT[7:4] ;

  // value method mem_master_m_arregion
  assign mem_master_arregion = master_xactor_f_rd_addr$D_OUT[3:0] ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = master_xactor_f_rd_data$FULL_N ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready = 1'd1 ;
  assign CAN_FIRE_ma_ddr4_ready = 1'd1 ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // value method mv_status
  assign mv_status = rg_write_error ? 8'd1 : 8'd0 ;

  // submodule f_line_read_data
  FIFO2 #(.width(32'd65), .guarded(32'd1)) f_line_read_data(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(f_line_read_data$D_IN),
							    .ENQ(f_line_read_data$ENQ),
							    .DEQ(f_line_read_data$DEQ),
							    .CLR(f_line_read_data$CLR),
							    .D_OUT(f_line_read_data$D_OUT),
							    .FULL_N(f_line_read_data$FULL_N),
							    .EMPTY_N(f_line_read_data$EMPTY_N));

  // submodule f_line_reqs
  FIFO2 #(.width(32'd65), .guarded(32'd1)) f_line_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_line_reqs$D_IN),
						       .ENQ(f_line_reqs$ENQ),
						       .DEQ(f_line_reqs$DEQ),
						       .CLR(f_line_reqs$CLR),
						       .D_OUT(f_line_reqs$D_OUT),
						       .FULL_N(f_line_reqs$FULL_N),
						       .EMPTY_N(f_line_reqs$EMPTY_N));

  // submodule f_line_write_data
  FIFO2 #(.width(32'd64), .guarded(32'd1)) f_line_write_data(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(f_line_write_data$D_IN),
							     .ENQ(f_line_write_data$ENQ),
							     .DEQ(f_line_write_data$DEQ),
							     .CLR(f_line_write_data$CLR),
							     .D_OUT(f_line_write_data$D_OUT),
							     .FULL_N(f_line_write_data$FULL_N),
							     .EMPTY_N(f_line_write_data$EMPTY_N));

  // submodule f_rd_rsp_control
  FIFO2 #(.width(32'd11), .guarded(32'd1)) f_rd_rsp_control(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(f_rd_rsp_control$D_IN),
							    .ENQ(f_rd_rsp_control$ENQ),
							    .DEQ(f_rd_rsp_control$DEQ),
							    .CLR(f_rd_rsp_control$CLR),
							    .D_OUT(f_rd_rsp_control$D_OUT),
							    .FULL_N(f_rd_rsp_control$FULL_N),
							    .EMPTY_N(f_rd_rsp_control$EMPTY_N));

  // submodule f_single_read_data
  FIFO2 #(.width(32'd65), .guarded(32'd1)) f_single_read_data(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(f_single_read_data$D_IN),
							      .ENQ(f_single_read_data$ENQ),
							      .DEQ(f_single_read_data$DEQ),
							      .CLR(f_single_read_data$CLR),
							      .D_OUT(f_single_read_data$D_OUT),
							      .FULL_N(f_single_read_data$FULL_N),
							      .EMPTY_N(f_single_read_data$EMPTY_N));

  // submodule f_single_reqs
  FIFO2 #(.width(32'd67), .guarded(32'd1)) f_single_reqs(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_single_reqs$D_IN),
							 .ENQ(f_single_reqs$ENQ),
							 .DEQ(f_single_reqs$DEQ),
							 .CLR(f_single_reqs$CLR),
							 .D_OUT(f_single_reqs$D_OUT),
							 .FULL_N(f_single_reqs$FULL_N),
							 .EMPTY_N(f_single_reqs$EMPTY_N));

  // submodule f_single_write_data
  FIFO2 #(.width(32'd64), .guarded(32'd1)) f_single_write_data(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(f_single_write_data$D_IN),
							       .ENQ(f_single_write_data$ENQ),
							       .DEQ(f_single_write_data$DEQ),
							       .CLR(f_single_write_data$CLR),
							       .D_OUT(f_single_write_data$D_OUT),
							       .FULL_N(f_single_write_data$FULL_N),
							       .EMPTY_N(f_single_write_data$EMPTY_N));

  // submodule f_wr_data_control
  FIFO2 #(.width(32'd14), .guarded(32'd1)) f_wr_data_control(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(f_wr_data_control$D_IN),
							     .ENQ(f_wr_data_control$ENQ),
							     .DEQ(f_wr_data_control$DEQ),
							     .CLR(f_wr_data_control$CLR),
							     .D_OUT(f_wr_data_control$D_OUT),
							     .FULL_N(f_wr_data_control$FULL_N),
							     .EMPTY_N(f_wr_data_control$EMPTY_N));

  // submodule master_xactor_f_rd_addr
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) master_xactor_f_rd_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_addr$D_IN),
						   .ENQ(master_xactor_f_rd_addr$ENQ),
						   .DEQ(master_xactor_f_rd_addr$DEQ),
						   .CLR(master_xactor_f_rd_addr$CLR),
						   .D_OUT(master_xactor_f_rd_addr$D_OUT),
						   .FULL_N(master_xactor_f_rd_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_addr$EMPTY_N));

  // submodule master_xactor_f_rd_data
  FIFO2 #(.width(32'd71),
	  .guarded(32'd1)) master_xactor_f_rd_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_data$D_IN),
						   .ENQ(master_xactor_f_rd_data$ENQ),
						   .DEQ(master_xactor_f_rd_data$DEQ),
						   .CLR(master_xactor_f_rd_data$CLR),
						   .D_OUT(master_xactor_f_rd_data$D_OUT),
						   .FULL_N(master_xactor_f_rd_data$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_data$EMPTY_N));

  // submodule master_xactor_f_wr_addr
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) master_xactor_f_wr_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_addr$D_IN),
						   .ENQ(master_xactor_f_wr_addr$ENQ),
						   .DEQ(master_xactor_f_wr_addr$DEQ),
						   .CLR(master_xactor_f_wr_addr$CLR),
						   .D_OUT(master_xactor_f_wr_addr$D_OUT),
						   .FULL_N(master_xactor_f_wr_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_addr$EMPTY_N));

  // submodule master_xactor_f_wr_data
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) master_xactor_f_wr_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_data$D_IN),
						   .ENQ(master_xactor_f_wr_data$ENQ),
						   .DEQ(master_xactor_f_wr_data$DEQ),
						   .CLR(master_xactor_f_wr_data$CLR),
						   .D_OUT(master_xactor_f_wr_data$D_OUT),
						   .FULL_N(master_xactor_f_wr_data$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_data$EMPTY_N));

  // submodule master_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) master_xactor_f_wr_resp(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(master_xactor_f_wr_resp$D_IN),
								  .ENQ(master_xactor_f_wr_resp$ENQ),
								  .DEQ(master_xactor_f_wr_resp$DEQ),
								  .CLR(master_xactor_f_wr_resp$CLR),
								  .D_OUT(master_xactor_f_wr_resp$D_OUT),
								  .FULL_N(master_xactor_f_wr_resp$FULL_N),
								  .EMPTY_N(master_xactor_f_wr_resp$EMPTY_N));

  // rule RL_rl_line_read_req
  assign CAN_FIRE_RL_rl_line_read_req =
	     f_line_reqs$EMPTY_N && master_xactor_f_rd_addr$FULL_N &&
	     f_rd_rsp_control$FULL_N &&
	     f_line_reqs$D_OUT[64] &&
	     rg_ddr4_ready &&
	     rg_rd_rsps_pending != 4'd15 &&
	     rg_wr_rsps_pending == 4'd0 ;
  assign WILL_FIRE_RL_rl_line_read_req =
	     CAN_FIRE_RL_rl_line_read_req && !WILL_FIRE_RL_rl_read_data ;

  // rule RL_rl_write_data
  assign CAN_FIRE_RL_rl_write_data =
	     f_wr_data_control$EMPTY_N &&
	     master_xactor_f_wr_data_i_notFull__04_AND_IF_f_ETC___d110 &&
	     rg_ddr4_ready &&
	     rg_wr_beat < f_wr_data_control$D_OUT[7:0] ;
  assign WILL_FIRE_RL_rl_write_data = CAN_FIRE_RL_rl_write_data ;

  // rule RL_rl_single_read_req
  assign CAN_FIRE_RL_rl_single_read_req =
	     master_xactor_f_rd_addr$FULL_N && f_rd_rsp_control$FULL_N &&
	     f_single_reqs$EMPTY_N &&
	     f_single_reqs$D_OUT[66] &&
	     rg_ddr4_ready &&
	     rg_rd_rsps_pending != 4'd15 &&
	     rg_wr_rsps_pending == 4'd0 ;
  assign WILL_FIRE_RL_rl_single_read_req =
	     CAN_FIRE_RL_rl_single_read_req &&
	     !WILL_FIRE_RL_rl_line_write_req &&
	     !WILL_FIRE_RL_rl_line_read_req &&
	     !WILL_FIRE_RL_rl_read_data ;

  // rule RL_rl_write_rsp
  assign CAN_FIRE_RL_rl_write_rsp = master_xactor_f_wr_resp$EMPTY_N ;
  assign WILL_FIRE_RL_rl_write_rsp = master_xactor_f_wr_resp$EMPTY_N ;

  // rule RL_rl_line_write_req
  assign CAN_FIRE_RL_rl_line_write_req =
	     f_line_reqs$EMPTY_N && master_xactor_f_wr_addr$FULL_N &&
	     f_wr_data_control$FULL_N &&
	     !f_line_reqs$D_OUT[64] &&
	     rg_ddr4_ready &&
	     rg_rd_rsps_pending == 4'd0 &&
	     rg_wr_rsps_pending != 4'd15 ;
  assign WILL_FIRE_RL_rl_line_write_req =
	     CAN_FIRE_RL_rl_line_write_req &&
	     !master_xactor_f_wr_resp$EMPTY_N ;

  // rule RL_rl_single_write_req
  assign CAN_FIRE_RL_rl_single_write_req =
	     f_single_reqs$EMPTY_N && master_xactor_f_wr_addr$FULL_N &&
	     f_wr_data_control$FULL_N &&
	     !f_single_reqs$D_OUT[66] &&
	     rg_ddr4_ready &&
	     rg_rd_rsps_pending == 4'd0 &&
	     rg_wr_rsps_pending != 4'd15 ;
  assign WILL_FIRE_RL_rl_single_write_req =
	     CAN_FIRE_RL_rl_single_write_req &&
	     !WILL_FIRE_RL_rl_line_write_req &&
	     !master_xactor_f_wr_resp$EMPTY_N &&
	     !WILL_FIRE_RL_rl_line_read_req ;

  // rule RL_rl_read_data
  assign CAN_FIRE_RL_rl_read_data =
	     f_rd_rsp_control$EMPTY_N &&
	     master_xactor_f_rd_data_i_notEmpty_AND_IF_rg_r_ETC___d7 &&
	     rg_rd_beat < f_rd_rsp_control$D_OUT[7:0] ;
  assign WILL_FIRE_RL_rl_read_data = CAN_FIRE_RL_rl_read_data ;

  // inputs to muxes for submodule ports
  assign MUX_rg_rd_beat$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_single_read_req ||
	     WILL_FIRE_RL_rl_line_read_req ;
  assign MUX_rg_rd_rsps_pending$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_read_data &&
	     rg_rd_beat_EQ_f_rd_rsp_control_first__0_BITS_7_ETC___d16 ;
  assign MUX_rg_wr_rsps_pending$write_1__SEL_1 =
	     master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 ;
  assign MUX_rg_wr_rsps_pending$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_single_write_req ||
	     WILL_FIRE_RL_rl_line_write_req ;
  assign MUX_f_rd_rsp_control$enq_1__VAL_1 =
	     { f_single_reqs$D_OUT[1:0], f_single_reqs$D_OUT[4], 8'd1 } ;
  assign MUX_f_wr_data_control$enq_1__VAL_1 =
	     { 1'd1,
	       f_single_reqs$D_OUT[1:0],
	       f_single_reqs$D_OUT[4:2],
	       8'd1 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_1 =
	     { 4'd0, fabric_addr__h2207, 29'd15532032 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_2 =
	     { 4'd0, f_single_reqs$D_OUT[65:2], 8'd0, x__h2716, 18'd65536 } ;
  assign MUX_rg_rd_beat$write_1__VAL_1 = rg_rd_beat + 8'd1 ;
  assign MUX_rg_rd_rsps_pending$write_1__VAL_1 = rg_rd_rsps_pending - 4'd1 ;
  assign MUX_rg_rd_rsps_pending$write_1__VAL_2 = rg_rd_rsps_pending + 4'd1 ;
  assign MUX_rg_wr_rsps_pending$write_1__VAL_1 = rg_wr_rsps_pending - 4'd1 ;
  assign MUX_rg_wr_rsps_pending$write_1__VAL_2 = rg_wr_rsps_pending + 4'd1 ;

  // register rg_ddr4_ready
  assign rg_ddr4_ready$D_IN = 1'd1 ;
  assign rg_ddr4_ready$EN = EN_ma_ddr4_ready ;

  // register rg_rd_beat
  assign rg_rd_beat$D_IN =
	     WILL_FIRE_RL_rl_read_data ?
	       MUX_rg_rd_beat$write_1__VAL_1 :
	       8'd0 ;
  assign rg_rd_beat$EN =
	     WILL_FIRE_RL_rl_read_data || WILL_FIRE_RL_rl_single_read_req ||
	     WILL_FIRE_RL_rl_line_read_req ;

  // register rg_rd_client_id
  assign rg_rd_client_id$D_IN = !WILL_FIRE_RL_rl_line_read_req ;
  assign rg_rd_client_id$EN =
	     WILL_FIRE_RL_rl_line_read_req ||
	     WILL_FIRE_RL_rl_single_read_req ;

  // register rg_rd_data_lower32
  assign rg_rd_data_lower32$D_IN = 32'h0 ;
  assign rg_rd_data_lower32$EN = 1'b0 ;

  // register rg_rd_data_lower32_ok
  assign rg_rd_data_lower32_ok$D_IN = 1'b0 ;
  assign rg_rd_data_lower32_ok$EN = 1'b0 ;

  // register rg_rd_rsps_pending
  assign rg_rd_rsps_pending$D_IN =
	     MUX_rg_rd_rsps_pending$write_1__SEL_1 ?
	       MUX_rg_rd_rsps_pending$write_1__VAL_1 :
	       MUX_rg_rd_rsps_pending$write_1__VAL_2 ;
  assign rg_rd_rsps_pending$EN =
	     WILL_FIRE_RL_rl_read_data &&
	     rg_rd_beat_EQ_f_rd_rsp_control_first__0_BITS_7_ETC___d16 ||
	     WILL_FIRE_RL_rl_single_read_req ||
	     WILL_FIRE_RL_rl_line_read_req ;

  // register rg_wr_beat
  assign rg_wr_beat$D_IN =
	     rg_wr_beat_12_EQ_f_wr_data_control_first__05_B_ETC___d118 ?
	       8'd0 :
	       x__h3481 ;
  assign rg_wr_beat$EN = CAN_FIRE_RL_rl_write_data ;

  // register rg_wr_rsps_pending
  assign rg_wr_rsps_pending$D_IN =
	     MUX_rg_wr_rsps_pending$write_1__SEL_1 ?
	       MUX_rg_wr_rsps_pending$write_1__VAL_1 :
	       MUX_rg_wr_rsps_pending$write_1__VAL_2 ;
  assign rg_wr_rsps_pending$EN =
	     master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 ||
	     WILL_FIRE_RL_rl_single_write_req ||
	     WILL_FIRE_RL_rl_line_write_req ;

  // register rg_write_error
  assign rg_write_error$D_IN = 1'd1 ;
  assign rg_write_error$EN =
	     master_xactor_f_wr_resp$EMPTY_N &&
	     (rg_wr_rsps_pending == 4'd0 ||
	      master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0) ;

  // submodule f_line_read_data
  assign f_line_read_data$D_IN =
	     { master_xactor_f_rd_data$D_OUT[2:1] == 2'b0,
	       master_xactor_f_rd_data$D_OUT[66:3] } ;
  assign f_line_read_data$ENQ =
	     WILL_FIRE_RL_rl_read_data && !rg_rd_client_id ;
  assign f_line_read_data$DEQ = EN_g_mem_line_read_data_get ;
  assign f_line_read_data$CLR = 1'b0 ;

  // submodule f_line_reqs
  assign f_line_reqs$D_IN = p_mem_line_req_put ;
  assign f_line_reqs$ENQ = EN_p_mem_line_req_put ;
  assign f_line_reqs$DEQ =
	     WILL_FIRE_RL_rl_line_write_req || WILL_FIRE_RL_rl_line_read_req ;
  assign f_line_reqs$CLR = 1'b0 ;

  // submodule f_line_write_data
  assign f_line_write_data$D_IN = p_mem_line_write_data_put ;
  assign f_line_write_data$ENQ = EN_p_mem_line_write_data_put ;
  assign f_line_write_data$DEQ =
	     WILL_FIRE_RL_rl_write_data && !f_wr_data_control$D_OUT[13] ;
  assign f_line_write_data$CLR = 1'b0 ;

  // submodule f_rd_rsp_control
  assign f_rd_rsp_control$D_IN =
	     WILL_FIRE_RL_rl_single_read_req ?
	       MUX_f_rd_rsp_control$enq_1__VAL_1 :
	       11'd1544 ;
  assign f_rd_rsp_control$ENQ = MUX_rg_rd_beat$write_1__SEL_2 ;
  assign f_rd_rsp_control$DEQ = MUX_rg_rd_rsps_pending$write_1__SEL_1 ;
  assign f_rd_rsp_control$CLR = 1'b0 ;

  // submodule f_single_read_data
  assign f_single_read_data$D_IN =
	     { master_xactor_f_rd_data$D_OUT[2:1] == 2'b0,
	       master_xactor_f_rd_data$D_OUT[66:3] } ;
  assign f_single_read_data$ENQ =
	     WILL_FIRE_RL_rl_read_data && rg_rd_client_id ;
  assign f_single_read_data$DEQ = EN_g_mem_single_read_data_get ;
  assign f_single_read_data$CLR = 1'b0 ;

  // submodule f_single_reqs
  assign f_single_reqs$D_IN = p_mem_single_req_put ;
  assign f_single_reqs$ENQ = EN_p_mem_single_req_put ;
  assign f_single_reqs$DEQ =
	     WILL_FIRE_RL_rl_single_write_req ||
	     WILL_FIRE_RL_rl_single_read_req ;
  assign f_single_reqs$CLR = 1'b0 ;

  // submodule f_single_write_data
  assign f_single_write_data$D_IN = p_mem_single_write_data_put ;
  assign f_single_write_data$ENQ = EN_p_mem_single_write_data_put ;
  assign f_single_write_data$DEQ =
	     WILL_FIRE_RL_rl_write_data && f_wr_data_control$D_OUT[13] ;
  assign f_single_write_data$CLR = 1'b0 ;

  // submodule f_wr_data_control
  assign f_wr_data_control$D_IN =
	     WILL_FIRE_RL_rl_single_write_req ?
	       MUX_f_wr_data_control$enq_1__VAL_1 :
	       14'd6152 ;
  assign f_wr_data_control$ENQ = MUX_rg_wr_rsps_pending$write_1__SEL_2 ;
  assign f_wr_data_control$DEQ =
	     WILL_FIRE_RL_rl_write_data &&
	     rg_wr_beat_12_EQ_f_wr_data_control_first__05_B_ETC___d118 ;
  assign f_wr_data_control$CLR = 1'b0 ;

  // submodule master_xactor_f_rd_addr
  assign master_xactor_f_rd_addr$D_IN =
	     WILL_FIRE_RL_rl_line_read_req ?
	       MUX_master_xactor_f_rd_addr$enq_1__VAL_1 :
	       MUX_master_xactor_f_rd_addr$enq_1__VAL_2 ;
  assign master_xactor_f_rd_addr$ENQ =
	     WILL_FIRE_RL_rl_line_read_req ||
	     WILL_FIRE_RL_rl_single_read_req ;
  assign master_xactor_f_rd_addr$DEQ =
	     master_xactor_f_rd_addr$EMPTY_N && mem_master_arready ;
  assign master_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule master_xactor_f_rd_data
  assign master_xactor_f_rd_data$D_IN =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast } ;
  assign master_xactor_f_rd_data$ENQ =
	     mem_master_rvalid && master_xactor_f_rd_data$FULL_N ;
  assign master_xactor_f_rd_data$DEQ = CAN_FIRE_RL_rl_read_data ;
  assign master_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule master_xactor_f_wr_addr
  assign master_xactor_f_wr_addr$D_IN =
	     WILL_FIRE_RL_rl_line_write_req ?
	       MUX_master_xactor_f_rd_addr$enq_1__VAL_1 :
	       MUX_master_xactor_f_rd_addr$enq_1__VAL_2 ;
  assign master_xactor_f_wr_addr$ENQ =
	     WILL_FIRE_RL_rl_line_write_req ||
	     WILL_FIRE_RL_rl_single_write_req ;
  assign master_xactor_f_wr_addr$DEQ =
	     master_xactor_f_wr_addr$EMPTY_N && mem_master_awready ;
  assign master_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule master_xactor_f_wr_data
  assign master_xactor_f_wr_data$D_IN =
	     { data__h3523,
	       strb__h3525,
	       rg_wr_beat_12_EQ_f_wr_data_control_first__05_B_ETC___d118 } ;
  assign master_xactor_f_wr_data$ENQ = CAN_FIRE_RL_rl_write_data ;
  assign master_xactor_f_wr_data$DEQ =
	     master_xactor_f_wr_data$EMPTY_N && mem_master_wready ;
  assign master_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule master_xactor_f_wr_resp
  assign master_xactor_f_wr_resp$D_IN = { mem_master_bid, mem_master_bresp } ;
  assign master_xactor_f_wr_resp$ENQ =
	     mem_master_bvalid && master_xactor_f_wr_resp$FULL_N ;
  assign master_xactor_f_wr_resp$DEQ = master_xactor_f_wr_resp$EMPTY_N ;
  assign master_xactor_f_wr_resp$CLR = 1'b0 ;

  // remaining internal signals
  assign data__h3523 =
	     f_wr_data_control$D_OUT[13] ?
	       f_single_write_data$D_OUT :
	       f_line_write_data$D_OUT ;
  assign fabric_addr__h2207 = { f_line_reqs$D_OUT[63:6], 6'd0 } ;
  assign master_xactor_f_rd_data_i_notEmpty_AND_IF_rg_r_ETC___d7 =
	     master_xactor_f_rd_data$EMPTY_N &&
	     (rg_rd_client_id ?
		f_single_read_data$FULL_N :
		f_line_read_data$FULL_N) ;
  assign master_xactor_f_wr_data_i_notFull__04_AND_IF_f_ETC___d110 =
	     master_xactor_f_wr_data$FULL_N &&
	     (f_wr_data_control$D_OUT[13] ?
		f_single_write_data$EMPTY_N :
		f_line_write_data$EMPTY_N) ;
  assign rg_rd_beat_EQ_f_rd_rsp_control_first__0_BITS_7_ETC___d16 =
	     rg_rd_beat == f_rd_rsp_control$D_OUT[7:0] - 8'd1 ;
  assign rg_wr_beat_12_EQ_f_wr_data_control_first__05_B_ETC___d118 =
	     rg_wr_beat == f_wr_data_control$D_OUT[7:0] - 8'd1 ;
  assign strb__h3525 = strb__h3518 << f_wr_data_control$D_OUT[10:8] ;
  assign x__h2716 = { 1'b0, f_single_reqs$D_OUT[1:0] } ;
  assign x__h3481 = rg_wr_beat + 8'd1 ;
  always@(f_wr_data_control$D_OUT)
  begin
    case (f_wr_data_control$D_OUT[12:11])
      2'b0: strb__h3518 = 8'h01;
      2'b01: strb__h3518 = 8'h03;
      2'b10: strb__h3518 = 8'h0F;
      2'd3: strb__h3518 = 8'hFF;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_ddr4_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_rd_rsps_pending <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_wr_beat <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_wr_rsps_pending <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_write_error <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_ddr4_ready$EN)
	  rg_ddr4_ready <= `BSV_ASSIGNMENT_DELAY rg_ddr4_ready$D_IN;
	if (rg_rd_rsps_pending$EN)
	  rg_rd_rsps_pending <= `BSV_ASSIGNMENT_DELAY rg_rd_rsps_pending$D_IN;
	if (rg_wr_beat$EN)
	  rg_wr_beat <= `BSV_ASSIGNMENT_DELAY rg_wr_beat$D_IN;
	if (rg_wr_rsps_pending$EN)
	  rg_wr_rsps_pending <= `BSV_ASSIGNMENT_DELAY rg_wr_rsps_pending$D_IN;
	if (rg_write_error$EN)
	  rg_write_error <= `BSV_ASSIGNMENT_DELAY rg_write_error$D_IN;
      end
    if (rg_rd_beat$EN) rg_rd_beat <= `BSV_ASSIGNMENT_DELAY rg_rd_beat$D_IN;
    if (rg_rd_client_id$EN)
      rg_rd_client_id <= `BSV_ASSIGNMENT_DELAY rg_rd_client_id$D_IN;
    if (rg_rd_data_lower32$EN)
      rg_rd_data_lower32 <= `BSV_ASSIGNMENT_DELAY rg_rd_data_lower32$D_IN;
    if (rg_rd_data_lower32_ok$EN)
      rg_rd_data_lower32_ok <= `BSV_ASSIGNMENT_DELAY
	  rg_rd_data_lower32_ok$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_ddr4_ready = 1'h0;
    rg_rd_beat = 8'hAA;
    rg_rd_client_id = 1'h0;
    rg_rd_data_lower32 = 32'hAAAAAAAA;
    rg_rd_data_lower32_ok = 1'h0;
    rg_rd_rsps_pending = 4'hA;
    rg_wr_beat = 8'hAA;
    rg_wr_rsps_pending = 4'hA;
    rg_write_error = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_line_read_req && verbosity != 3'd0)
	begin
	  v__h2456 = $stime;
	  #0;
	end
    v__h2450 = v__h2456 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_line_read_req && verbosity != 3'd0)
	$display("%0d: %m.rl_line_read_req: ", v__h2450);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_line_read_req && verbosity != 3'd0)
	$write("    AXI4_Rd_Addr{araddr %0h arlen %0d (burst len %0d) ",
	       fabric_addr__h2207,
	       8'd7,
	       $signed(32'd8));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_line_read_req && verbosity != 3'd0) $write("sz8");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_line_read_req && verbosity != 3'd0)
	$write(" incr}", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_data && verbosity != 3'd0)
	begin
	  v__h3805 = $stime;
	  #0;
	end
    v__h3799 = v__h3805 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_data && verbosity != 3'd0)
	$display("%0d: %m.rl_write_data: beat %0d/%0d",
		 v__h3799,
		 rg_wr_beat,
		 f_wr_data_control$D_OUT[7:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_data && verbosity != 3'd0)
	$display("    AXI4_Wr_Data{%0h strb %0h last %0d}",
		 data__h3523,
		 strb__h3525,
		 rg_wr_beat_12_EQ_f_wr_data_control_first__05_B_ETC___d118);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_single_read_req && verbosity != 3'd0)
	begin
	  v__h2611 = $stime;
	  #0;
	end
    v__h2605 = v__h2611 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_single_read_req && verbosity != 3'd0)
	$write("%0d: %m.rl_single_read_req:\n    AXI4_Rd_Addr{araddr %0h arlen 0 (burst length 1) ",
	       v__h2605,
	       f_single_reqs$D_OUT[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_single_read_req && verbosity != 3'd0 &&
	  f_single_reqs$D_OUT[1:0] == 2'd0)
	$write("sz1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_single_read_req && verbosity != 3'd0 &&
	  f_single_reqs$D_OUT[1:0] == 2'd1)
	$write("sz2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_single_read_req && verbosity != 3'd0 &&
	  f_single_reqs$D_OUT[1:0] == 2'd2)
	$write("sz4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_single_read_req && verbosity != 3'd0 &&
	  f_single_reqs$D_OUT[1:0] != 2'd0 &&
	  f_single_reqs$D_OUT[1:0] != 2'd1 &&
	  f_single_reqs$D_OUT[1:0] != 2'd2)
	$write("sz8");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_single_read_req && verbosity != 3'd0)
	$write("}", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending == 4'd0)
	begin
	  v__h2978 = $stime;
	  #0;
	end
    v__h2972 = v__h2978 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending == 4'd0)
	$display("%0d: %m.rl_write_rsp: ERROR not expecting any write-response:",
		 v__h2972);
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending == 4'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending == 4'd0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending == 4'd0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending == 4'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending == 4'd0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending == 4'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending == 4'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending == 4'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 3'd0)
	begin
	  v__h3077 = $stime;
	  #0;
	end
    v__h3071 = v__h3077 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 3'd0)
	$write("%0d: %m.rl_write_rsp: pending=%0d, ",
	       v__h3071,
	       rg_wr_rsps_pending);
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 3'd0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 3'd0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 3'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 3'd0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 3'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 3'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 3'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 3'd0)
	begin
	  v__h3128 = $stime;
	  #0;
	end
    v__h3122 = v__h3128 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 3'd0)
	$display("%0d: %m.rl_write_rsp: FABRIC RESPONSE ERROR", v__h3122);
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 3'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 3'd0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 3'd0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 3'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 3'd0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 3'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 3'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N && rg_wr_rsps_pending != 4'd0 &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 3'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_line_write_req && verbosity != 3'd0)
	begin
	  v__h4085 = $stime;
	  #0;
	end
    v__h4079 = v__h4085 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_line_write_req && verbosity != 3'd0)
	$write("%0d: %m.rl_line_write_req: AXI4_Wr_Addr{awaddr %0h awlen %0d burst-length %0d ",
	       v__h4079,
	       fabric_addr__h2207,
	       8'd7,
	       $signed(32'd8));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_line_write_req && verbosity != 3'd0) $write("sz8");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_line_write_req && verbosity != 3'd0)
	$write(" incr}", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_single_write_req && verbosity != 3'd0)
	begin
	  v__h4318 = $stime;
	  #0;
	end
    v__h4312 = v__h4318 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_single_write_req && verbosity != 3'd0)
	$write("%0d: %m.rl_single_write_req: AXI4_Wr_Addr{awaddr %0h awlen %0d burst-length %0d ",
	       v__h4312,
	       f_single_reqs$D_OUT[65:2],
	       8'd0,
	       8'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_single_write_req && verbosity != 3'd0 &&
	  f_single_reqs$D_OUT[1:0] == 2'd0)
	$write("sz1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_single_write_req && verbosity != 3'd0 &&
	  f_single_reqs$D_OUT[1:0] == 2'd1)
	$write("sz2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_single_write_req && verbosity != 3'd0 &&
	  f_single_reqs$D_OUT[1:0] == 2'd2)
	$write("sz4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_single_write_req && verbosity != 3'd0 &&
	  f_single_reqs$D_OUT[1:0] != 2'd0 &&
	  f_single_reqs$D_OUT[1:0] != 2'd1 &&
	  f_single_reqs$D_OUT[1:0] != 2'd2)
	$write("sz8");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_single_write_req && verbosity != 3'd0)
	$write(" incr}", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_ddr4_ready)
	begin
	  v__h4944 = $stime;
	  #0;
	end
    v__h4938 = v__h4944 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_ddr4_ready)
	$display("%0d: %m: Enabling memory accesses", v__h4938);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_data && verbosity != 3'd0)
	begin
	  v__h1936 = $stime;
	  #0;
	end
    v__h1930 = v__h1936 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_data && verbosity != 3'd0)
	$display("%0d: %m.rl_read_data: ", v__h1930);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_data && verbosity != 3'd0 && rg_rd_client_id)
	$write("     single");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_data && verbosity != 3'd0 && !rg_rd_client_id)
	$write("    line (beat %0d)", rg_rd_beat);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_data && verbosity != 3'd0)
	$write(" ok %0d data %0h",
	       master_xactor_f_rd_data$D_OUT[2:1] == 2'b0,
	       master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_data && verbosity != 3'd0) $display("");
  end
  // synopsys translate_on
endmodule  // mkMMU_Cache_AXI4_Adapter

