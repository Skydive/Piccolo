//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_hart0_server_reset_request_put  O     1 reg
// hart0_server_reset_response_get  O     1 reg
// RDY_hart0_server_reset_response_get  O     1 reg
// imem_master_awvalid            O     1 reg
// imem_master_awid               O     4 reg
// imem_master_awaddr             O    64 reg
// imem_master_awlen              O     8 reg
// imem_master_awsize             O     3 reg
// imem_master_awburst            O     2 reg
// imem_master_awlock             O     1 reg
// imem_master_awcache            O     4 reg
// imem_master_awprot             O     3 reg
// imem_master_awqos              O     4 reg
// imem_master_awregion           O     4 reg
// imem_master_wvalid             O     1 reg
// imem_master_wdata              O    64 reg
// imem_master_wstrb              O     8 reg
// imem_master_wlast              O     1 reg
// imem_master_bready             O     1 reg
// imem_master_arvalid            O     1 reg
// imem_master_arid               O     4 reg
// imem_master_araddr             O    64 reg
// imem_master_arlen              O     8 reg
// imem_master_arsize             O     3 reg
// imem_master_arburst            O     2 reg
// imem_master_arlock             O     1 reg
// imem_master_arcache            O     4 reg
// imem_master_arprot             O     3 reg
// imem_master_arqos              O     4 reg
// imem_master_arregion           O     4 reg
// imem_master_rready             O     1 reg
// dmem_master_awvalid            O     1 reg
// dmem_master_awid               O     4 reg
// dmem_master_awaddr             O    64 reg
// dmem_master_awlen              O     8 reg
// dmem_master_awsize             O     3 reg
// dmem_master_awburst            O     2 reg
// dmem_master_awlock             O     1 reg
// dmem_master_awcache            O     4 reg
// dmem_master_awprot             O     3 reg
// dmem_master_awqos              O     4 reg
// dmem_master_awregion           O     4 reg
// dmem_master_wvalid             O     1 reg
// dmem_master_wdata              O    64 reg
// dmem_master_wstrb              O     8 reg
// dmem_master_wlast              O     1 reg
// dmem_master_bready             O     1 reg
// dmem_master_arvalid            O     1 reg
// dmem_master_arid               O     4 reg
// dmem_master_araddr             O    64 reg
// dmem_master_arlen              O     8 reg
// dmem_master_arsize             O     3 reg
// dmem_master_arburst            O     2 reg
// dmem_master_arlock             O     1 reg
// dmem_master_arcache            O     4 reg
// dmem_master_arprot             O     3 reg
// dmem_master_arqos              O     4 reg
// dmem_master_arregion           O     4 reg
// dmem_master_rready             O     1 reg
// RDY_set_verbosity              O     1 const
// RDY_hart0_server_run_halt_request_put  O     1 reg
// hart0_server_run_halt_response_get  O     1 reg
// RDY_hart0_server_run_halt_response_get  O     1 reg
// RDY_hart0_put_other_req_put    O     1 const
// RDY_hart0_gpr_mem_server_request_put  O     1 reg
// hart0_gpr_mem_server_response_get  O    65 reg
// RDY_hart0_gpr_mem_server_response_get  O     1 reg
// RDY_hart0_csr_mem_server_request_put  O     1 reg
// hart0_csr_mem_server_response_get  O    65 reg
// RDY_hart0_csr_mem_server_response_get  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// hart0_server_reset_request_put  I     1 reg
// imem_master_awready            I     1
// imem_master_wready             I     1
// imem_master_bvalid             I     1
// imem_master_bid                I     4 reg
// imem_master_bresp              I     2 reg
// imem_master_arready            I     1
// imem_master_rvalid             I     1
// imem_master_rid                I     4 reg
// imem_master_rdata              I    64 reg
// imem_master_rresp              I     2 reg
// imem_master_rlast              I     1 reg
// dmem_master_awready            I     1
// dmem_master_wready             I     1
// dmem_master_bvalid             I     1
// dmem_master_bid                I     4 reg
// dmem_master_bresp              I     2 reg
// dmem_master_arready            I     1
// dmem_master_rvalid             I     1
// dmem_master_rid                I     4 reg
// dmem_master_rdata              I    64 reg
// dmem_master_rresp              I     2 reg
// dmem_master_rlast              I     1 reg
// m_external_interrupt_req_set_not_clear  I     1 reg
// s_external_interrupt_req_set_not_clear  I     1 reg
// software_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// nmi_req_set_not_clear          I     1
// set_verbosity_verbosity        I     4
// set_verbosity_logdelay         I    64 reg
// hart0_server_run_halt_request_put  I     1 reg
// hart0_put_other_req_put        I     4
// hart0_gpr_mem_server_request_put  I    70 reg
// hart0_csr_mem_server_request_put  I    77 reg
// EN_hart0_server_reset_request_put  I     1
// EN_set_verbosity               I     1
// EN_hart0_server_run_halt_request_put  I     1
// EN_hart0_put_other_req_put     I     1
// EN_hart0_gpr_mem_server_request_put  I     1
// EN_hart0_csr_mem_server_request_put  I     1
// EN_hart0_server_reset_response_get  I     1
// EN_hart0_server_run_halt_response_get  I     1
// EN_hart0_gpr_mem_server_response_get  I     1
// EN_hart0_csr_mem_server_response_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCPU(CLK,
	     RST_N,

	     hart0_server_reset_request_put,
	     EN_hart0_server_reset_request_put,
	     RDY_hart0_server_reset_request_put,

	     EN_hart0_server_reset_response_get,
	     hart0_server_reset_response_get,
	     RDY_hart0_server_reset_response_get,

	     imem_master_awvalid,

	     imem_master_awid,

	     imem_master_awaddr,

	     imem_master_awlen,

	     imem_master_awsize,

	     imem_master_awburst,

	     imem_master_awlock,

	     imem_master_awcache,

	     imem_master_awprot,

	     imem_master_awqos,

	     imem_master_awregion,

	     imem_master_awready,

	     imem_master_wvalid,

	     imem_master_wdata,

	     imem_master_wstrb,

	     imem_master_wlast,

	     imem_master_wready,

	     imem_master_bvalid,
	     imem_master_bid,
	     imem_master_bresp,

	     imem_master_bready,

	     imem_master_arvalid,

	     imem_master_arid,

	     imem_master_araddr,

	     imem_master_arlen,

	     imem_master_arsize,

	     imem_master_arburst,

	     imem_master_arlock,

	     imem_master_arcache,

	     imem_master_arprot,

	     imem_master_arqos,

	     imem_master_arregion,

	     imem_master_arready,

	     imem_master_rvalid,
	     imem_master_rid,
	     imem_master_rdata,
	     imem_master_rresp,
	     imem_master_rlast,

	     imem_master_rready,

	     dmem_master_awvalid,

	     dmem_master_awid,

	     dmem_master_awaddr,

	     dmem_master_awlen,

	     dmem_master_awsize,

	     dmem_master_awburst,

	     dmem_master_awlock,

	     dmem_master_awcache,

	     dmem_master_awprot,

	     dmem_master_awqos,

	     dmem_master_awregion,

	     dmem_master_awready,

	     dmem_master_wvalid,

	     dmem_master_wdata,

	     dmem_master_wstrb,

	     dmem_master_wlast,

	     dmem_master_wready,

	     dmem_master_bvalid,
	     dmem_master_bid,
	     dmem_master_bresp,

	     dmem_master_bready,

	     dmem_master_arvalid,

	     dmem_master_arid,

	     dmem_master_araddr,

	     dmem_master_arlen,

	     dmem_master_arsize,

	     dmem_master_arburst,

	     dmem_master_arlock,

	     dmem_master_arcache,

	     dmem_master_arprot,

	     dmem_master_arqos,

	     dmem_master_arregion,

	     dmem_master_arready,

	     dmem_master_rvalid,
	     dmem_master_rid,
	     dmem_master_rdata,
	     dmem_master_rresp,
	     dmem_master_rlast,

	     dmem_master_rready,

	     m_external_interrupt_req_set_not_clear,

	     s_external_interrupt_req_set_not_clear,

	     software_interrupt_req_set_not_clear,

	     timer_interrupt_req_set_not_clear,

	     nmi_req_set_not_clear,

	     set_verbosity_verbosity,
	     set_verbosity_logdelay,
	     EN_set_verbosity,
	     RDY_set_verbosity,

	     hart0_server_run_halt_request_put,
	     EN_hart0_server_run_halt_request_put,
	     RDY_hart0_server_run_halt_request_put,

	     EN_hart0_server_run_halt_response_get,
	     hart0_server_run_halt_response_get,
	     RDY_hart0_server_run_halt_response_get,

	     hart0_put_other_req_put,
	     EN_hart0_put_other_req_put,
	     RDY_hart0_put_other_req_put,

	     hart0_gpr_mem_server_request_put,
	     EN_hart0_gpr_mem_server_request_put,
	     RDY_hart0_gpr_mem_server_request_put,

	     EN_hart0_gpr_mem_server_response_get,
	     hart0_gpr_mem_server_response_get,
	     RDY_hart0_gpr_mem_server_response_get,

	     hart0_csr_mem_server_request_put,
	     EN_hart0_csr_mem_server_request_put,
	     RDY_hart0_csr_mem_server_request_put,

	     EN_hart0_csr_mem_server_response_get,
	     hart0_csr_mem_server_response_get,
	     RDY_hart0_csr_mem_server_response_get);
  input  CLK;
  input  RST_N;

  // action method hart0_server_reset_request_put
  input  hart0_server_reset_request_put;
  input  EN_hart0_server_reset_request_put;
  output RDY_hart0_server_reset_request_put;

  // actionvalue method hart0_server_reset_response_get
  input  EN_hart0_server_reset_response_get;
  output hart0_server_reset_response_get;
  output RDY_hart0_server_reset_response_get;

  // value method imem_master_m_awvalid
  output imem_master_awvalid;

  // value method imem_master_m_awid
  output [3 : 0] imem_master_awid;

  // value method imem_master_m_awaddr
  output [63 : 0] imem_master_awaddr;

  // value method imem_master_m_awlen
  output [7 : 0] imem_master_awlen;

  // value method imem_master_m_awsize
  output [2 : 0] imem_master_awsize;

  // value method imem_master_m_awburst
  output [1 : 0] imem_master_awburst;

  // value method imem_master_m_awlock
  output imem_master_awlock;

  // value method imem_master_m_awcache
  output [3 : 0] imem_master_awcache;

  // value method imem_master_m_awprot
  output [2 : 0] imem_master_awprot;

  // value method imem_master_m_awqos
  output [3 : 0] imem_master_awqos;

  // value method imem_master_m_awregion
  output [3 : 0] imem_master_awregion;

  // value method imem_master_m_awuser

  // action method imem_master_m_awready
  input  imem_master_awready;

  // value method imem_master_m_wvalid
  output imem_master_wvalid;

  // value method imem_master_m_wdata
  output [63 : 0] imem_master_wdata;

  // value method imem_master_m_wstrb
  output [7 : 0] imem_master_wstrb;

  // value method imem_master_m_wlast
  output imem_master_wlast;

  // value method imem_master_m_wuser

  // action method imem_master_m_wready
  input  imem_master_wready;

  // action method imem_master_m_bvalid
  input  imem_master_bvalid;
  input  [3 : 0] imem_master_bid;
  input  [1 : 0] imem_master_bresp;

  // value method imem_master_m_bready
  output imem_master_bready;

  // value method imem_master_m_arvalid
  output imem_master_arvalid;

  // value method imem_master_m_arid
  output [3 : 0] imem_master_arid;

  // value method imem_master_m_araddr
  output [63 : 0] imem_master_araddr;

  // value method imem_master_m_arlen
  output [7 : 0] imem_master_arlen;

  // value method imem_master_m_arsize
  output [2 : 0] imem_master_arsize;

  // value method imem_master_m_arburst
  output [1 : 0] imem_master_arburst;

  // value method imem_master_m_arlock
  output imem_master_arlock;

  // value method imem_master_m_arcache
  output [3 : 0] imem_master_arcache;

  // value method imem_master_m_arprot
  output [2 : 0] imem_master_arprot;

  // value method imem_master_m_arqos
  output [3 : 0] imem_master_arqos;

  // value method imem_master_m_arregion
  output [3 : 0] imem_master_arregion;

  // value method imem_master_m_aruser

  // action method imem_master_m_arready
  input  imem_master_arready;

  // action method imem_master_m_rvalid
  input  imem_master_rvalid;
  input  [3 : 0] imem_master_rid;
  input  [63 : 0] imem_master_rdata;
  input  [1 : 0] imem_master_rresp;
  input  imem_master_rlast;

  // value method imem_master_m_rready
  output imem_master_rready;

  // value method dmem_master_m_awvalid
  output dmem_master_awvalid;

  // value method dmem_master_m_awid
  output [3 : 0] dmem_master_awid;

  // value method dmem_master_m_awaddr
  output [63 : 0] dmem_master_awaddr;

  // value method dmem_master_m_awlen
  output [7 : 0] dmem_master_awlen;

  // value method dmem_master_m_awsize
  output [2 : 0] dmem_master_awsize;

  // value method dmem_master_m_awburst
  output [1 : 0] dmem_master_awburst;

  // value method dmem_master_m_awlock
  output dmem_master_awlock;

  // value method dmem_master_m_awcache
  output [3 : 0] dmem_master_awcache;

  // value method dmem_master_m_awprot
  output [2 : 0] dmem_master_awprot;

  // value method dmem_master_m_awqos
  output [3 : 0] dmem_master_awqos;

  // value method dmem_master_m_awregion
  output [3 : 0] dmem_master_awregion;

  // value method dmem_master_m_awuser

  // action method dmem_master_m_awready
  input  dmem_master_awready;

  // value method dmem_master_m_wvalid
  output dmem_master_wvalid;

  // value method dmem_master_m_wdata
  output [63 : 0] dmem_master_wdata;

  // value method dmem_master_m_wstrb
  output [7 : 0] dmem_master_wstrb;

  // value method dmem_master_m_wlast
  output dmem_master_wlast;

  // value method dmem_master_m_wuser

  // action method dmem_master_m_wready
  input  dmem_master_wready;

  // action method dmem_master_m_bvalid
  input  dmem_master_bvalid;
  input  [3 : 0] dmem_master_bid;
  input  [1 : 0] dmem_master_bresp;

  // value method dmem_master_m_bready
  output dmem_master_bready;

  // value method dmem_master_m_arvalid
  output dmem_master_arvalid;

  // value method dmem_master_m_arid
  output [3 : 0] dmem_master_arid;

  // value method dmem_master_m_araddr
  output [63 : 0] dmem_master_araddr;

  // value method dmem_master_m_arlen
  output [7 : 0] dmem_master_arlen;

  // value method dmem_master_m_arsize
  output [2 : 0] dmem_master_arsize;

  // value method dmem_master_m_arburst
  output [1 : 0] dmem_master_arburst;

  // value method dmem_master_m_arlock
  output dmem_master_arlock;

  // value method dmem_master_m_arcache
  output [3 : 0] dmem_master_arcache;

  // value method dmem_master_m_arprot
  output [2 : 0] dmem_master_arprot;

  // value method dmem_master_m_arqos
  output [3 : 0] dmem_master_arqos;

  // value method dmem_master_m_arregion
  output [3 : 0] dmem_master_arregion;

  // value method dmem_master_m_aruser

  // action method dmem_master_m_arready
  input  dmem_master_arready;

  // action method dmem_master_m_rvalid
  input  dmem_master_rvalid;
  input  [3 : 0] dmem_master_rid;
  input  [63 : 0] dmem_master_rdata;
  input  [1 : 0] dmem_master_rresp;
  input  dmem_master_rlast;

  // value method dmem_master_m_rready
  output dmem_master_rready;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;

  // action method s_external_interrupt_req
  input  s_external_interrupt_req_set_not_clear;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method hart0_server_run_halt_request_put
  input  hart0_server_run_halt_request_put;
  input  EN_hart0_server_run_halt_request_put;
  output RDY_hart0_server_run_halt_request_put;

  // actionvalue method hart0_server_run_halt_response_get
  input  EN_hart0_server_run_halt_response_get;
  output hart0_server_run_halt_response_get;
  output RDY_hart0_server_run_halt_response_get;

  // action method hart0_put_other_req_put
  input  [3 : 0] hart0_put_other_req_put;
  input  EN_hart0_put_other_req_put;
  output RDY_hart0_put_other_req_put;

  // action method hart0_gpr_mem_server_request_put
  input  [69 : 0] hart0_gpr_mem_server_request_put;
  input  EN_hart0_gpr_mem_server_request_put;
  output RDY_hart0_gpr_mem_server_request_put;

  // actionvalue method hart0_gpr_mem_server_response_get
  input  EN_hart0_gpr_mem_server_response_get;
  output [64 : 0] hart0_gpr_mem_server_response_get;
  output RDY_hart0_gpr_mem_server_response_get;

  // action method hart0_csr_mem_server_request_put
  input  [76 : 0] hart0_csr_mem_server_request_put;
  input  EN_hart0_csr_mem_server_request_put;
  output RDY_hart0_csr_mem_server_request_put;

  // actionvalue method hart0_csr_mem_server_response_get
  input  EN_hart0_csr_mem_server_response_get;
  output [64 : 0] hart0_csr_mem_server_response_get;
  output RDY_hart0_csr_mem_server_response_get;

  // signals for module outputs
  wire [64 : 0] hart0_csr_mem_server_response_get,
		hart0_gpr_mem_server_response_get;
  wire [63 : 0] dmem_master_araddr,
		dmem_master_awaddr,
		dmem_master_wdata,
		imem_master_araddr,
		imem_master_awaddr,
		imem_master_wdata;
  wire [7 : 0] dmem_master_arlen,
	       dmem_master_awlen,
	       dmem_master_wstrb,
	       imem_master_arlen,
	       imem_master_awlen,
	       imem_master_wstrb;
  wire [3 : 0] dmem_master_arcache,
	       dmem_master_arid,
	       dmem_master_arqos,
	       dmem_master_arregion,
	       dmem_master_awcache,
	       dmem_master_awid,
	       dmem_master_awqos,
	       dmem_master_awregion,
	       imem_master_arcache,
	       imem_master_arid,
	       imem_master_arqos,
	       imem_master_arregion,
	       imem_master_awcache,
	       imem_master_awid,
	       imem_master_awqos,
	       imem_master_awregion;
  wire [2 : 0] dmem_master_arprot,
	       dmem_master_arsize,
	       dmem_master_awprot,
	       dmem_master_awsize,
	       imem_master_arprot,
	       imem_master_arsize,
	       imem_master_awprot,
	       imem_master_awsize;
  wire [1 : 0] dmem_master_arburst,
	       dmem_master_awburst,
	       imem_master_arburst,
	       imem_master_awburst;
  wire RDY_hart0_csr_mem_server_request_put,
       RDY_hart0_csr_mem_server_response_get,
       RDY_hart0_gpr_mem_server_request_put,
       RDY_hart0_gpr_mem_server_response_get,
       RDY_hart0_put_other_req_put,
       RDY_hart0_server_reset_request_put,
       RDY_hart0_server_reset_response_get,
       RDY_hart0_server_run_halt_request_put,
       RDY_hart0_server_run_halt_response_get,
       RDY_set_verbosity,
       dmem_master_arlock,
       dmem_master_arvalid,
       dmem_master_awlock,
       dmem_master_awvalid,
       dmem_master_bready,
       dmem_master_rready,
       dmem_master_wlast,
       dmem_master_wvalid,
       hart0_server_reset_response_get,
       hart0_server_run_halt_response_get,
       imem_master_arlock,
       imem_master_arvalid,
       imem_master_awlock,
       imem_master_awvalid,
       imem_master_bready,
       imem_master_rready,
       imem_master_wlast,
       imem_master_wvalid;

  // register cfg_logdelay
  reg [63 : 0] cfg_logdelay;
  wire [63 : 0] cfg_logdelay$D_IN;
  wire cfg_logdelay$EN;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register imem_c_rg_cache_addr
  reg [63 : 0] imem_c_rg_cache_addr;
  wire [63 : 0] imem_c_rg_cache_addr$D_IN;
  wire imem_c_rg_cache_addr$EN;

  // register imem_c_rg_cache_b16
  reg [16 : 0] imem_c_rg_cache_b16;
  reg [16 : 0] imem_c_rg_cache_b16$D_IN;
  wire imem_c_rg_cache_b16$EN;

  // register imem_c_rg_f3
  reg [2 : 0] imem_c_rg_f3;
  wire [2 : 0] imem_c_rg_f3$D_IN;
  wire imem_c_rg_f3$EN;

  // register imem_c_rg_mstatus_MXR
  reg imem_c_rg_mstatus_MXR;
  wire imem_c_rg_mstatus_MXR$D_IN, imem_c_rg_mstatus_MXR$EN;

  // register imem_c_rg_pc
  reg [63 : 0] imem_c_rg_pc;
  reg [63 : 0] imem_c_rg_pc$D_IN;
  wire imem_c_rg_pc$EN;

  // register imem_c_rg_priv
  reg [1 : 0] imem_c_rg_priv;
  wire [1 : 0] imem_c_rg_priv$D_IN;
  wire imem_c_rg_priv$EN;

  // register imem_c_rg_satp
  reg [63 : 0] imem_c_rg_satp;
  wire [63 : 0] imem_c_rg_satp$D_IN;
  wire imem_c_rg_satp$EN;

  // register imem_c_rg_sstatus_SUM
  reg imem_c_rg_sstatus_SUM;
  wire imem_c_rg_sstatus_SUM$D_IN, imem_c_rg_sstatus_SUM$EN;

  // register imem_c_rg_tval
  reg [63 : 0] imem_c_rg_tval;
  reg [63 : 0] imem_c_rg_tval$D_IN;
  wire imem_c_rg_tval$EN;

  // register isInReset_isInReset
  reg isInReset_isInReset;
  wire isInReset_isInReset$D_IN, isInReset_isInReset$EN;

  // register rg_csr_pc
  reg [63 : 0] rg_csr_pc;
  wire [63 : 0] rg_csr_pc$D_IN;
  wire rg_csr_pc$EN;

  // register rg_csr_val1
  reg [63 : 0] rg_csr_val1;
  wire [63 : 0] rg_csr_val1$D_IN;
  wire rg_csr_val1$EN;

  // register rg_cur_priv
  reg [1 : 0] rg_cur_priv;
  reg [1 : 0] rg_cur_priv$D_IN;
  wire rg_cur_priv$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_next_pc
  reg [63 : 0] rg_next_pc;
  reg [63 : 0] rg_next_pc$D_IN;
  wire rg_next_pc$EN;

  // register rg_run_on_reset
  reg rg_run_on_reset;
  wire rg_run_on_reset$D_IN, rg_run_on_reset$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_start_CPI_cycles
  reg [63 : 0] rg_start_CPI_cycles;
  wire [63 : 0] rg_start_CPI_cycles$D_IN;
  wire rg_start_CPI_cycles$EN;

  // register rg_start_CPI_instrs
  reg [63 : 0] rg_start_CPI_instrs;
  wire [63 : 0] rg_start_CPI_instrs$D_IN;
  wire rg_start_CPI_instrs$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_step_count
  reg rg_step_count;
  wire rg_step_count$D_IN, rg_step_count$EN;

  // register rg_stop_req
  reg rg_stop_req;
  wire rg_stop_req$D_IN, rg_stop_req$EN;

  // register rg_trap_info
  reg [131 : 0] rg_trap_info;
  reg [131 : 0] rg_trap_info$D_IN;
  wire rg_trap_info$EN;

  // register rg_trap_instr
  reg [31 : 0] rg_trap_instr;
  wire [31 : 0] rg_trap_instr$D_IN;
  wire rg_trap_instr$EN;

  // register rg_trap_interrupt
  reg rg_trap_interrupt;
  wire rg_trap_interrupt$D_IN, rg_trap_interrupt$EN;

  // register stage1_rg_full
  reg stage1_rg_full;
  reg stage1_rg_full$D_IN;
  wire stage1_rg_full$EN;

  // register stage2_rg_full
  reg stage2_rg_full;
  reg stage2_rg_full$D_IN;
  wire stage2_rg_full$EN;

  // register stage2_rg_resetting
  reg stage2_rg_resetting;
  wire stage2_rg_resetting$D_IN, stage2_rg_resetting$EN;

  // register stage2_rg_stage2
  reg [297 : 0] stage2_rg_stage2;
  wire [297 : 0] stage2_rg_stage2$D_IN;
  wire stage2_rg_stage2$EN;

  // register stage3_rg_full
  reg stage3_rg_full;
  reg stage3_rg_full$D_IN;
  wire stage3_rg_full$EN;

  // register stage3_rg_stage3
  reg [167 : 0] stage3_rg_stage3;
  wire [167 : 0] stage3_rg_stage3$D_IN;
  wire stage3_rg_stage3$EN;

  // ports of submodule csr_regfile
  reg [63 : 0] csr_regfile$mav_csr_write_word;
  reg [2 : 0] csr_regfile$write_dcsr_cause_priv_cause;
  reg [1 : 0] csr_regfile$csr_ret_actions_from_priv;
  wire [193 : 0] csr_regfile$csr_trap_actions;
  wire [129 : 0] csr_regfile$csr_ret_actions;
  wire [128 : 0] csr_regfile$mav_csr_write;
  wire [64 : 0] csr_regfile$read_csr, csr_regfile$read_csr_port2;
  wire [63 : 0] csr_regfile$csr_trap_actions_pc,
		csr_regfile$csr_trap_actions_xtval,
		csr_regfile$read_csr_mcycle,
		csr_regfile$read_csr_minstret,
		csr_regfile$read_dpc,
		csr_regfile$read_mstatus,
		csr_regfile$read_satp,
		csr_regfile$read_sstatus,
		csr_regfile$write_dpc_pc;
  wire [27 : 0] csr_regfile$read_misa;
  wire [11 : 0] csr_regfile$access_permitted_1_csr_addr,
		csr_regfile$access_permitted_2_csr_addr,
		csr_regfile$csr_counter_read_fault_csr_addr,
		csr_regfile$mav_csr_write_csr_addr,
		csr_regfile$mav_read_csr_csr_addr,
		csr_regfile$read_csr_csr_addr,
		csr_regfile$read_csr_port2_csr_addr;
  wire [4 : 0] csr_regfile$interrupt_pending;
  wire [3 : 0] csr_regfile$csr_trap_actions_exc_code;
  wire [1 : 0] csr_regfile$access_permitted_1_priv,
	       csr_regfile$access_permitted_2_priv,
	       csr_regfile$csr_counter_read_fault_priv,
	       csr_regfile$csr_trap_actions_from_priv,
	       csr_regfile$dcsr_break_enters_debug_cur_priv,
	       csr_regfile$interrupt_pending_cur_priv,
	       csr_regfile$write_dcsr_cause_priv_priv;
  wire csr_regfile$EN_csr_minstret_incr,
       csr_regfile$EN_csr_ret_actions,
       csr_regfile$EN_csr_trap_actions,
       csr_regfile$EN_debug,
       csr_regfile$EN_mav_csr_write,
       csr_regfile$EN_mav_read_csr,
       csr_regfile$EN_server_reset_request_put,
       csr_regfile$EN_server_reset_response_get,
       csr_regfile$EN_write_dcsr_cause_priv,
       csr_regfile$EN_write_dpc,
       csr_regfile$RDY_server_reset_request_put,
       csr_regfile$RDY_server_reset_response_get,
       csr_regfile$access_permitted_1,
       csr_regfile$access_permitted_1_read_not_write,
       csr_regfile$access_permitted_2,
       csr_regfile$access_permitted_2_read_not_write,
       csr_regfile$csr_trap_actions_interrupt,
       csr_regfile$csr_trap_actions_nmi,
       csr_regfile$dcsr_break_enters_debug,
       csr_regfile$m_external_interrupt_req_set_not_clear,
       csr_regfile$nmi_pending,
       csr_regfile$nmi_req_set_not_clear,
       csr_regfile$read_dcsr_step,
       csr_regfile$s_external_interrupt_req_set_not_clear,
       csr_regfile$software_interrupt_req_set_not_clear,
       csr_regfile$timer_interrupt_req_set_not_clear,
       csr_regfile$wfi_resume;

  // ports of submodule f_csr_reqs
  wire [76 : 0] f_csr_reqs$D_IN, f_csr_reqs$D_OUT;
  wire f_csr_reqs$CLR,
       f_csr_reqs$DEQ,
       f_csr_reqs$EMPTY_N,
       f_csr_reqs$ENQ,
       f_csr_reqs$FULL_N;

  // ports of submodule f_csr_rsps
  reg [64 : 0] f_csr_rsps$D_IN;
  wire [64 : 0] f_csr_rsps$D_OUT;
  wire f_csr_rsps$CLR,
       f_csr_rsps$DEQ,
       f_csr_rsps$EMPTY_N,
       f_csr_rsps$ENQ,
       f_csr_rsps$FULL_N;

  // ports of submodule f_gpr_reqs
  wire [69 : 0] f_gpr_reqs$D_IN, f_gpr_reqs$D_OUT;
  wire f_gpr_reqs$CLR,
       f_gpr_reqs$DEQ,
       f_gpr_reqs$EMPTY_N,
       f_gpr_reqs$ENQ,
       f_gpr_reqs$FULL_N;

  // ports of submodule f_gpr_rsps
  reg [64 : 0] f_gpr_rsps$D_IN;
  wire [64 : 0] f_gpr_rsps$D_OUT;
  wire f_gpr_rsps$CLR,
       f_gpr_rsps$DEQ,
       f_gpr_rsps$EMPTY_N,
       f_gpr_rsps$ENQ,
       f_gpr_rsps$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_run_halt_reqs
  wire f_run_halt_reqs$CLR,
       f_run_halt_reqs$DEQ,
       f_run_halt_reqs$D_IN,
       f_run_halt_reqs$D_OUT,
       f_run_halt_reqs$EMPTY_N,
       f_run_halt_reqs$ENQ,
       f_run_halt_reqs$FULL_N;

  // ports of submodule f_run_halt_rsps
  wire f_run_halt_rsps$CLR,
       f_run_halt_rsps$DEQ,
       f_run_halt_rsps$D_IN,
       f_run_halt_rsps$D_OUT,
       f_run_halt_rsps$EMPTY_N,
       f_run_halt_rsps$ENQ,
       f_run_halt_rsps$FULL_N;

  // ports of submodule gpr_regfile
  reg [63 : 0] gpr_regfile$write_rd_rd_val;
  reg [4 : 0] gpr_regfile$write_rd_rd;
  wire [63 : 0] gpr_regfile$read_rs1,
		gpr_regfile$read_rs1_port2,
		gpr_regfile$read_rs2;
  wire [4 : 0] gpr_regfile$read_rs1_port2_rs1,
	       gpr_regfile$read_rs1_rs1,
	       gpr_regfile$read_rs2_rs2;
  wire gpr_regfile$EN_server_reset_request_put,
       gpr_regfile$EN_server_reset_response_get,
       gpr_regfile$EN_write_rd,
       gpr_regfile$RDY_server_reset_request_put,
       gpr_regfile$RDY_server_reset_response_get;

  // ports of submodule near_mem
  reg [63 : 0] near_mem$imem_req_addr;
  reg [1 : 0] near_mem$dmem_req_op;
  reg near_mem$imem_req_mstatus_MXR, near_mem$imem_req_sstatus_SUM;
  wire [63 : 0] near_mem$dmem_req_addr,
		near_mem$dmem_req_satp,
		near_mem$dmem_req_store_value,
		near_mem$dmem_word64,
		near_mem$imem_master_araddr,
		near_mem$imem_master_awaddr,
		near_mem$imem_master_rdata,
		near_mem$imem_master_wdata,
		near_mem$imem_pc,
		near_mem$imem_req_satp,
		near_mem$mem_master_araddr,
		near_mem$mem_master_awaddr,
		near_mem$mem_master_rdata,
		near_mem$mem_master_wdata;
  wire [31 : 0] near_mem$imem_instr;
  wire [7 : 0] near_mem$imem_master_arlen,
	       near_mem$imem_master_awlen,
	       near_mem$imem_master_wstrb,
	       near_mem$mem_master_arlen,
	       near_mem$mem_master_awlen,
	       near_mem$mem_master_wstrb,
	       near_mem$server_fence_request_put;
  wire [6 : 0] near_mem$dmem_req_amo_funct7;
  wire [3 : 0] near_mem$dmem_exc_code,
	       near_mem$imem_exc_code,
	       near_mem$imem_master_arcache,
	       near_mem$imem_master_arid,
	       near_mem$imem_master_arqos,
	       near_mem$imem_master_arregion,
	       near_mem$imem_master_awcache,
	       near_mem$imem_master_awid,
	       near_mem$imem_master_awqos,
	       near_mem$imem_master_awregion,
	       near_mem$imem_master_bid,
	       near_mem$imem_master_rid,
	       near_mem$mem_master_arcache,
	       near_mem$mem_master_arid,
	       near_mem$mem_master_arqos,
	       near_mem$mem_master_arregion,
	       near_mem$mem_master_awcache,
	       near_mem$mem_master_awid,
	       near_mem$mem_master_awqos,
	       near_mem$mem_master_awregion,
	       near_mem$mem_master_bid,
	       near_mem$mem_master_rid;
  wire [2 : 0] near_mem$dmem_req_f3,
	       near_mem$imem_master_arprot,
	       near_mem$imem_master_arsize,
	       near_mem$imem_master_awprot,
	       near_mem$imem_master_awsize,
	       near_mem$imem_req_f3,
	       near_mem$mem_master_arprot,
	       near_mem$mem_master_arsize,
	       near_mem$mem_master_awprot,
	       near_mem$mem_master_awsize;
  wire [1 : 0] near_mem$dmem_req_priv,
	       near_mem$imem_master_arburst,
	       near_mem$imem_master_awburst,
	       near_mem$imem_master_bresp,
	       near_mem$imem_master_rresp,
	       near_mem$imem_req_priv,
	       near_mem$mem_master_arburst,
	       near_mem$mem_master_awburst,
	       near_mem$mem_master_bresp,
	       near_mem$mem_master_rresp;
  wire near_mem$EN_dmem_req,
       near_mem$EN_imem_req,
       near_mem$EN_ma_ddr4_ready,
       near_mem$EN_server_fence_i_request_put,
       near_mem$EN_server_fence_i_response_get,
       near_mem$EN_server_fence_request_put,
       near_mem$EN_server_fence_response_get,
       near_mem$EN_server_reset_request_put,
       near_mem$EN_server_reset_response_get,
       near_mem$EN_sfence_vma_server_request_put,
       near_mem$EN_sfence_vma_server_response_get,
       near_mem$RDY_server_fence_i_request_put,
       near_mem$RDY_server_fence_i_response_get,
       near_mem$RDY_server_fence_request_put,
       near_mem$RDY_server_fence_response_get,
       near_mem$RDY_server_reset_request_put,
       near_mem$RDY_server_reset_response_get,
       near_mem$dmem_exc,
       near_mem$dmem_req_mstatus_MXR,
       near_mem$dmem_req_sstatus_SUM,
       near_mem$dmem_valid,
       near_mem$imem_exc,
       near_mem$imem_is_i32_not_i16,
       near_mem$imem_master_arlock,
       near_mem$imem_master_arready,
       near_mem$imem_master_arvalid,
       near_mem$imem_master_awlock,
       near_mem$imem_master_awready,
       near_mem$imem_master_awvalid,
       near_mem$imem_master_bready,
       near_mem$imem_master_bvalid,
       near_mem$imem_master_rlast,
       near_mem$imem_master_rready,
       near_mem$imem_master_rvalid,
       near_mem$imem_master_wlast,
       near_mem$imem_master_wready,
       near_mem$imem_master_wvalid,
       near_mem$imem_valid,
       near_mem$mem_master_arlock,
       near_mem$mem_master_arready,
       near_mem$mem_master_arvalid,
       near_mem$mem_master_awlock,
       near_mem$mem_master_awready,
       near_mem$mem_master_awvalid,
       near_mem$mem_master_bready,
       near_mem$mem_master_bvalid,
       near_mem$mem_master_rlast,
       near_mem$mem_master_rready,
       near_mem$mem_master_rvalid,
       near_mem$mem_master_wlast,
       near_mem$mem_master_wready,
       near_mem$mem_master_wvalid;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr,
		soc_map$m_pc_reset_value;

  // ports of submodule stage1_f_reset_reqs
  wire stage1_f_reset_reqs$CLR,
       stage1_f_reset_reqs$DEQ,
       stage1_f_reset_reqs$EMPTY_N,
       stage1_f_reset_reqs$ENQ,
       stage1_f_reset_reqs$FULL_N;

  // ports of submodule stage1_f_reset_rsps
  wire stage1_f_reset_rsps$CLR,
       stage1_f_reset_rsps$DEQ,
       stage1_f_reset_rsps$EMPTY_N,
       stage1_f_reset_rsps$ENQ,
       stage1_f_reset_rsps$FULL_N;

  // ports of submodule stage2_f_reset_reqs
  wire stage2_f_reset_reqs$CLR,
       stage2_f_reset_reqs$DEQ,
       stage2_f_reset_reqs$EMPTY_N,
       stage2_f_reset_reqs$ENQ,
       stage2_f_reset_reqs$FULL_N;

  // ports of submodule stage2_f_reset_rsps
  wire stage2_f_reset_rsps$CLR,
       stage2_f_reset_rsps$DEQ,
       stage2_f_reset_rsps$EMPTY_N,
       stage2_f_reset_rsps$ENQ,
       stage2_f_reset_rsps$FULL_N;

  // ports of submodule stage2_mbox
  wire [63 : 0] stage2_mbox$req_v1, stage2_mbox$req_v2, stage2_mbox$word;
  wire [3 : 0] stage2_mbox$set_verbosity_verbosity;
  wire [2 : 0] stage2_mbox$req_f3;
  wire stage2_mbox$EN_req,
       stage2_mbox$EN_req_reset,
       stage2_mbox$EN_rsp_reset,
       stage2_mbox$EN_set_verbosity,
       stage2_mbox$req_is_OP_not_OP_32,
       stage2_mbox$valid;

  // ports of submodule stage3_f_reset_reqs
  wire stage3_f_reset_reqs$CLR,
       stage3_f_reset_reqs$DEQ,
       stage3_f_reset_reqs$EMPTY_N,
       stage3_f_reset_reqs$ENQ,
       stage3_f_reset_reqs$FULL_N;

  // ports of submodule stage3_f_reset_rsps
  wire stage3_f_reset_rsps$CLR,
       stage3_f_reset_rsps$DEQ,
       stage3_f_reset_rsps$EMPTY_N,
       stage3_f_reset_rsps$ENQ,
       stage3_f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_imem_c_rl_assert_fail,
       CAN_FIRE_RL_imem_c_rl_fetch_next_32b,
       CAN_FIRE_RL_isInReset_isResetAssertedUpdate,
       CAN_FIRE_RL_rl_BREAK_cache_flush_finish,
       CAN_FIRE_RL_rl_WFI_resume,
       CAN_FIRE_RL_rl_debug_csr_access_busy,
       CAN_FIRE_RL_rl_debug_gpr_access_busy,
       CAN_FIRE_RL_rl_debug_halt,
       CAN_FIRE_RL_rl_debug_halt_redundant,
       CAN_FIRE_RL_rl_debug_read_csr,
       CAN_FIRE_RL_rl_debug_read_gpr,
       CAN_FIRE_RL_rl_debug_run,
       CAN_FIRE_RL_rl_debug_run_redundant,
       CAN_FIRE_RL_rl_debug_write_csr,
       CAN_FIRE_RL_rl_debug_write_gpr,
       CAN_FIRE_RL_rl_finish_FENCE,
       CAN_FIRE_RL_rl_finish_FENCE_I,
       CAN_FIRE_RL_rl_finish_SFENCE_VMA,
       CAN_FIRE_RL_rl_pipe,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_from_Debug_Module,
       CAN_FIRE_RL_rl_reset_from_WFI,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_show_pipe,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2,
       CAN_FIRE_RL_rl_stage1_CSRR_W,
       CAN_FIRE_RL_rl_stage1_CSRR_W_2,
       CAN_FIRE_RL_rl_stage1_FENCE,
       CAN_FIRE_RL_rl_stage1_FENCE_I,
       CAN_FIRE_RL_rl_stage1_SFENCE_VMA,
       CAN_FIRE_RL_rl_stage1_WFI,
       CAN_FIRE_RL_rl_stage1_interrupt,
       CAN_FIRE_RL_rl_stage1_restart_after_csrrx,
       CAN_FIRE_RL_rl_stage1_stop,
       CAN_FIRE_RL_rl_stage1_trap,
       CAN_FIRE_RL_rl_stage1_xRET,
       CAN_FIRE_RL_rl_stage2_nonpipe,
       CAN_FIRE_RL_rl_trap,
       CAN_FIRE_RL_rl_trap_BREAK_to_Debug_Mode,
       CAN_FIRE_RL_rl_trap_fetch,
       CAN_FIRE_RL_stage1_rl_reset,
       CAN_FIRE_RL_stage2_rl_reset_begin,
       CAN_FIRE_RL_stage2_rl_reset_end,
       CAN_FIRE_RL_stage3_rl_reset,
       CAN_FIRE_dmem_master_m_arready,
       CAN_FIRE_dmem_master_m_awready,
       CAN_FIRE_dmem_master_m_bvalid,
       CAN_FIRE_dmem_master_m_rvalid,
       CAN_FIRE_dmem_master_m_wready,
       CAN_FIRE_hart0_csr_mem_server_request_put,
       CAN_FIRE_hart0_csr_mem_server_response_get,
       CAN_FIRE_hart0_gpr_mem_server_request_put,
       CAN_FIRE_hart0_gpr_mem_server_response_get,
       CAN_FIRE_hart0_put_other_req_put,
       CAN_FIRE_hart0_server_reset_request_put,
       CAN_FIRE_hart0_server_reset_response_get,
       CAN_FIRE_hart0_server_run_halt_request_put,
       CAN_FIRE_hart0_server_run_halt_response_get,
       CAN_FIRE_imem_master_m_arready,
       CAN_FIRE_imem_master_m_awready,
       CAN_FIRE_imem_master_m_bvalid,
       CAN_FIRE_imem_master_m_rvalid,
       CAN_FIRE_imem_master_m_wready,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_nmi_req,
       CAN_FIRE_s_external_interrupt_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       WILL_FIRE_RL_imem_c_rl_assert_fail,
       WILL_FIRE_RL_imem_c_rl_fetch_next_32b,
       WILL_FIRE_RL_isInReset_isResetAssertedUpdate,
       WILL_FIRE_RL_rl_BREAK_cache_flush_finish,
       WILL_FIRE_RL_rl_WFI_resume,
       WILL_FIRE_RL_rl_debug_csr_access_busy,
       WILL_FIRE_RL_rl_debug_gpr_access_busy,
       WILL_FIRE_RL_rl_debug_halt,
       WILL_FIRE_RL_rl_debug_halt_redundant,
       WILL_FIRE_RL_rl_debug_read_csr,
       WILL_FIRE_RL_rl_debug_read_gpr,
       WILL_FIRE_RL_rl_debug_run,
       WILL_FIRE_RL_rl_debug_run_redundant,
       WILL_FIRE_RL_rl_debug_write_csr,
       WILL_FIRE_RL_rl_debug_write_gpr,
       WILL_FIRE_RL_rl_finish_FENCE,
       WILL_FIRE_RL_rl_finish_FENCE_I,
       WILL_FIRE_RL_rl_finish_SFENCE_VMA,
       WILL_FIRE_RL_rl_pipe,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_from_Debug_Module,
       WILL_FIRE_RL_rl_reset_from_WFI,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_show_pipe,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2,
       WILL_FIRE_RL_rl_stage1_CSRR_W,
       WILL_FIRE_RL_rl_stage1_CSRR_W_2,
       WILL_FIRE_RL_rl_stage1_FENCE,
       WILL_FIRE_RL_rl_stage1_FENCE_I,
       WILL_FIRE_RL_rl_stage1_SFENCE_VMA,
       WILL_FIRE_RL_rl_stage1_WFI,
       WILL_FIRE_RL_rl_stage1_interrupt,
       WILL_FIRE_RL_rl_stage1_restart_after_csrrx,
       WILL_FIRE_RL_rl_stage1_stop,
       WILL_FIRE_RL_rl_stage1_trap,
       WILL_FIRE_RL_rl_stage1_xRET,
       WILL_FIRE_RL_rl_stage2_nonpipe,
       WILL_FIRE_RL_rl_trap,
       WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode,
       WILL_FIRE_RL_rl_trap_fetch,
       WILL_FIRE_RL_stage1_rl_reset,
       WILL_FIRE_RL_stage2_rl_reset_begin,
       WILL_FIRE_RL_stage2_rl_reset_end,
       WILL_FIRE_RL_stage3_rl_reset,
       WILL_FIRE_dmem_master_m_arready,
       WILL_FIRE_dmem_master_m_awready,
       WILL_FIRE_dmem_master_m_bvalid,
       WILL_FIRE_dmem_master_m_rvalid,
       WILL_FIRE_dmem_master_m_wready,
       WILL_FIRE_hart0_csr_mem_server_request_put,
       WILL_FIRE_hart0_csr_mem_server_response_get,
       WILL_FIRE_hart0_gpr_mem_server_request_put,
       WILL_FIRE_hart0_gpr_mem_server_response_get,
       WILL_FIRE_hart0_put_other_req_put,
       WILL_FIRE_hart0_server_reset_request_put,
       WILL_FIRE_hart0_server_reset_response_get,
       WILL_FIRE_hart0_server_run_halt_request_put,
       WILL_FIRE_hart0_server_run_halt_response_get,
       WILL_FIRE_imem_master_m_arready,
       WILL_FIRE_imem_master_m_awready,
       WILL_FIRE_imem_master_m_bvalid,
       WILL_FIRE_imem_master_m_rvalid,
       WILL_FIRE_imem_master_m_wready,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_nmi_req,
       WILL_FIRE_s_external_interrupt_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_csr_regfile$mav_csr_write_2__VAL_2;
  wire [131 : 0] MUX_rg_trap_info$write_1__VAL_1,
		 MUX_rg_trap_info$write_1__VAL_2,
		 MUX_rg_trap_info$write_1__VAL_3,
		 MUX_rg_trap_info$write_1__VAL_4;
  wire [64 : 0] MUX_f_csr_rsps$enq_1__VAL_3, MUX_f_gpr_rsps$enq_1__VAL_3;
  wire [63 : 0] MUX_imem_c_rg_tval$write_1__VAL_6,
		MUX_near_mem$imem_req_2__VAL_1,
		MUX_near_mem$imem_req_2__VAL_2,
		MUX_near_mem$imem_req_2__VAL_5,
		MUX_near_mem$imem_req_2__VAL_7;
  wire [16 : 0] MUX_imem_c_rg_cache_b16$write_1__VAL_1;
  wire [3 : 0] MUX_rg_state$write_1__VAL_1,
	       MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_3;
  wire [2 : 0] MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_2;
  wire MUX_csr_regfile$mav_csr_write_1__SEL_1,
       MUX_csr_regfile$mav_csr_write_1__SEL_2,
       MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1,
       MUX_csr_regfile$write_dpc_1__SEL_2,
       MUX_f_run_halt_rsps$enq_1__SEL_1,
       MUX_gpr_regfile$write_rd_1__SEL_1,
       MUX_gpr_regfile$write_rd_1__SEL_3,
       MUX_imem_c_rg_cache_addr$write_1__PSEL_1,
       MUX_imem_c_rg_cache_addr$write_1__SEL_2,
       MUX_imem_c_rg_cache_addr$write_1__SEL_3,
       MUX_imem_c_rg_cache_b16$write_1__SEL_10,
       MUX_imem_c_rg_cache_b16$write_1__SEL_13,
       MUX_imem_c_rg_cache_b16$write_1__SEL_5,
       MUX_imem_c_rg_cache_b16$write_1__SEL_6,
       MUX_imem_c_rg_cache_b16$write_1__SEL_7,
       MUX_imem_c_rg_cache_b16$write_1__SEL_8,
       MUX_imem_c_rg_cache_b16$write_1__SEL_9,
       MUX_imem_c_rg_f3$write_1__SEL_1,
       MUX_imem_c_rg_f3$write_1__SEL_2,
       MUX_imem_c_rg_mstatus_MXR$write_1__SEL_4,
       MUX_imem_c_rg_pc$write_1__SEL_4,
       MUX_near_mem$imem_req_1__SEL_6,
       MUX_rg_next_pc$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_10,
       MUX_rg_state$write_1__SEL_4,
       MUX_rg_state$write_1__SEL_9,
       MUX_rg_step_count$write_1__PSEL_1,
       MUX_rg_step_count$write_1__SEL_3,
       MUX_rg_trap_info$write_1__SEL_1,
       MUX_rg_trap_instr$write_1__SEL_1,
       MUX_rg_trap_interrupt$write_1__SEL_1,
       MUX_stage1_rg_full$write_1__VAL_12,
       MUX_stage2_rg_full$write_1__VAL_4;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h2389;
  reg [31 : 0] v__h2383;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_theResult__129_BITS_6_TO_0_0b1100111_data_ETC__q21,
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1104,
	       _theResult_____1_fst__h14895,
	       alu_outputs___1_val1__h14086,
	       rs1_val__h22101,
	       x_out_bypass_rd_val__h7471,
	       x_out_data_to_stage2_addr__h13712,
	       x_out_data_to_stage2_val1__h13713,
	       x_out_data_to_stage3_rd_val__h7132;
  reg [4 : 0] x_out_bypass_rd__h7470, x_out_data_to_stage3_rd__h7131;
  reg [3 : 0] CASE_rg_cur_priv_0b0_8_0b1_9_11__q12,
	      CASE_theResult__129_BITS_14_TO_12_0b0_0_0b1_0__ETC__q14,
	      CASE_theResult__129_BITS_14_TO_12_0b0_0_0b1_0__ETC__q16,
	      CASE_theResult__129_BITS_14_TO_12_0b0_4_0b1_5_11__q15,
	      CASE_theResult__129_BITS_14_TO_12_0b0_IF_IF_im_ETC__q17,
	      CASE_theResult__129_BITS_31_TO_20_0b0_CASE_rg__ETC__q13,
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d851,
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d869,
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d872,
	      alu_outputs_exc_code__h14472;
  reg [2 : 0] CASE_theResult__129_BITS_6_TO_0_0b11_1_0b10011_ETC__q18,
	      IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957;
  reg [1 : 0] CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q1,
	      CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q2;
  reg CASE_theResult__129_BITS_6_TO_0_0b11_NOT_theRe_ETC__q10,
      CASE_theResult__129_BITS_6_TO_0_0b11_theResult_ETC__q11,
      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d603,
      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d720,
      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d729,
      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d796,
      IF_stage2_rg_stage2_01_BITS_199_TO_197_02_EQ_1_ETC___d145,
      IF_stage2_rg_stage2_01_BITS_199_TO_197_02_EQ_1_ETC___d154;
  wire [127 : 0] csr_regfile_read_csr_mcycle__1_MINUS_rg_start__ETC___d1597;
  wire [67 : 0] IF_near_mem_imem_exc__54_THEN_near_mem_imem_ex_ETC___d1456;
  wire [63 : 0] IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1105,
		IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1106,
		IF_csr_regfile_read_csr_rg_trap_instr_471_BITS_ETC___d1512,
		IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1003,
		SEXT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ETC___d1012,
		_theResult_____1_fst__h14888,
		_theResult_____1_fst__h14923,
		_theResult____h28521,
		_theResult___fst__h14993,
		_theResult___fst__h15000,
		_theResult___fst__h15100,
		_theResult___snd__h16288,
		addr_of_b32___1__h18426,
		addr_of_b32___1__h20253,
		addr_of_b32___1__h27633,
		addr_of_b32___1__h29365,
		addr_of_b32__h18314,
		addr_of_b32__h20141,
		addr_of_b32__h27521,
		addr_of_b32__h29253,
		alu_outputs___1_addr__h13851,
		alu_outputs___1_addr__h13872,
		alu_outputs___1_addr__h13898,
		alu_outputs___1_addr__h14153,
		alu_outputs___1_val1__h14008,
		alu_outputs___1_val1__h14044,
		alu_outputs___1_val1__h14065,
		alu_outputs___1_val1__h14432,
		alu_outputs___1_val1__h14452,
		branch_target__h13828,
		cpi__h28523,
		cpifrac__h28524,
		data_to_stage2_addr__h13704,
		delta_CPI_cycles__h28519,
		delta_CPI_instrs___1__h28556,
		delta_CPI_instrs__h28520,
		eaddr__h14123,
		fall_through_pc__h13664,
		next_pc___1__h15710,
		next_pc__h15708,
		rd_val___1__h14876,
		rd_val___1__h14884,
		rd_val___1__h14891,
		rd_val___1__h14898,
		rd_val___1__h14905,
		rd_val___1__h14912,
		rd_val___1__h16317,
		rd_val___1__h16348,
		rd_val___1__h16402,
		rd_val___1__h16431,
		rd_val___1__h16483,
		rd_val___1__h16531,
		rd_val___1__h16537,
		rd_val___1__h16582,
		rd_val__h13621,
		rd_val__h14093,
		rd_val__h14107,
		rd_val__h16184,
		rd_val__h16236,
		rd_val__h16258,
		rd_val__h7580,
		rs1_val__h21422,
		rs1_val_bypassed__h5137,
		rs2_val_bypassed__h5143,
		trap_info_tval__h15551,
		val__h13623,
		val__h7582,
		value__h15598,
		x__h28522,
		x_out_data_to_stage2_val2__h13714,
		x_out_next_pc__h13678,
		y__h22370;
  wire [31 : 0] IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_ime_ETC___d259,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d500,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d501,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d503,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d505,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d507,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d509,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d510,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d511,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d513,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d514,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d515,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d517,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d519,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d520,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d522,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d523,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d524,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d525,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d526,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d527,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d528,
		IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d529,
		IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c__ETC___d260,
		_theResult____h5129,
		eaddr4123_BITS_31_TO_0__q20,
		instr___1__h7628,
		instr__h10168,
		instr__h10297,
		instr__h10524,
		instr__h10779,
		instr__h10951,
		instr__h11120,
		instr__h11309,
		instr__h11498,
		instr__h11615,
		instr__h11793,
		instr__h11912,
		instr__h12007,
		instr__h12143,
		instr__h12279,
		instr__h12415,
		instr__h12553,
		instr__h12691,
		instr__h12849,
		instr__h12945,
		instr__h13098,
		instr__h13297,
		instr__h13448,
		instr__h5127,
		instr__h7933,
		instr__h8078,
		instr__h8270,
		instr__h8465,
		instr__h8694,
		instr__h9148,
		instr__h9264,
		instr__h9329,
		instr__h9646,
		instr__h9984,
		instr_out___1__h7770,
		instr_out___1__h7801,
		rs1_val_bypassed137_BITS_31_TO_0_MINUS_rs2_val_ETC__q9,
		rs1_val_bypassed137_BITS_31_TO_0_PLUS_rs2_val__ETC__q8,
		rs1_val_bypassed137_BITS_31_TO_0_SRL_rs2_val_b_ETC__q7,
		rs1_val_bypassed137_BITS_31_TO_0__q6,
		tmp__h16430,
		v32__h14091,
		x__h16351,
		x__h16405,
		x__h16540,
		x__h16585,
		x_out_data_to_stage2_instr__h13709;
  wire [20 : 0] SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d326,
		theResult__129_BIT_31_CONCAT_theResult__129_BI_ETC__q4;
  wire [19 : 0] imm20__h10036;
  wire [15 : 0] IF_imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_ime_ETC___d257;
  wire [12 : 0] SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d351,
		theResult__129_BIT_31_CONCAT_theResult__129_BI_ETC__q3;
  wire [11 : 0] imm12__h10577,
		imm12__h10792,
		imm12__h10988,
		imm12__h11325,
		imm12__h12946,
		imm12__h13298,
		imm12__h7934,
		imm12__h8271,
		imm12__h9908,
		offset__h8641,
		theResult__129_BITS_31_TO_20__q19,
		theResult__129_BITS_31_TO_25_CONCAT_theResult__ETC__q5;
  wire [9 : 0] funct10__h14074, nzimm10__h10575, nzimm10__h10790;
  wire [8 : 0] offset__h12860, offset__h9273;
  wire [7 : 0] offset__h13232, offset__h7670;
  wire [6 : 0] offset__h8213;
  wire [5 : 0] imm6__h9906, shamt__h13995;
  wire [4 : 0] offset_BITS_4_TO_0___h13573,
	       offset_BITS_4_TO_0___h8202,
	       offset_BITS_4_TO_0___h8633,
	       rd__h8273,
	       rs1__h8272,
	       x_out_data_to_stage2_rd__h13711;
  wire [3 : 0] IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d853,
	       IF_NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_N_ETC___d808,
	       IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874,
	       IF_rg_cur_priv_2_EQ_0b11_19_OR_rg_cur_priv_2_E_ETC___d849,
	       alu_outputs___1_exc_code__h14428,
	       cur_verbosity__h3678,
	       x_exc_code__h28270,
	       x_out_trap_info_exc_code__h15554;
  wire [1 : 0] IF_NOT_near_mem_dmem_valid__22_41_OR_NOT_near__ETC___d187,
	       IF_near_mem_dmem_valid__22_THEN_IF_near_mem_dm_ETC___d125,
	       IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131,
	       IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d191,
	       IF_stage2_rg_stage2_01_BITS_199_TO_197_02_EQ_3_ETC___d128,
	       sxl__h6200,
	       uxl__h6201;
  wire IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1274,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1289,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1300,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1427,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d592,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d594,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d596,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d751,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d758,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d826,
       IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d533,
       IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d535,
       NOT_IF_NOT_stage1_rg_full_03_04_OR_NOT_near_me_ETC___d1409,
       NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44,
       NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d639,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1342,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1376,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1393,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1440,
       NOT_csr_regfile_read_dpc__614_BITS_1_TO_0_615__ETC___d1623,
       NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d1395,
       NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d243,
       NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d545,
       NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d547,
       NOT_imem_c_rg_pc_BITS_63_TO_2_0_EQ_imem_c_rg_c_ETC___d1297,
       NOT_near_mem_imem_exc__54_39_AND_IF_IF_imem_c__ETC___d1439,
       NOT_near_mem_imem_exc__54_39_AND_IF_IF_imem_c__ETC___d940,
       NOT_near_mem_imem_exc__54_39_AND_IF_IF_imem_c__ETC___d981,
       NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d1308,
       NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d1320,
       NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538,
       NOT_rg_next_pc_539_BITS_1_TO_0_540_EQ_0b0_541__ETC___d1548,
       NOT_rg_stop_req_277_313_AND_NOT_rg_step_count__ETC___d1323,
       NOT_soc_map_m_pc_reset_value__252_BITS_1_TO_0__ETC___d1265,
       NOT_stage1_rg_full_03_04_OR_NOT_near_mem_imem__ETC___d1375,
       NOT_stage1_rg_full_03_04_OR_NOT_near_mem_imem__ETC___d1412,
       NOT_stage1_rg_full_03_04_OR_imem_c_rg_pc_BITS__ETC___d1392,
       NOT_stage1_rg_full_03_04_OR_imem_c_rg_pc_BITS__ETC___d1400,
       _0_OR_0_OR_near_mem_imem_exc__54_OR_IF_IF_imem__ETC___d1415,
       _0_OR_0_OR_near_mem_imem_exc__54_OR_IF_IF_imem__ETC___d1418,
       _0_OR_0_OR_near_mem_imem_exc__54_OR_IF_IF_imem__ETC___d1423,
       csr_regfile_RDY_server_reset_response_get__231_ETC___d1246,
       csr_regfile_interrupt_pending_rg_cur_priv_2_28_ETC___d1285,
       csr_regfile_read_misa__9_BIT_2_39_AND_IF_NOT_i_ETC___d336,
       csr_regfile_read_misa__9_BIT_2_39_AND_IF_NOT_i_ETC___d342,
       gpr_regfile_RDY_server_reset_request_put__207__ETC___d1219,
       imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d1386,
       imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d1387,
       imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d1389,
       imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d229,
       imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d237,
       imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1240,
       imem_c_rg_pc_BITS_63_TO_2_0_EQ_imem_c_rg_cache_ETC___d1273,
       imem_c_rg_pc_BITS_63_TO_2_0_EQ_imem_c_rg_cache_ETC___d208,
       imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_imem_p_ETC___d13,
       imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_imem_p_ETC___d254,
       near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1117,
       near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1120,
       near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1123,
       near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1126,
       near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1129,
       near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1132,
       near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1135,
       near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1138,
       near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1141,
       near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1144,
       near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1147,
       near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1150,
       near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1341,
       near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1346,
       near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1378,
       near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1397,
       near_mem_imem_pc__1_EQ_imem_c_rg_pc_PLUS_2_11___d212,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804,
       rg_cur_priv_2_EQ_0b11_19_OR_rg_cur_priv_2_EQ_0_ETC___d847,
       rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1443,
       rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1447,
       rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1533,
       rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1552,
       rg_state_5_EQ_4_303_AND_stage3_rg_full_1_OR_NO_ETC___d1326,
       rg_stop_req_277_OR_rg_step_count_278_279_AND_s_ETC___d1589,
       rg_stop_req_277_OR_rg_step_count_278_279_AND_s_ETC___d1592,
       stage1_rg_full_03_AND_imem_c_rg_pc_BITS_63_TO__ETC___d1280,
       stage1_rg_full_03_AND_near_mem_imem_valid_AND__ETC___d1432;

  // action method hart0_server_reset_request_put
  assign RDY_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_hart0_server_reset_request_put =
	     EN_hart0_server_reset_request_put ;

  // actionvalue method hart0_server_reset_response_get
  assign hart0_server_reset_response_get = f_reset_rsps$D_OUT ;
  assign RDY_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_server_reset_response_get =
	     EN_hart0_server_reset_response_get ;

  // value method imem_master_m_awvalid
  assign imem_master_awvalid = near_mem$imem_master_awvalid ;

  // value method imem_master_m_awid
  assign imem_master_awid = near_mem$imem_master_awid ;

  // value method imem_master_m_awaddr
  assign imem_master_awaddr = near_mem$imem_master_awaddr ;

  // value method imem_master_m_awlen
  assign imem_master_awlen = near_mem$imem_master_awlen ;

  // value method imem_master_m_awsize
  assign imem_master_awsize = near_mem$imem_master_awsize ;

  // value method imem_master_m_awburst
  assign imem_master_awburst = near_mem$imem_master_awburst ;

  // value method imem_master_m_awlock
  assign imem_master_awlock = near_mem$imem_master_awlock ;

  // value method imem_master_m_awcache
  assign imem_master_awcache = near_mem$imem_master_awcache ;

  // value method imem_master_m_awprot
  assign imem_master_awprot = near_mem$imem_master_awprot ;

  // value method imem_master_m_awqos
  assign imem_master_awqos = near_mem$imem_master_awqos ;

  // value method imem_master_m_awregion
  assign imem_master_awregion = near_mem$imem_master_awregion ;

  // action method imem_master_m_awready
  assign CAN_FIRE_imem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_awready = 1'd1 ;

  // value method imem_master_m_wvalid
  assign imem_master_wvalid = near_mem$imem_master_wvalid ;

  // value method imem_master_m_wdata
  assign imem_master_wdata = near_mem$imem_master_wdata ;

  // value method imem_master_m_wstrb
  assign imem_master_wstrb = near_mem$imem_master_wstrb ;

  // value method imem_master_m_wlast
  assign imem_master_wlast = near_mem$imem_master_wlast ;

  // action method imem_master_m_wready
  assign CAN_FIRE_imem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_wready = 1'd1 ;

  // action method imem_master_m_bvalid
  assign CAN_FIRE_imem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_bvalid = 1'd1 ;

  // value method imem_master_m_bready
  assign imem_master_bready = near_mem$imem_master_bready ;

  // value method imem_master_m_arvalid
  assign imem_master_arvalid = near_mem$imem_master_arvalid ;

  // value method imem_master_m_arid
  assign imem_master_arid = near_mem$imem_master_arid ;

  // value method imem_master_m_araddr
  assign imem_master_araddr = near_mem$imem_master_araddr ;

  // value method imem_master_m_arlen
  assign imem_master_arlen = near_mem$imem_master_arlen ;

  // value method imem_master_m_arsize
  assign imem_master_arsize = near_mem$imem_master_arsize ;

  // value method imem_master_m_arburst
  assign imem_master_arburst = near_mem$imem_master_arburst ;

  // value method imem_master_m_arlock
  assign imem_master_arlock = near_mem$imem_master_arlock ;

  // value method imem_master_m_arcache
  assign imem_master_arcache = near_mem$imem_master_arcache ;

  // value method imem_master_m_arprot
  assign imem_master_arprot = near_mem$imem_master_arprot ;

  // value method imem_master_m_arqos
  assign imem_master_arqos = near_mem$imem_master_arqos ;

  // value method imem_master_m_arregion
  assign imem_master_arregion = near_mem$imem_master_arregion ;

  // action method imem_master_m_arready
  assign CAN_FIRE_imem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_arready = 1'd1 ;

  // action method imem_master_m_rvalid
  assign CAN_FIRE_imem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_rvalid = 1'd1 ;

  // value method imem_master_m_rready
  assign imem_master_rready = near_mem$imem_master_rready ;

  // value method dmem_master_m_awvalid
  assign dmem_master_awvalid = near_mem$mem_master_awvalid ;

  // value method dmem_master_m_awid
  assign dmem_master_awid = near_mem$mem_master_awid ;

  // value method dmem_master_m_awaddr
  assign dmem_master_awaddr = near_mem$mem_master_awaddr ;

  // value method dmem_master_m_awlen
  assign dmem_master_awlen = near_mem$mem_master_awlen ;

  // value method dmem_master_m_awsize
  assign dmem_master_awsize = near_mem$mem_master_awsize ;

  // value method dmem_master_m_awburst
  assign dmem_master_awburst = near_mem$mem_master_awburst ;

  // value method dmem_master_m_awlock
  assign dmem_master_awlock = near_mem$mem_master_awlock ;

  // value method dmem_master_m_awcache
  assign dmem_master_awcache = near_mem$mem_master_awcache ;

  // value method dmem_master_m_awprot
  assign dmem_master_awprot = near_mem$mem_master_awprot ;

  // value method dmem_master_m_awqos
  assign dmem_master_awqos = near_mem$mem_master_awqos ;

  // value method dmem_master_m_awregion
  assign dmem_master_awregion = near_mem$mem_master_awregion ;

  // action method dmem_master_m_awready
  assign CAN_FIRE_dmem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_awready = 1'd1 ;

  // value method dmem_master_m_wvalid
  assign dmem_master_wvalid = near_mem$mem_master_wvalid ;

  // value method dmem_master_m_wdata
  assign dmem_master_wdata = near_mem$mem_master_wdata ;

  // value method dmem_master_m_wstrb
  assign dmem_master_wstrb = near_mem$mem_master_wstrb ;

  // value method dmem_master_m_wlast
  assign dmem_master_wlast = near_mem$mem_master_wlast ;

  // action method dmem_master_m_wready
  assign CAN_FIRE_dmem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_wready = 1'd1 ;

  // action method dmem_master_m_bvalid
  assign CAN_FIRE_dmem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_bvalid = 1'd1 ;

  // value method dmem_master_m_bready
  assign dmem_master_bready = near_mem$mem_master_bready ;

  // value method dmem_master_m_arvalid
  assign dmem_master_arvalid = near_mem$mem_master_arvalid ;

  // value method dmem_master_m_arid
  assign dmem_master_arid = near_mem$mem_master_arid ;

  // value method dmem_master_m_araddr
  assign dmem_master_araddr = near_mem$mem_master_araddr ;

  // value method dmem_master_m_arlen
  assign dmem_master_arlen = near_mem$mem_master_arlen ;

  // value method dmem_master_m_arsize
  assign dmem_master_arsize = near_mem$mem_master_arsize ;

  // value method dmem_master_m_arburst
  assign dmem_master_arburst = near_mem$mem_master_arburst ;

  // value method dmem_master_m_arlock
  assign dmem_master_arlock = near_mem$mem_master_arlock ;

  // value method dmem_master_m_arcache
  assign dmem_master_arcache = near_mem$mem_master_arcache ;

  // value method dmem_master_m_arprot
  assign dmem_master_arprot = near_mem$mem_master_arprot ;

  // value method dmem_master_m_arqos
  assign dmem_master_arqos = near_mem$mem_master_arqos ;

  // value method dmem_master_m_arregion
  assign dmem_master_arregion = near_mem$mem_master_arregion ;

  // action method dmem_master_m_arready
  assign CAN_FIRE_dmem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_arready = 1'd1 ;

  // action method dmem_master_m_rvalid
  assign CAN_FIRE_dmem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_rvalid = 1'd1 ;

  // value method dmem_master_m_rready
  assign dmem_master_rready = near_mem$mem_master_rready ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method s_external_interrupt_req
  assign CAN_FIRE_s_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_s_external_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method hart0_server_run_halt_request_put
  assign RDY_hart0_server_run_halt_request_put = f_run_halt_reqs$FULL_N ;
  assign CAN_FIRE_hart0_server_run_halt_request_put = f_run_halt_reqs$FULL_N ;
  assign WILL_FIRE_hart0_server_run_halt_request_put =
	     EN_hart0_server_run_halt_request_put ;

  // actionvalue method hart0_server_run_halt_response_get
  assign hart0_server_run_halt_response_get = f_run_halt_rsps$D_OUT ;
  assign RDY_hart0_server_run_halt_response_get = f_run_halt_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_server_run_halt_response_get =
	     f_run_halt_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_server_run_halt_response_get =
	     EN_hart0_server_run_halt_response_get ;

  // action method hart0_put_other_req_put
  assign RDY_hart0_put_other_req_put = 1'd1 ;
  assign CAN_FIRE_hart0_put_other_req_put = 1'd1 ;
  assign WILL_FIRE_hart0_put_other_req_put = EN_hart0_put_other_req_put ;

  // action method hart0_gpr_mem_server_request_put
  assign RDY_hart0_gpr_mem_server_request_put = f_gpr_reqs$FULL_N ;
  assign CAN_FIRE_hart0_gpr_mem_server_request_put = f_gpr_reqs$FULL_N ;
  assign WILL_FIRE_hart0_gpr_mem_server_request_put =
	     EN_hart0_gpr_mem_server_request_put ;

  // actionvalue method hart0_gpr_mem_server_response_get
  assign hart0_gpr_mem_server_response_get = f_gpr_rsps$D_OUT ;
  assign RDY_hart0_gpr_mem_server_response_get = f_gpr_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_gpr_mem_server_response_get = f_gpr_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_gpr_mem_server_response_get =
	     EN_hart0_gpr_mem_server_response_get ;

  // action method hart0_csr_mem_server_request_put
  assign RDY_hart0_csr_mem_server_request_put = f_csr_reqs$FULL_N ;
  assign CAN_FIRE_hart0_csr_mem_server_request_put = f_csr_reqs$FULL_N ;
  assign WILL_FIRE_hart0_csr_mem_server_request_put =
	     EN_hart0_csr_mem_server_request_put ;

  // actionvalue method hart0_csr_mem_server_response_get
  assign hart0_csr_mem_server_response_get = f_csr_rsps$D_OUT ;
  assign RDY_hart0_csr_mem_server_response_get = f_csr_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_csr_mem_server_response_get = f_csr_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_csr_mem_server_response_get =
	     EN_hart0_csr_mem_server_response_get ;

  // submodule csr_regfile
  mkCSR_RegFile csr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .access_permitted_1_csr_addr(csr_regfile$access_permitted_1_csr_addr),
			    .access_permitted_1_priv(csr_regfile$access_permitted_1_priv),
			    .access_permitted_1_read_not_write(csr_regfile$access_permitted_1_read_not_write),
			    .access_permitted_2_csr_addr(csr_regfile$access_permitted_2_csr_addr),
			    .access_permitted_2_priv(csr_regfile$access_permitted_2_priv),
			    .access_permitted_2_read_not_write(csr_regfile$access_permitted_2_read_not_write),
			    .csr_counter_read_fault_csr_addr(csr_regfile$csr_counter_read_fault_csr_addr),
			    .csr_counter_read_fault_priv(csr_regfile$csr_counter_read_fault_priv),
			    .csr_ret_actions_from_priv(csr_regfile$csr_ret_actions_from_priv),
			    .csr_trap_actions_exc_code(csr_regfile$csr_trap_actions_exc_code),
			    .csr_trap_actions_from_priv(csr_regfile$csr_trap_actions_from_priv),
			    .csr_trap_actions_interrupt(csr_regfile$csr_trap_actions_interrupt),
			    .csr_trap_actions_nmi(csr_regfile$csr_trap_actions_nmi),
			    .csr_trap_actions_pc(csr_regfile$csr_trap_actions_pc),
			    .csr_trap_actions_xtval(csr_regfile$csr_trap_actions_xtval),
			    .dcsr_break_enters_debug_cur_priv(csr_regfile$dcsr_break_enters_debug_cur_priv),
			    .interrupt_pending_cur_priv(csr_regfile$interrupt_pending_cur_priv),
			    .m_external_interrupt_req_set_not_clear(csr_regfile$m_external_interrupt_req_set_not_clear),
			    .mav_csr_write_csr_addr(csr_regfile$mav_csr_write_csr_addr),
			    .mav_csr_write_word(csr_regfile$mav_csr_write_word),
			    .mav_read_csr_csr_addr(csr_regfile$mav_read_csr_csr_addr),
			    .nmi_req_set_not_clear(csr_regfile$nmi_req_set_not_clear),
			    .read_csr_csr_addr(csr_regfile$read_csr_csr_addr),
			    .read_csr_port2_csr_addr(csr_regfile$read_csr_port2_csr_addr),
			    .s_external_interrupt_req_set_not_clear(csr_regfile$s_external_interrupt_req_set_not_clear),
			    .software_interrupt_req_set_not_clear(csr_regfile$software_interrupt_req_set_not_clear),
			    .timer_interrupt_req_set_not_clear(csr_regfile$timer_interrupt_req_set_not_clear),
			    .write_dcsr_cause_priv_cause(csr_regfile$write_dcsr_cause_priv_cause),
			    .write_dcsr_cause_priv_priv(csr_regfile$write_dcsr_cause_priv_priv),
			    .write_dpc_pc(csr_regfile$write_dpc_pc),
			    .EN_server_reset_request_put(csr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(csr_regfile$EN_server_reset_response_get),
			    .EN_mav_read_csr(csr_regfile$EN_mav_read_csr),
			    .EN_mav_csr_write(csr_regfile$EN_mav_csr_write),
			    .EN_csr_trap_actions(csr_regfile$EN_csr_trap_actions),
			    .EN_csr_ret_actions(csr_regfile$EN_csr_ret_actions),
			    .EN_csr_minstret_incr(csr_regfile$EN_csr_minstret_incr),
			    .EN_write_dpc(csr_regfile$EN_write_dpc),
			    .EN_write_dcsr_cause_priv(csr_regfile$EN_write_dcsr_cause_priv),
			    .EN_debug(csr_regfile$EN_debug),
			    .RDY_server_reset_request_put(csr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(csr_regfile$RDY_server_reset_response_get),
			    .read_csr(csr_regfile$read_csr),
			    .read_csr_port2(csr_regfile$read_csr_port2),
			    .mav_read_csr(),
			    .mav_csr_write(csr_regfile$mav_csr_write),
			    .read_misa(csr_regfile$read_misa),
			    .read_mstatus(csr_regfile$read_mstatus),
			    .read_sstatus(csr_regfile$read_sstatus),
			    .read_ustatus(),
			    .read_satp(csr_regfile$read_satp),
			    .csr_trap_actions(csr_regfile$csr_trap_actions),
			    .RDY_csr_trap_actions(),
			    .csr_ret_actions(csr_regfile$csr_ret_actions),
			    .RDY_csr_ret_actions(),
			    .read_csr_minstret(csr_regfile$read_csr_minstret),
			    .read_csr_mcycle(csr_regfile$read_csr_mcycle),
			    .read_csr_mtime(),
			    .access_permitted_1(csr_regfile$access_permitted_1),
			    .access_permitted_2(csr_regfile$access_permitted_2),
			    .csr_counter_read_fault(),
			    .csr_mip_read(),
			    .interrupt_pending(csr_regfile$interrupt_pending),
			    .wfi_resume(csr_regfile$wfi_resume),
			    .nmi_pending(csr_regfile$nmi_pending),
			    .read_dpc(csr_regfile$read_dpc),
			    .RDY_read_dpc(),
			    .RDY_write_dpc(),
			    .dcsr_break_enters_debug(csr_regfile$dcsr_break_enters_debug),
			    .RDY_dcsr_break_enters_debug(),
			    .read_dcsr_step(csr_regfile$read_dcsr_step),
			    .RDY_read_dcsr_step(),
			    .RDY_debug());

  // submodule f_csr_reqs
  FIFO2 #(.width(32'd77), .guarded(32'd1)) f_csr_reqs(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_csr_reqs$D_IN),
						      .ENQ(f_csr_reqs$ENQ),
						      .DEQ(f_csr_reqs$DEQ),
						      .CLR(f_csr_reqs$CLR),
						      .D_OUT(f_csr_reqs$D_OUT),
						      .FULL_N(f_csr_reqs$FULL_N),
						      .EMPTY_N(f_csr_reqs$EMPTY_N));

  // submodule f_csr_rsps
  FIFO2 #(.width(32'd65), .guarded(32'd1)) f_csr_rsps(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_csr_rsps$D_IN),
						      .ENQ(f_csr_rsps$ENQ),
						      .DEQ(f_csr_rsps$DEQ),
						      .CLR(f_csr_rsps$CLR),
						      .D_OUT(f_csr_rsps$D_OUT),
						      .FULL_N(f_csr_rsps$FULL_N),
						      .EMPTY_N(f_csr_rsps$EMPTY_N));

  // submodule f_gpr_reqs
  FIFO2 #(.width(32'd70), .guarded(32'd1)) f_gpr_reqs(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_gpr_reqs$D_IN),
						      .ENQ(f_gpr_reqs$ENQ),
						      .DEQ(f_gpr_reqs$DEQ),
						      .CLR(f_gpr_reqs$CLR),
						      .D_OUT(f_gpr_reqs$D_OUT),
						      .FULL_N(f_gpr_reqs$FULL_N),
						      .EMPTY_N(f_gpr_reqs$EMPTY_N));

  // submodule f_gpr_rsps
  FIFO2 #(.width(32'd65), .guarded(32'd1)) f_gpr_rsps(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_gpr_rsps$D_IN),
						      .ENQ(f_gpr_rsps$ENQ),
						      .DEQ(f_gpr_rsps$DEQ),
						      .CLR(f_gpr_rsps$CLR),
						      .D_OUT(f_gpr_rsps$D_OUT),
						      .FULL_N(f_gpr_rsps$FULL_N),
						      .EMPTY_N(f_gpr_rsps$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_run_halt_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_run_halt_reqs(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(f_run_halt_reqs$D_IN),
							  .ENQ(f_run_halt_reqs$ENQ),
							  .DEQ(f_run_halt_reqs$DEQ),
							  .CLR(f_run_halt_reqs$CLR),
							  .D_OUT(f_run_halt_reqs$D_OUT),
							  .FULL_N(f_run_halt_reqs$FULL_N),
							  .EMPTY_N(f_run_halt_reqs$EMPTY_N));

  // submodule f_run_halt_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_run_halt_rsps(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(f_run_halt_rsps$D_IN),
							  .ENQ(f_run_halt_rsps$ENQ),
							  .DEQ(f_run_halt_rsps$DEQ),
							  .CLR(f_run_halt_rsps$CLR),
							  .D_OUT(f_run_halt_rsps$D_OUT),
							  .FULL_N(f_run_halt_rsps$FULL_N),
							  .EMPTY_N(f_run_halt_rsps$EMPTY_N));

  // submodule gpr_regfile
  mkGPR_RegFile gpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(gpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(gpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(gpr_regfile$read_rs2_rs2),
			    .write_rd_rd(gpr_regfile$write_rd_rd),
			    .write_rd_rd_val(gpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(gpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(gpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(gpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(gpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(gpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(gpr_regfile$read_rs1),
			    .read_rs1_port2(gpr_regfile$read_rs1_port2),
			    .read_rs2(gpr_regfile$read_rs2));

  // submodule near_mem
  mkNear_Mem near_mem(.CLK(CLK),
		      .RST_N(RST_N),
		      .dmem_req_addr(near_mem$dmem_req_addr),
		      .dmem_req_amo_funct7(near_mem$dmem_req_amo_funct7),
		      .dmem_req_f3(near_mem$dmem_req_f3),
		      .dmem_req_mstatus_MXR(near_mem$dmem_req_mstatus_MXR),
		      .dmem_req_op(near_mem$dmem_req_op),
		      .dmem_req_priv(near_mem$dmem_req_priv),
		      .dmem_req_satp(near_mem$dmem_req_satp),
		      .dmem_req_sstatus_SUM(near_mem$dmem_req_sstatus_SUM),
		      .dmem_req_store_value(near_mem$dmem_req_store_value),
		      .imem_master_arready(near_mem$imem_master_arready),
		      .imem_master_awready(near_mem$imem_master_awready),
		      .imem_master_bid(near_mem$imem_master_bid),
		      .imem_master_bresp(near_mem$imem_master_bresp),
		      .imem_master_bvalid(near_mem$imem_master_bvalid),
		      .imem_master_rdata(near_mem$imem_master_rdata),
		      .imem_master_rid(near_mem$imem_master_rid),
		      .imem_master_rlast(near_mem$imem_master_rlast),
		      .imem_master_rresp(near_mem$imem_master_rresp),
		      .imem_master_rvalid(near_mem$imem_master_rvalid),
		      .imem_master_wready(near_mem$imem_master_wready),
		      .imem_req_addr(near_mem$imem_req_addr),
		      .imem_req_f3(near_mem$imem_req_f3),
		      .imem_req_mstatus_MXR(near_mem$imem_req_mstatus_MXR),
		      .imem_req_priv(near_mem$imem_req_priv),
		      .imem_req_satp(near_mem$imem_req_satp),
		      .imem_req_sstatus_SUM(near_mem$imem_req_sstatus_SUM),
		      .mem_master_arready(near_mem$mem_master_arready),
		      .mem_master_awready(near_mem$mem_master_awready),
		      .mem_master_bid(near_mem$mem_master_bid),
		      .mem_master_bresp(near_mem$mem_master_bresp),
		      .mem_master_bvalid(near_mem$mem_master_bvalid),
		      .mem_master_rdata(near_mem$mem_master_rdata),
		      .mem_master_rid(near_mem$mem_master_rid),
		      .mem_master_rlast(near_mem$mem_master_rlast),
		      .mem_master_rresp(near_mem$mem_master_rresp),
		      .mem_master_rvalid(near_mem$mem_master_rvalid),
		      .mem_master_wready(near_mem$mem_master_wready),
		      .server_fence_request_put(near_mem$server_fence_request_put),
		      .EN_server_reset_request_put(near_mem$EN_server_reset_request_put),
		      .EN_server_reset_response_get(near_mem$EN_server_reset_response_get),
		      .EN_imem_req(near_mem$EN_imem_req),
		      .EN_dmem_req(near_mem$EN_dmem_req),
		      .EN_server_fence_i_request_put(near_mem$EN_server_fence_i_request_put),
		      .EN_server_fence_i_response_get(near_mem$EN_server_fence_i_response_get),
		      .EN_server_fence_request_put(near_mem$EN_server_fence_request_put),
		      .EN_server_fence_response_get(near_mem$EN_server_fence_response_get),
		      .EN_sfence_vma_server_request_put(near_mem$EN_sfence_vma_server_request_put),
		      .EN_sfence_vma_server_response_get(near_mem$EN_sfence_vma_server_response_get),
		      .EN_ma_ddr4_ready(near_mem$EN_ma_ddr4_ready),
		      .RDY_server_reset_request_put(near_mem$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(near_mem$RDY_server_reset_response_get),
		      .imem_valid(near_mem$imem_valid),
		      .imem_is_i32_not_i16(near_mem$imem_is_i32_not_i16),
		      .imem_pc(near_mem$imem_pc),
		      .imem_instr(near_mem$imem_instr),
		      .imem_exc(near_mem$imem_exc),
		      .imem_exc_code(near_mem$imem_exc_code),
		      .imem_tval(),
		      .imem_master_awvalid(near_mem$imem_master_awvalid),
		      .imem_master_awid(near_mem$imem_master_awid),
		      .imem_master_awaddr(near_mem$imem_master_awaddr),
		      .imem_master_awlen(near_mem$imem_master_awlen),
		      .imem_master_awsize(near_mem$imem_master_awsize),
		      .imem_master_awburst(near_mem$imem_master_awburst),
		      .imem_master_awlock(near_mem$imem_master_awlock),
		      .imem_master_awcache(near_mem$imem_master_awcache),
		      .imem_master_awprot(near_mem$imem_master_awprot),
		      .imem_master_awqos(near_mem$imem_master_awqos),
		      .imem_master_awregion(near_mem$imem_master_awregion),
		      .imem_master_wvalid(near_mem$imem_master_wvalid),
		      .imem_master_wdata(near_mem$imem_master_wdata),
		      .imem_master_wstrb(near_mem$imem_master_wstrb),
		      .imem_master_wlast(near_mem$imem_master_wlast),
		      .imem_master_bready(near_mem$imem_master_bready),
		      .imem_master_arvalid(near_mem$imem_master_arvalid),
		      .imem_master_arid(near_mem$imem_master_arid),
		      .imem_master_araddr(near_mem$imem_master_araddr),
		      .imem_master_arlen(near_mem$imem_master_arlen),
		      .imem_master_arsize(near_mem$imem_master_arsize),
		      .imem_master_arburst(near_mem$imem_master_arburst),
		      .imem_master_arlock(near_mem$imem_master_arlock),
		      .imem_master_arcache(near_mem$imem_master_arcache),
		      .imem_master_arprot(near_mem$imem_master_arprot),
		      .imem_master_arqos(near_mem$imem_master_arqos),
		      .imem_master_arregion(near_mem$imem_master_arregion),
		      .imem_master_rready(near_mem$imem_master_rready),
		      .dmem_valid(near_mem$dmem_valid),
		      .dmem_word64(near_mem$dmem_word64),
		      .dmem_st_amo_val(),
		      .dmem_exc(near_mem$dmem_exc),
		      .dmem_exc_code(near_mem$dmem_exc_code),
		      .mem_master_awvalid(near_mem$mem_master_awvalid),
		      .mem_master_awid(near_mem$mem_master_awid),
		      .mem_master_awaddr(near_mem$mem_master_awaddr),
		      .mem_master_awlen(near_mem$mem_master_awlen),
		      .mem_master_awsize(near_mem$mem_master_awsize),
		      .mem_master_awburst(near_mem$mem_master_awburst),
		      .mem_master_awlock(near_mem$mem_master_awlock),
		      .mem_master_awcache(near_mem$mem_master_awcache),
		      .mem_master_awprot(near_mem$mem_master_awprot),
		      .mem_master_awqos(near_mem$mem_master_awqos),
		      .mem_master_awregion(near_mem$mem_master_awregion),
		      .mem_master_wvalid(near_mem$mem_master_wvalid),
		      .mem_master_wdata(near_mem$mem_master_wdata),
		      .mem_master_wstrb(near_mem$mem_master_wstrb),
		      .mem_master_wlast(near_mem$mem_master_wlast),
		      .mem_master_bready(near_mem$mem_master_bready),
		      .mem_master_arvalid(near_mem$mem_master_arvalid),
		      .mem_master_arid(near_mem$mem_master_arid),
		      .mem_master_araddr(near_mem$mem_master_araddr),
		      .mem_master_arlen(near_mem$mem_master_arlen),
		      .mem_master_arsize(near_mem$mem_master_arsize),
		      .mem_master_arburst(near_mem$mem_master_arburst),
		      .mem_master_arlock(near_mem$mem_master_arlock),
		      .mem_master_arcache(near_mem$mem_master_arcache),
		      .mem_master_arprot(near_mem$mem_master_arprot),
		      .mem_master_arqos(near_mem$mem_master_arqos),
		      .mem_master_arregion(near_mem$mem_master_arregion),
		      .mem_master_rready(near_mem$mem_master_rready),
		      .RDY_server_fence_i_request_put(near_mem$RDY_server_fence_i_request_put),
		      .RDY_server_fence_i_response_get(near_mem$RDY_server_fence_i_response_get),
		      .RDY_server_fence_request_put(near_mem$RDY_server_fence_request_put),
		      .RDY_server_fence_response_get(near_mem$RDY_server_fence_response_get),
		      .RDY_sfence_vma_server_request_put(),
		      .RDY_sfence_vma_server_response_get(),
		      .RDY_ma_ddr4_ready(),
		      .mv_status());

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_quad_spi_0_mem_addr_base(),
		    .m_quad_spi_0_mem_addr_size(),
		    .m_quad_spi_0_mem_addr_lim(),
		    .m_quad_spi_0_reg_addr_base(),
		    .m_quad_spi_0_reg_addr_size(),
		    .m_quad_spi_0_reg_addr_lim(),
		    .m_ethernet_0_addr_base(),
		    .m_ethernet_0_addr_size(),
		    .m_ethernet_0_addr_lim(),
		    .m_dma_0_addr_base(),
		    .m_dma_0_addr_size(),
		    .m_dma_0_addr_lim(),
		    .m_uart16550_0_addr_base(),
		    .m_uart16550_0_addr_size(),
		    .m_uart16550_0_addr_lim(),
		    .m_gpio0_addr_base(),
		    .m_gpio0_addr_size(),
		    .m_gpio0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_ddr4_0_uncached_addr_base(),
		    .m_ddr4_0_uncached_addr_size(),
		    .m_ddr4_0_uncached_addr_lim(),
		    .m_ddr4_0_cached_addr_base(),
		    .m_ddr4_0_cached_addr_size(),
		    .m_ddr4_0_cached_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(soc_map$m_pc_reset_value),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // submodule stage1_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_reqs$ENQ),
						.DEQ(stage1_f_reset_reqs$DEQ),
						.CLR(stage1_f_reset_reqs$CLR),
						.FULL_N(stage1_f_reset_reqs$FULL_N),
						.EMPTY_N(stage1_f_reset_reqs$EMPTY_N));

  // submodule stage1_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_rsps$ENQ),
						.DEQ(stage1_f_reset_rsps$DEQ),
						.CLR(stage1_f_reset_rsps$CLR),
						.FULL_N(stage1_f_reset_rsps$FULL_N),
						.EMPTY_N(stage1_f_reset_rsps$EMPTY_N));

  // submodule stage2_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_reqs$ENQ),
						.DEQ(stage2_f_reset_reqs$DEQ),
						.CLR(stage2_f_reset_reqs$CLR),
						.FULL_N(stage2_f_reset_reqs$FULL_N),
						.EMPTY_N(stage2_f_reset_reqs$EMPTY_N));

  // submodule stage2_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_rsps$ENQ),
						.DEQ(stage2_f_reset_rsps$DEQ),
						.CLR(stage2_f_reset_rsps$CLR),
						.FULL_N(stage2_f_reset_rsps$FULL_N),
						.EMPTY_N(stage2_f_reset_rsps$EMPTY_N));

  // submodule stage2_mbox
  mkRISCV_MBox stage2_mbox(.CLK(CLK),
			   .RST_N(RST_N),
			   .req_f3(stage2_mbox$req_f3),
			   .req_is_OP_not_OP_32(stage2_mbox$req_is_OP_not_OP_32),
			   .req_v1(stage2_mbox$req_v1),
			   .req_v2(stage2_mbox$req_v2),
			   .set_verbosity_verbosity(stage2_mbox$set_verbosity_verbosity),
			   .EN_set_verbosity(stage2_mbox$EN_set_verbosity),
			   .EN_req_reset(stage2_mbox$EN_req_reset),
			   .EN_rsp_reset(stage2_mbox$EN_rsp_reset),
			   .EN_req(stage2_mbox$EN_req),
			   .RDY_set_verbosity(),
			   .RDY_req_reset(),
			   .RDY_rsp_reset(),
			   .valid(stage2_mbox$valid),
			   .word(stage2_mbox$word));

  // submodule stage3_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_reqs$ENQ),
						.DEQ(stage3_f_reset_reqs$DEQ),
						.CLR(stage3_f_reset_reqs$CLR),
						.FULL_N(stage3_f_reset_reqs$FULL_N),
						.EMPTY_N(stage3_f_reset_reqs$EMPTY_N));

  // submodule stage3_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_rsps$ENQ),
						.DEQ(stage3_f_reset_rsps$DEQ),
						.CLR(stage3_f_reset_rsps$CLR),
						.FULL_N(stage3_f_reset_rsps$FULL_N),
						.EMPTY_N(stage3_f_reset_rsps$EMPTY_N));

  // rule RL_rl_show_pipe
  assign CAN_FIRE_RL_rl_show_pipe =
	     NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44 &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd2 &&
	     rg_state != 4'd3 &&
	     rg_state != 4'd13 ;
  assign WILL_FIRE_RL_rl_show_pipe = CAN_FIRE_RL_rl_show_pipe ;

  // rule RL_rl_debug_run_redundant
  assign CAN_FIRE_RL_rl_debug_run_redundant =
	     f_run_halt_rsps$FULL_N && f_run_halt_reqs$EMPTY_N &&
	     f_run_halt_reqs$D_OUT &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd2 &&
	     rg_state != 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_run_redundant =
	     CAN_FIRE_RL_rl_debug_run_redundant &&
	     !WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;

  // rule RL_rl_debug_halt_redundant
  assign CAN_FIRE_RL_rl_debug_halt_redundant =
	     f_run_halt_rsps$FULL_N && f_run_halt_reqs$EMPTY_N &&
	     !f_run_halt_reqs$D_OUT &&
	     (rg_state == 4'd0 || rg_state == 4'd1 || rg_state == 4'd2 ||
	      rg_state == 4'd3) ;
  assign WILL_FIRE_RL_rl_debug_halt_redundant =
	     CAN_FIRE_RL_rl_debug_halt_redundant &&
	     !WILL_FIRE_RL_rl_BREAK_cache_flush_finish ;

  // rule RL_rl_debug_read_gpr
  assign CAN_FIRE_RL_rl_debug_read_gpr =
	     f_gpr_reqs$EMPTY_N && f_gpr_rsps$FULL_N && rg_state == 4'd3 &&
	     !f_gpr_reqs$D_OUT[69] ;
  assign WILL_FIRE_RL_rl_debug_read_gpr = CAN_FIRE_RL_rl_debug_read_gpr ;

  // rule RL_rl_debug_write_gpr
  assign CAN_FIRE_RL_rl_debug_write_gpr =
	     f_gpr_reqs$EMPTY_N && f_gpr_rsps$FULL_N && rg_state == 4'd3 &&
	     f_gpr_reqs$D_OUT[69] ;
  assign WILL_FIRE_RL_rl_debug_write_gpr = CAN_FIRE_RL_rl_debug_write_gpr ;

  // rule RL_rl_debug_gpr_access_busy
  assign CAN_FIRE_RL_rl_debug_gpr_access_busy =
	     f_gpr_reqs$EMPTY_N && f_gpr_rsps$FULL_N && rg_state != 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_gpr_access_busy =
	     CAN_FIRE_RL_rl_debug_gpr_access_busy ;

  // rule RL_rl_debug_read_csr
  assign CAN_FIRE_RL_rl_debug_read_csr =
	     f_csr_reqs$EMPTY_N && f_csr_rsps$FULL_N && rg_state == 4'd3 &&
	     !f_csr_reqs$D_OUT[76] ;
  assign WILL_FIRE_RL_rl_debug_read_csr = CAN_FIRE_RL_rl_debug_read_csr ;

  // rule RL_rl_debug_run
  assign CAN_FIRE_RL_rl_debug_run =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1240 &&
	     f_run_halt_rsps$FULL_N &&
	     f_run_halt_reqs$EMPTY_N &&
	     f_run_halt_reqs$D_OUT &&
	     rg_state == 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_run =
	     CAN_FIRE_RL_rl_debug_run &&
	     !WILL_FIRE_RL_rl_reset_from_Debug_Module ;

  // rule RL_rl_debug_write_csr
  assign CAN_FIRE_RL_rl_debug_write_csr =
	     f_csr_reqs$EMPTY_N && f_csr_rsps$FULL_N && rg_state == 4'd3 &&
	     f_csr_reqs$D_OUT[76] ;
  assign WILL_FIRE_RL_rl_debug_write_csr =
	     CAN_FIRE_RL_rl_debug_write_csr && !WILL_FIRE_RL_rl_debug_run ;

  // rule RL_rl_pipe
  assign CAN_FIRE_RL_rl_pipe =
	     (stage1_rg_full_03_AND_imem_c_rg_pc_BITS_63_TO__ETC___d1280 ||
	      csr_regfile_interrupt_pending_rg_cur_priv_2_28_ETC___d1285 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1300 ||
	      imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1240) &&
	     rg_state_5_EQ_4_303_AND_stage3_rg_full_1_OR_NO_ETC___d1326 ;
  assign WILL_FIRE_RL_rl_pipe =
	     CAN_FIRE_RL_rl_pipe && !WILL_FIRE_RL_imem_c_rl_fetch_next_32b ;

  // rule RL_rl_debug_halt
  assign CAN_FIRE_RL_rl_debug_halt =
	     f_run_halt_reqs$EMPTY_N && !f_run_halt_reqs$D_OUT &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd2 &&
	     rg_state != 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_halt =
	     CAN_FIRE_RL_rl_debug_halt && !WILL_FIRE_RL_rl_stage1_stop &&
	     !WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode &&
	     !WILL_FIRE_RL_rl_WFI_resume &&
	     !WILL_FIRE_RL_rl_stage1_WFI &&
	     !WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	     !WILL_FIRE_RL_rl_stage1_FENCE &&
	     !WILL_FIRE_RL_rl_stage1_FENCE_I &&
	     !WILL_FIRE_RL_rl_stage1_xRET &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     !WILL_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_debug_csr_access_busy
  assign CAN_FIRE_RL_rl_debug_csr_access_busy =
	     f_csr_reqs$EMPTY_N && f_csr_rsps$FULL_N && rg_state != 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_csr_access_busy =
	     CAN_FIRE_RL_rl_debug_csr_access_busy ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     gpr_regfile$RDY_server_reset_response_get &&
	     near_mem$RDY_server_reset_response_get &&
	     csr_regfile_RDY_server_reset_response_get__231_ETC___d1246 &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete =
	     CAN_FIRE_RL_rl_reset_complete &&
	     !WILL_FIRE_RL_imem_c_rl_fetch_next_32b &&
	     !WILL_FIRE_RL_rl_reset_from_Debug_Module ;

  // rule RL_rl_stage2_nonpipe
  assign CAN_FIRE_RL_rl_stage2_nonpipe =
	     rg_state == 4'd4 && !stage3_rg_full &&
	     IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	     2'd3 ;
  assign WILL_FIRE_RL_rl_stage2_nonpipe = CAN_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_stage1_trap
  assign CAN_FIRE_RL_rl_stage1_trap =
	     rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1447 &&
	     (x_out_trap_info_exc_code__h15554 != 4'd3 ||
	      !csr_regfile$dcsr_break_enters_debug) ;
  assign WILL_FIRE_RL_rl_stage1_trap = CAN_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_trap
  assign CAN_FIRE_RL_rl_trap =
	     rg_state == 4'd5 &&
	     (!stage1_rg_full ||
	      near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553) ;
  assign WILL_FIRE_RL_rl_trap = CAN_FIRE_RL_rl_trap ;

  // rule RL_rl_stage1_CSRR_W
  assign CAN_FIRE_RL_rl_stage1_CSRR_W =
	     rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1443 &&
	     IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	     4'd2 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W = CAN_FIRE_RL_rl_stage1_CSRR_W ;

  // rule RL_rl_stage1_CSRR_W_2
  assign CAN_FIRE_RL_rl_stage1_CSRR_W_2 = rg_state == 4'd7 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W_2 = CAN_FIRE_RL_rl_stage1_CSRR_W_2 ;

  // rule RL_rl_stage1_CSRR_S_or_C
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C =
	     rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1443 &&
	     IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	     4'd3 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C =
	     CAN_FIRE_RL_rl_stage1_CSRR_S_or_C ;

  // rule RL_rl_stage1_CSRR_S_or_C_2
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2 = rg_state == 4'd8 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 =
	     CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2 ;

  // rule RL_rl_stage1_restart_after_csrrx
  assign CAN_FIRE_RL_rl_stage1_restart_after_csrrx =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1240 &&
	     rg_state == 4'd9 ;
  assign WILL_FIRE_RL_rl_stage1_restart_after_csrrx =
	     CAN_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // rule RL_rl_stage1_xRET
  assign CAN_FIRE_RL_rl_stage1_xRET =
	     rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1443 &&
	     IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737 &&
	     (IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	      4'd7 ||
	      IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	      4'd8 ||
	      IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	      4'd9) ;
  assign WILL_FIRE_RL_rl_stage1_xRET = CAN_FIRE_RL_rl_stage1_xRET ;

  // rule RL_rl_finish_FENCE_I
  assign CAN_FIRE_RL_rl_finish_FENCE_I =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1240 &&
	     near_mem$RDY_server_fence_i_response_get &&
	     rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_finish_FENCE_I = CAN_FIRE_RL_rl_finish_FENCE_I ;

  // rule RL_rl_stage1_FENCE_I
  assign CAN_FIRE_RL_rl_stage1_FENCE_I =
	     near_mem$RDY_server_fence_i_request_put &&
	     rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1533 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE_I = CAN_FIRE_RL_rl_stage1_FENCE_I ;

  // rule RL_rl_stage1_FENCE
  assign CAN_FIRE_RL_rl_stage1_FENCE =
	     near_mem$RDY_server_fence_request_put &&
	     rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1552 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE = CAN_FIRE_RL_rl_stage1_FENCE ;

  // rule RL_rl_finish_FENCE
  assign CAN_FIRE_RL_rl_finish_FENCE =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1240 &&
	     near_mem$RDY_server_fence_response_get &&
	     rg_state == 4'd11 ;
  assign WILL_FIRE_RL_rl_finish_FENCE = CAN_FIRE_RL_rl_finish_FENCE ;

  // rule RL_rl_stage1_SFENCE_VMA
  assign CAN_FIRE_RL_rl_stage1_SFENCE_VMA =
	     rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1443 &&
	     IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	     4'd6 ;
  assign WILL_FIRE_RL_rl_stage1_SFENCE_VMA =
	     CAN_FIRE_RL_rl_stage1_SFENCE_VMA ;

  // rule RL_rl_stage1_WFI
  assign CAN_FIRE_RL_rl_stage1_WFI =
	     rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1443 &&
	     IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	     4'd10 ;
  assign WILL_FIRE_RL_rl_stage1_WFI = CAN_FIRE_RL_rl_stage1_WFI ;

  // rule RL_rl_finish_SFENCE_VMA
  assign CAN_FIRE_RL_rl_finish_SFENCE_VMA =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1240 &&
	     rg_state == 4'd12 ;
  assign WILL_FIRE_RL_rl_finish_SFENCE_VMA =
	     CAN_FIRE_RL_rl_finish_SFENCE_VMA ;

  // rule RL_rl_WFI_resume
  assign CAN_FIRE_RL_rl_WFI_resume =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1240 &&
	     rg_state == 4'd13 &&
	     (csr_regfile$wfi_resume || rg_stop_req || rg_step_count) &&
	     (!stage1_rg_full ||
	      near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553) ;
  assign WILL_FIRE_RL_rl_WFI_resume = CAN_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_reset_from_WFI
  assign CAN_FIRE_RL_rl_reset_from_WFI =
	     rg_state == 4'd13 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_WFI =
	     CAN_FIRE_RL_rl_reset_from_WFI && !WILL_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_trap_fetch
  assign CAN_FIRE_RL_rl_trap_fetch =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1240 &&
	     rg_state == 4'd6 ;
  assign WILL_FIRE_RL_rl_trap_fetch = CAN_FIRE_RL_rl_trap_fetch ;

  // rule RL_rl_trap_BREAK_to_Debug_Mode
  assign CAN_FIRE_RL_rl_trap_BREAK_to_Debug_Mode =
	     near_mem$RDY_server_fence_i_request_put &&
	     f_run_halt_rsps$FULL_N &&
	     rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1447 &&
	     x_out_trap_info_exc_code__h15554 == 4'd3 &&
	     csr_regfile$dcsr_break_enters_debug ;
  assign WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode =
	     CAN_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;

  // rule RL_rl_BREAK_cache_flush_finish
  assign CAN_FIRE_RL_rl_BREAK_cache_flush_finish =
	     near_mem$RDY_server_fence_i_response_get &&
	     f_run_halt_rsps$FULL_N &&
	     rg_state == 4'd2 ;
  assign WILL_FIRE_RL_rl_BREAK_cache_flush_finish =
	     CAN_FIRE_RL_rl_BREAK_cache_flush_finish ;

  // rule RL_rl_reset_from_Debug_Module
  assign CAN_FIRE_RL_rl_reset_from_Debug_Module =
	     f_reset_reqs$EMPTY_N && rg_state != 4'd0 ;
  assign WILL_FIRE_RL_rl_reset_from_Debug_Module =
	     CAN_FIRE_RL_rl_reset_from_Debug_Module &&
	     !WILL_FIRE_RL_rl_BREAK_cache_flush_finish &&
	     !WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode &&
	     !WILL_FIRE_RL_rl_trap_fetch &&
	     !WILL_FIRE_RL_rl_reset_from_WFI &&
	     !WILL_FIRE_RL_rl_WFI_resume &&
	     !WILL_FIRE_RL_rl_stage1_WFI &&
	     !WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	     !WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	     !WILL_FIRE_RL_rl_finish_FENCE &&
	     !WILL_FIRE_RL_rl_stage1_FENCE &&
	     !WILL_FIRE_RL_rl_finish_FENCE_I &&
	     !WILL_FIRE_RL_rl_stage1_FENCE_I &&
	     !WILL_FIRE_RL_rl_stage1_xRET &&
	     !WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     !WILL_FIRE_RL_rl_trap &&
	     !WILL_FIRE_RL_rl_stage1_trap &&
	     !WILL_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_stage1_stop
  assign CAN_FIRE_RL_rl_stage1_stop =
	     near_mem$RDY_server_fence_i_request_put && rg_state == 4'd4 &&
	     rg_stop_req_277_OR_rg_step_count_278_279_AND_s_ETC___d1592 ;
  assign WILL_FIRE_RL_rl_stage1_stop =
	     CAN_FIRE_RL_rl_stage1_stop &&
	     !WILL_FIRE_RL_rl_reset_from_Debug_Module ;

  // rule RL_rl_stage1_interrupt
  assign CAN_FIRE_RL_rl_stage1_interrupt =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     rg_state == 4'd4 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1274 &&
	     IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	     2'd0 &&
	     !stage3_rg_full ;
  assign WILL_FIRE_RL_rl_stage1_interrupt =
	     CAN_FIRE_RL_rl_stage1_interrupt &&
	     !WILL_FIRE_RL_rl_reset_from_Debug_Module ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     gpr_regfile_RDY_server_reset_request_put__207__ETC___d1219 &&
	     rg_state == 4'd0 &&
	     !isInReset_isInReset ;
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start ;

  // rule RL_imem_c_rl_assert_fail
  assign CAN_FIRE_RL_imem_c_rl_assert_fail = !near_mem$imem_is_i32_not_i16 ;
  assign WILL_FIRE_RL_imem_c_rl_assert_fail =
	     CAN_FIRE_RL_imem_c_rl_assert_fail ;

  // rule RL_imem_c_rl_fetch_next_32b
  assign CAN_FIRE_RL_imem_c_rl_fetch_next_32b =
	     near_mem$imem_valid && imem_c_rg_pc[1:0] != 2'b0 &&
	     imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_imem_p_ETC___d13 &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign WILL_FIRE_RL_imem_c_rl_fetch_next_32b =
	     CAN_FIRE_RL_imem_c_rl_fetch_next_32b ;

  // rule RL_stage3_rl_reset
  assign CAN_FIRE_RL_stage3_rl_reset =
	     stage3_f_reset_reqs$EMPTY_N && stage3_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage3_rl_reset = CAN_FIRE_RL_stage3_rl_reset ;

  // rule RL_stage2_rl_reset_end
  assign CAN_FIRE_RL_stage2_rl_reset_end =
	     stage2_f_reset_rsps$FULL_N && stage2_rg_resetting ;
  assign WILL_FIRE_RL_stage2_rl_reset_end = CAN_FIRE_RL_stage2_rl_reset_end ;

  // rule RL_stage2_rl_reset_begin
  assign CAN_FIRE_RL_stage2_rl_reset_begin = stage2_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_stage2_rl_reset_begin = stage2_f_reset_reqs$EMPTY_N ;

  // rule RL_stage1_rl_reset
  assign CAN_FIRE_RL_stage1_rl_reset =
	     stage1_f_reset_reqs$EMPTY_N && stage1_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage1_rl_reset = CAN_FIRE_RL_stage1_rl_reset ;

  // rule RL_isInReset_isResetAssertedUpdate
  assign CAN_FIRE_RL_isInReset_isResetAssertedUpdate = isInReset_isInReset ;
  assign WILL_FIRE_RL_isInReset_isResetAssertedUpdate = isInReset_isInReset ;

  // inputs to muxes for submodule ports
  assign MUX_csr_regfile$mav_csr_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ;
  assign MUX_csr_regfile$mav_csr_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 &&
	     rg_trap_instr[19:15] != 5'd0 ;
  assign MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1 =
	     WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset ;
  assign MUX_csr_regfile$write_dpc_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;
  assign MUX_f_run_halt_rsps$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_debug_halt_redundant ||
	     WILL_FIRE_RL_rl_BREAK_cache_flush_finish ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;
  assign MUX_gpr_regfile$write_rd_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[69] ;
  assign MUX_gpr_regfile$write_rd_1__SEL_3 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ;
  assign MUX_imem_c_rg_cache_addr$write_1__PSEL_1 =
	     WILL_FIRE_RL_rl_debug_run || WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;
  assign MUX_imem_c_rg_cache_addr$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	     near_mem$imem_valid ;
  assign MUX_imem_c_rg_cache_addr$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_stage1_rg_full_03_04_OR_imem_c_rg_pc_BITS__ETC___d1400 ;
  assign MUX_imem_c_rg_cache_b16$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_trap_fetch && near_mem$imem_valid ;
  assign MUX_imem_c_rg_cache_b16$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_WFI_resume && near_mem$imem_valid ;
  assign MUX_imem_c_rg_cache_b16$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA && near_mem$imem_valid ;
  assign MUX_imem_c_rg_cache_b16$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_finish_FENCE && near_mem$imem_valid ;
  assign MUX_imem_c_rg_cache_b16$write_1__SEL_9 =
	     WILL_FIRE_RL_rl_finish_FENCE_I && near_mem$imem_valid ;
  assign MUX_imem_c_rg_cache_b16$write_1__SEL_10 =
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	     near_mem$imem_valid ;
  assign MUX_imem_c_rg_cache_b16$write_1__SEL_13 =
	     WILL_FIRE_RL_rl_debug_run && near_mem$imem_valid ;
  assign MUX_imem_c_rg_f3$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ;
  assign MUX_imem_c_rg_f3$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_stage1_rg_full_03_04_OR_NOT_near_mem_imem__ETC___d1375 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1376 &&
	     (near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1378 ||
	      !stage1_rg_full) ;
  assign MUX_imem_c_rg_mstatus_MXR$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_debug_run || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;
  assign MUX_imem_c_rg_pc$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_trap_fetch || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign MUX_near_mem$imem_req_1__SEL_6 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign MUX_rg_next_pc$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign MUX_rg_state$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_reset_from_Debug_Module ||
	     WILL_FIRE_RL_rl_reset_from_WFI ;
  assign MUX_rg_state$write_1__SEL_9 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_state$write_1__SEL_10 =
	     WILL_FIRE_RL_rl_stage1_xRET || WILL_FIRE_RL_rl_trap ;
  assign MUX_rg_step_count$write_1__PSEL_1 =
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_pipe ;
  assign MUX_rg_step_count$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_stage1_stop || WILL_FIRE_RL_rl_reset_start ;
  assign MUX_rg_trap_info$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ;
  assign MUX_rg_trap_instr$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ;
  assign MUX_rg_trap_interrupt$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  always@(rg_trap_instr or
	  csr_regfile$read_csr or
	  y__h22370 or
	  IF_csr_regfile_read_csr_rg_trap_instr_471_BITS_ETC___d1512)
  begin
    case (rg_trap_instr[14:12])
      3'b010, 3'b110:
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 =
	      IF_csr_regfile_read_csr_rg_trap_instr_471_BITS_ETC___d1512;
      default: MUX_csr_regfile$mav_csr_write_2__VAL_2 =
		   csr_regfile$read_csr[63:0] & y__h22370;
    endcase
  end
  assign MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_2 =
	     rg_stop_req ? 3'd3 : 3'd4 ;
  assign MUX_f_csr_rsps$enq_1__VAL_3 =
	     { 1'd1, csr_regfile$read_csr_port2[63:0] } ;
  assign MUX_f_gpr_rsps$enq_1__VAL_3 = { 1'd1, gpr_regfile$read_rs1_port2 } ;
  assign MUX_imem_c_rg_cache_b16$write_1__VAL_1 =
	     { 1'd1, near_mem$imem_instr[31:16] } ;
  assign MUX_imem_c_rg_tval$write_1__VAL_6 = near_mem$imem_pc + 64'd4 ;
  assign MUX_near_mem$imem_req_2__VAL_1 =
	     NOT_soc_map_m_pc_reset_value__252_BITS_1_TO_0__ETC___d1265 ?
	       addr_of_b32___1__h18426 :
	       addr_of_b32__h18314 ;
  assign MUX_near_mem$imem_req_2__VAL_2 =
	     NOT_IF_NOT_stage1_rg_full_03_04_OR_NOT_near_me_ETC___d1409 ?
	       addr_of_b32___1__h20253 :
	       addr_of_b32__h20141 ;
  assign MUX_near_mem$imem_req_2__VAL_5 =
	     NOT_rg_next_pc_539_BITS_1_TO_0_540_EQ_0b0_541__ETC___d1548 ?
	       addr_of_b32___1__h27633 :
	       addr_of_b32__h27521 ;
  assign MUX_near_mem$imem_req_2__VAL_7 =
	     NOT_csr_regfile_read_dpc__614_BITS_1_TO_0_615__ETC___d1623 ?
	       addr_of_b32___1__h29365 :
	       addr_of_b32__h29253 ;
  assign MUX_rg_state$write_1__VAL_1 = rg_run_on_reset ? 4'd4 : 4'd3 ;
  assign MUX_rg_state$write_1__VAL_2 =
	     csr_regfile$access_permitted_1 ? 4'd9 : 4'd5 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     csr_regfile$access_permitted_2 ? 4'd9 : 4'd5 ;
  assign MUX_rg_trap_info$write_1__VAL_1 =
	     { imem_c_rg_pc, 4'd2, value__h15598 } ;
  assign MUX_rg_trap_info$write_1__VAL_2 =
	     { stage2_rg_stage2[295:232],
	       near_mem$dmem_exc_code,
	       stage2_rg_stage2[191:128] } ;
  assign MUX_rg_trap_info$write_1__VAL_3 =
	     { imem_c_rg_pc,
	       IF_near_mem_imem_exc__54_THEN_near_mem_imem_ex_ETC___d1456 } ;
  assign MUX_rg_trap_info$write_1__VAL_4 =
	     { imem_c_rg_pc, x_exc_code__h28270, 64'd0 } ;
  assign MUX_stage1_rg_full$write_1__VAL_12 =
	     NOT_stage1_rg_full_03_04_OR_NOT_near_mem_imem__ETC___d1375 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1376 &&
	     _0_OR_0_OR_near_mem_imem_exc__54_OR_IF_IF_imem__ETC___d1423 ||
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1427 ;
  assign MUX_stage2_rg_full$write_1__VAL_4 =
	     _0_OR_0_OR_near_mem_imem_exc__54_OR_IF_IF_imem__ETC___d1418 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804 ||
	     IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 !=
	     2'd2 &&
	     IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 !=
	     2'd0 ;

  // register cfg_logdelay
  assign cfg_logdelay$D_IN = set_verbosity_logdelay ;
  assign cfg_logdelay$EN = EN_set_verbosity ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN =
	     EN_hart0_put_other_req_put ?
	       hart0_put_other_req_put :
	       set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_hart0_put_other_req_put || EN_set_verbosity ;

  // register imem_c_rg_cache_addr
  assign imem_c_rg_cache_addr$D_IN = near_mem$imem_pc ;
  assign imem_c_rg_cache_addr$EN =
	     MUX_imem_c_rg_cache_addr$write_1__PSEL_1 &&
	     near_mem$imem_valid ||
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	     near_mem$imem_valid ||
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_stage1_rg_full_03_04_OR_imem_c_rg_pc_BITS__ETC___d1400 ||
	     WILL_FIRE_RL_imem_c_rl_fetch_next_32b ;

  // register imem_c_rg_cache_b16
  always@(WILL_FIRE_RL_imem_c_rl_fetch_next_32b or
	  MUX_imem_c_rg_cache_b16$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_reset_start or
	  WILL_FIRE_RL_rl_stage1_stop or
	  WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode or
	  MUX_imem_c_rg_cache_b16$write_1__SEL_5 or
	  MUX_imem_c_rg_cache_b16$write_1__SEL_6 or
	  MUX_imem_c_rg_cache_b16$write_1__SEL_7 or
	  MUX_imem_c_rg_cache_b16$write_1__SEL_8 or
	  MUX_imem_c_rg_cache_b16$write_1__SEL_9 or
	  MUX_imem_c_rg_cache_b16$write_1__SEL_10 or
	  MUX_imem_c_rg_cache_addr$write_1__SEL_2 or
	  MUX_imem_c_rg_cache_addr$write_1__SEL_3 or
	  MUX_imem_c_rg_cache_b16$write_1__SEL_13)
  case (1'b1)
    WILL_FIRE_RL_imem_c_rl_fetch_next_32b:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_1;
    WILL_FIRE_RL_rl_reset_start || WILL_FIRE_RL_rl_stage1_stop ||
    WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode:
	imem_c_rg_cache_b16$D_IN = 17'd43690;
    MUX_imem_c_rg_cache_b16$write_1__SEL_5:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_1;
    MUX_imem_c_rg_cache_b16$write_1__SEL_6:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_1;
    MUX_imem_c_rg_cache_b16$write_1__SEL_7:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_1;
    MUX_imem_c_rg_cache_b16$write_1__SEL_8:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_1;
    MUX_imem_c_rg_cache_b16$write_1__SEL_9:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_1;
    MUX_imem_c_rg_cache_b16$write_1__SEL_10:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_1;
    MUX_imem_c_rg_cache_addr$write_1__SEL_2:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_1;
    MUX_imem_c_rg_cache_addr$write_1__SEL_3:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_1;
    MUX_imem_c_rg_cache_b16$write_1__SEL_13:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_1;
    default: imem_c_rg_cache_b16$D_IN =
		 17'b01010101010101010 /* unspecified value */ ;
  endcase
  assign imem_c_rg_cache_b16$EN =
	     MUX_imem_c_rg_cache_addr$write_1__PSEL_1 &&
	     near_mem$imem_valid ||
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	     near_mem$imem_valid ||
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_stage1_rg_full_03_04_OR_imem_c_rg_pc_BITS__ETC___d1400 ||
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_imem_c_rl_fetch_next_32b ;

  // register imem_c_rg_f3
  assign imem_c_rg_f3$D_IN = 3'b010 ;
  assign imem_c_rg_f3$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     MUX_imem_c_rg_f3$write_1__SEL_2 ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_c_rg_mstatus_MXR
  assign imem_c_rg_mstatus_MXR$D_IN =
	     (MUX_imem_c_rg_f3$write_1__SEL_1 ||
	      MUX_imem_c_rg_f3$write_1__SEL_2 ||
	      MUX_imem_c_rg_mstatus_MXR$write_1__SEL_4) ?
	       csr_regfile$read_mstatus[19] :
	       rg_mstatus_MXR ;
  assign imem_c_rg_mstatus_MXR$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     MUX_imem_c_rg_f3$write_1__SEL_2 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_c_rg_pc
  always@(MUX_imem_c_rg_f3$write_1__SEL_1 or
	  soc_map$m_pc_reset_value or
	  MUX_imem_c_rg_f3$write_1__SEL_2 or
	  x_out_next_pc__h13678 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_imem_c_rg_pc$write_1__SEL_4 or
	  rg_next_pc or WILL_FIRE_RL_rl_debug_run or csr_regfile$read_dpc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_c_rg_f3$write_1__SEL_1:
	  imem_c_rg_pc$D_IN = soc_map$m_pc_reset_value;
      MUX_imem_c_rg_f3$write_1__SEL_2:
	  imem_c_rg_pc$D_IN = x_out_next_pc__h13678;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  imem_c_rg_pc$D_IN = x_out_next_pc__h13678;
      MUX_imem_c_rg_pc$write_1__SEL_4: imem_c_rg_pc$D_IN = rg_next_pc;
      WILL_FIRE_RL_rl_debug_run: imem_c_rg_pc$D_IN = csr_regfile$read_dpc;
      default: imem_c_rg_pc$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_c_rg_pc$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     MUX_imem_c_rg_f3$write_1__SEL_2 ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_debug_run ;

  // register imem_c_rg_priv
  assign imem_c_rg_priv$D_IN = rg_cur_priv ;
  assign imem_c_rg_priv$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     MUX_imem_c_rg_f3$write_1__SEL_2 ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_c_rg_satp
  assign imem_c_rg_satp$D_IN = csr_regfile$read_satp ;
  assign imem_c_rg_satp$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     MUX_imem_c_rg_f3$write_1__SEL_2 ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_c_rg_sstatus_SUM
  assign imem_c_rg_sstatus_SUM$D_IN =
	     (MUX_imem_c_rg_f3$write_1__SEL_1 ||
	      MUX_imem_c_rg_f3$write_1__SEL_2 ||
	      MUX_imem_c_rg_mstatus_MXR$write_1__SEL_4) ?
	       csr_regfile$read_sstatus[18] :
	       rg_sstatus_SUM ;
  assign imem_c_rg_sstatus_SUM$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     MUX_imem_c_rg_f3$write_1__SEL_2 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_c_rg_tval
  always@(MUX_imem_c_rg_f3$write_1__SEL_1 or
	  soc_map$m_pc_reset_value or
	  MUX_imem_c_rg_f3$write_1__SEL_2 or
	  x_out_next_pc__h13678 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_imem_c_rg_pc$write_1__SEL_4 or
	  rg_next_pc or
	  WILL_FIRE_RL_rl_debug_run or
	  csr_regfile$read_dpc or
	  WILL_FIRE_RL_imem_c_rl_fetch_next_32b or
	  MUX_imem_c_rg_tval$write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_c_rg_f3$write_1__SEL_1:
	  imem_c_rg_tval$D_IN = soc_map$m_pc_reset_value;
      MUX_imem_c_rg_f3$write_1__SEL_2:
	  imem_c_rg_tval$D_IN = x_out_next_pc__h13678;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  imem_c_rg_tval$D_IN = x_out_next_pc__h13678;
      MUX_imem_c_rg_pc$write_1__SEL_4: imem_c_rg_tval$D_IN = rg_next_pc;
      WILL_FIRE_RL_rl_debug_run: imem_c_rg_tval$D_IN = csr_regfile$read_dpc;
      WILL_FIRE_RL_imem_c_rl_fetch_next_32b:
	  imem_c_rg_tval$D_IN = MUX_imem_c_rg_tval$write_1__VAL_6;
      default: imem_c_rg_tval$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_c_rg_tval$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     MUX_imem_c_rg_f3$write_1__SEL_2 ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_imem_c_rl_fetch_next_32b ;

  // register isInReset_isInReset
  assign isInReset_isInReset$D_IN = 1'd0 ;
  assign isInReset_isInReset$EN = isInReset_isInReset ;

  // register rg_csr_pc
  assign rg_csr_pc$D_IN = imem_c_rg_pc ;
  assign rg_csr_pc$EN = MUX_rg_trap_info$write_1__SEL_1 ;

  // register rg_csr_val1
  assign rg_csr_val1$D_IN = x_out_data_to_stage2_val1__h13713 ;
  assign rg_csr_val1$EN = MUX_rg_trap_info$write_1__SEL_1 ;

  // register rg_cur_priv
  always@(WILL_FIRE_RL_rl_trap or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_trap:
	  rg_cur_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_cur_priv$D_IN = csr_regfile$csr_ret_actions[65:64];
      WILL_FIRE_RL_rl_reset_start: rg_cur_priv$D_IN = 2'b11;
      default: rg_cur_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_cur_priv$EN =
	     WILL_FIRE_RL_rl_trap || WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = csr_regfile$read_mstatus[19] ;
  assign rg_mstatus_MXR$EN = MUX_rg_state$write_1__SEL_10 ;

  // register rg_next_pc
  always@(MUX_rg_next_pc$write_1__SEL_1 or
	  x_out_next_pc__h13678 or
	  WILL_FIRE_RL_rl_trap or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or csr_regfile$csr_ret_actions)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_next_pc$write_1__SEL_1: rg_next_pc$D_IN = x_out_next_pc__h13678;
      WILL_FIRE_RL_rl_trap:
	  rg_next_pc$D_IN = csr_regfile$csr_trap_actions[193:130];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_next_pc$D_IN = csr_regfile$csr_ret_actions[129:66];
      default: rg_next_pc$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_next_pc$EN =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_xRET ;

  // register rg_run_on_reset
  assign rg_run_on_reset$D_IN = f_reset_reqs$D_OUT ;
  assign rg_run_on_reset$EN = CAN_FIRE_RL_rl_reset_start ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = csr_regfile$read_sstatus[18] ;
  assign rg_sstatus_SUM$EN = MUX_rg_state$write_1__SEL_10 ;

  // register rg_start_CPI_cycles
  assign rg_start_CPI_cycles$D_IN = csr_regfile$read_csr_mcycle ;
  assign rg_start_CPI_cycles$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_debug_run ;

  // register rg_start_CPI_instrs
  assign rg_start_CPI_instrs$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_start_CPI_instrs$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_debug_run ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_reset_complete or
	  MUX_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage1_CSRR_W_2 or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 or
	  MUX_rg_state$write_1__VAL_3 or
	  MUX_rg_state$write_1__SEL_4 or
	  WILL_FIRE_RL_rl_reset_start or
	  MUX_csr_regfile$write_dpc_1__SEL_2 or
	  WILL_FIRE_RL_rl_BREAK_cache_flush_finish or
	  MUX_imem_c_rg_cache_addr$write_1__PSEL_1 or
	  MUX_rg_state$write_1__SEL_9 or
	  MUX_rg_state$write_1__SEL_10 or
	  WILL_FIRE_RL_rl_stage1_CSRR_W or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C or
	  WILL_FIRE_RL_rl_stage1_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_FENCE or
	  WILL_FIRE_RL_rl_stage1_SFENCE_VMA or WILL_FIRE_RL_rl_stage1_WFI)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_reset_complete:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage1_CSRR_W_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
      MUX_rg_state$write_1__SEL_4: rg_state$D_IN = 4'd0;
      WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 4'd1;
      MUX_csr_regfile$write_dpc_1__SEL_2: rg_state$D_IN = 4'd2;
      WILL_FIRE_RL_rl_BREAK_cache_flush_finish: rg_state$D_IN = 4'd3;
      MUX_imem_c_rg_cache_addr$write_1__PSEL_1: rg_state$D_IN = 4'd4;
      MUX_rg_state$write_1__SEL_9: rg_state$D_IN = 4'd5;
      MUX_rg_state$write_1__SEL_10: rg_state$D_IN = 4'd6;
      WILL_FIRE_RL_rl_stage1_CSRR_W: rg_state$D_IN = 4'd7;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C: rg_state$D_IN = 4'd8;
      WILL_FIRE_RL_rl_stage1_FENCE_I: rg_state$D_IN = 4'd10;
      WILL_FIRE_RL_rl_stage1_FENCE: rg_state$D_IN = 4'd11;
      WILL_FIRE_RL_rl_stage1_SFENCE_VMA: rg_state$D_IN = 4'd12;
      WILL_FIRE_RL_rl_stage1_WFI: rg_state$D_IN = 4'd13;
      default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 ||
	     WILL_FIRE_RL_rl_reset_from_Debug_Module ||
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ||
	     WILL_FIRE_RL_rl_BREAK_cache_flush_finish ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_WFI ;

  // register rg_step_count
  assign rg_step_count$D_IN = !MUX_rg_step_count$write_1__SEL_3 ;
  assign rg_step_count$EN =
	     MUX_rg_step_count$write_1__PSEL_1 &&
	     stage1_rg_full_03_AND_near_mem_imem_valid_AND__ETC___d1432 &&
	     !rg_step_count ||
	     (WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_xRET) &&
	     csr_regfile$read_dcsr_step &&
	     !rg_step_count ||
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_stop_req
  assign rg_stop_req$D_IN = !MUX_rg_step_count$write_1__SEL_3 ;
  assign rg_stop_req$EN =
	     WILL_FIRE_RL_rl_stage1_stop || WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_debug_halt ;

  // register rg_trap_info
  always@(MUX_rg_trap_info$write_1__SEL_1 or
	  MUX_rg_trap_info$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage2_nonpipe or
	  MUX_rg_trap_info$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_trap or
	  MUX_rg_trap_info$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_stage1_interrupt or MUX_rg_trap_info$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_trap_info$write_1__SEL_1:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_2;
      WILL_FIRE_RL_rl_stage1_trap:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_3;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_4;
      default: rg_trap_info$D_IN =
		   132'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_trap_info$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register rg_trap_instr
  assign rg_trap_instr$D_IN =
	     MUX_rg_trap_instr$write_1__SEL_1 ?
	       _theResult____h5129 :
	       stage2_rg_stage2[231:200] ;
  assign rg_trap_instr$EN =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;

  // register rg_trap_interrupt
  assign rg_trap_interrupt$D_IN = !MUX_rg_trap_interrupt$write_1__SEL_1 ;
  assign rg_trap_interrupt$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register stage1_rg_full
  always@(WILL_FIRE_RL_stage1_rl_reset or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_stage1_WFI or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_trap or
	  MUX_imem_c_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage1_rg_full$write_1__VAL_12 or WILL_FIRE_RL_rl_debug_run)
  case (1'b1)
    WILL_FIRE_RL_stage1_rl_reset: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_trap_fetch || WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_finish_SFENCE_VMA:
	stage1_rg_full$D_IN = 1'd1;
    WILL_FIRE_RL_rl_stage1_WFI: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_finish_FENCE || WILL_FIRE_RL_rl_finish_FENCE_I:
	stage1_rg_full$D_IN = 1'd1;
    WILL_FIRE_RL_rl_stage1_xRET: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx: stage1_rg_full$D_IN = 1'd1;
    WILL_FIRE_RL_rl_trap: stage1_rg_full$D_IN = 1'd0;
    MUX_imem_c_rg_f3$write_1__SEL_1: stage1_rg_full$D_IN = 1'd1;
    WILL_FIRE_RL_rl_pipe:
	stage1_rg_full$D_IN = MUX_stage1_rg_full$write_1__VAL_12;
    WILL_FIRE_RL_rl_debug_run: stage1_rg_full$D_IN = 1'd1;
    default: stage1_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage1_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_stage1_rl_reset ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register stage2_rg_full
  always@(stage2_f_reset_reqs$EMPTY_N or
	  WILL_FIRE_RL_rl_trap or
	  MUX_imem_c_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage2_rg_full$write_1__VAL_4 or WILL_FIRE_RL_rl_debug_run)
  case (1'b1)
    stage2_f_reset_reqs$EMPTY_N || WILL_FIRE_RL_rl_trap ||
    MUX_imem_c_rg_f3$write_1__SEL_1:
	stage2_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage2_rg_full$D_IN = MUX_stage2_rg_full$write_1__VAL_4;
    WILL_FIRE_RL_rl_debug_run: stage2_rg_full$D_IN = 1'd0;
    default: stage2_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage2_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap ||
	     stage2_f_reset_reqs$EMPTY_N ;

  // register stage2_rg_resetting
  assign stage2_rg_resetting$D_IN = stage2_f_reset_reqs$EMPTY_N ;
  assign stage2_rg_resetting$EN =
	     WILL_FIRE_RL_stage2_rl_reset_end || stage2_f_reset_reqs$EMPTY_N ;

  // register stage2_rg_stage2
  assign stage2_rg_stage2$D_IN =
	     { rg_cur_priv,
	       imem_c_rg_pc,
	       x_out_data_to_stage2_instr__h13709,
	       IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957,
	       x_out_data_to_stage2_rd__h13711,
	       x_out_data_to_stage2_addr__h13712,
	       x_out_data_to_stage2_val1__h13713,
	       x_out_data_to_stage2_val2__h13714 } ;
  assign stage2_rg_stage2$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1346 ;

  // register stage3_rg_full
  always@(WILL_FIRE_RL_stage3_rl_reset or
	  MUX_imem_c_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_pipe or
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 or
	  WILL_FIRE_RL_rl_debug_run)
  case (1'b1)
    WILL_FIRE_RL_stage3_rl_reset || MUX_imem_c_rg_f3$write_1__SEL_1:
	stage3_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage3_rg_full$D_IN =
	    IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd2;
    WILL_FIRE_RL_rl_debug_run: stage3_rg_full$D_IN = 1'd0;
    default: stage3_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage3_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_stage3_rl_reset ;

  // register stage3_rg_stage3
  assign stage3_rg_stage3$D_IN =
	     { stage2_rg_stage2[295:200],
	       stage2_rg_stage2[297:296],
	       stage2_rg_stage2[199:197] == 3'd0 ||
	       IF_stage2_rg_stage2_01_BITS_199_TO_197_02_EQ_1_ETC___d154,
	       x_out_data_to_stage3_rd__h7131,
	       x_out_data_to_stage3_rd_val__h7132 } ;
  assign stage3_rg_stage3$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	     2'd2 ;

  // submodule csr_regfile
  assign csr_regfile$access_permitted_1_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$access_permitted_1_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_1_read_not_write = 1'd0 ;
  assign csr_regfile$access_permitted_2_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$access_permitted_2_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_2_read_not_write =
	     rs1_val__h22101 == 64'd0 ;
  assign csr_regfile$csr_counter_read_fault_csr_addr = 12'h0 ;
  assign csr_regfile$csr_counter_read_fault_priv = 2'h0 ;
  always@(IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874)
  begin
    case (IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874)
      4'd7: csr_regfile$csr_ret_actions_from_priv = 2'b11;
      4'd8: csr_regfile$csr_ret_actions_from_priv = 2'b01;
      default: csr_regfile$csr_ret_actions_from_priv = 2'b0;
    endcase
  end
  assign csr_regfile$csr_trap_actions_exc_code = rg_trap_info[67:64] ;
  assign csr_regfile$csr_trap_actions_from_priv = rg_cur_priv ;
  assign csr_regfile$csr_trap_actions_interrupt =
	     rg_trap_interrupt && !csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_nmi =
	     rg_trap_interrupt && csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_pc = rg_trap_info[131:68] ;
  assign csr_regfile$csr_trap_actions_xtval = rg_trap_info[63:0] ;
  assign csr_regfile$dcsr_break_enters_debug_cur_priv = rg_cur_priv ;
  assign csr_regfile$interrupt_pending_cur_priv = rg_cur_priv ;
  assign csr_regfile$m_external_interrupt_req_set_not_clear =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_regfile$mav_csr_write_csr_addr =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_csr_regfile$mav_csr_write_1__SEL_2) ?
	       rg_trap_instr[31:20] :
	       f_csr_reqs$D_OUT[75:64] ;
  always@(MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  rs1_val__h21422 or
	  MUX_csr_regfile$mav_csr_write_1__SEL_2 or
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 or
	  WILL_FIRE_RL_rl_debug_write_csr or f_csr_reqs$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_csr_regfile$mav_csr_write_1__SEL_1:
	  csr_regfile$mav_csr_write_word = rs1_val__h21422;
      MUX_csr_regfile$mav_csr_write_1__SEL_2:
	  csr_regfile$mav_csr_write_word =
	      MUX_csr_regfile$mav_csr_write_2__VAL_2;
      WILL_FIRE_RL_rl_debug_write_csr:
	  csr_regfile$mav_csr_write_word = f_csr_reqs$D_OUT[63:0];
      default: csr_regfile$mav_csr_write_word =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$mav_read_csr_csr_addr = 12'h0 ;
  assign csr_regfile$nmi_req_set_not_clear = nmi_req_set_not_clear ;
  assign csr_regfile$read_csr_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$read_csr_port2_csr_addr = f_csr_reqs$D_OUT[75:64] ;
  assign csr_regfile$s_external_interrupt_req_set_not_clear =
	     s_external_interrupt_req_set_not_clear ;
  assign csr_regfile$software_interrupt_req_set_not_clear =
	     software_interrupt_req_set_not_clear ;
  assign csr_regfile$timer_interrupt_req_set_not_clear =
	     timer_interrupt_req_set_not_clear ;
  always@(MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1 or
	  WILL_FIRE_RL_rl_stage1_stop or
	  MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_2 or
	  WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1:
	  csr_regfile$write_dcsr_cause_priv_cause = 3'd3;
      WILL_FIRE_RL_rl_stage1_stop:
	  csr_regfile$write_dcsr_cause_priv_cause =
	      MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_2;
      WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode:
	  csr_regfile$write_dcsr_cause_priv_cause = 3'd1;
      default: csr_regfile$write_dcsr_cause_priv_cause =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$write_dcsr_cause_priv_priv =
	     (WILL_FIRE_RL_rl_stage1_stop ||
	      WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode) ?
	       rg_cur_priv :
	       2'b11 ;
  assign csr_regfile$write_dpc_pc =
	     MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1 ?
	       soc_map$m_pc_reset_value :
	       imem_c_rg_pc ;
  assign csr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign csr_regfile$EN_server_reset_response_get =
	     WILL_FIRE_RL_rl_reset_complete ;
  assign csr_regfile$EN_mav_read_csr = 1'b0 ;
  assign csr_regfile$EN_mav_csr_write =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 &&
	     rg_trap_instr[19:15] != 5'd0 ||
	     WILL_FIRE_RL_rl_debug_write_csr ;
  assign csr_regfile$EN_csr_trap_actions = CAN_FIRE_RL_rl_trap ;
  assign csr_regfile$EN_csr_ret_actions = CAN_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_csr_minstret_incr =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	     2'd2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign csr_regfile$EN_write_dpc =
	     WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset ||
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;
  assign csr_regfile$EN_write_dcsr_cause_priv =
	     WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset ||
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;
  assign csr_regfile$EN_debug = 1'b0 ;

  // submodule f_csr_reqs
  assign f_csr_reqs$D_IN = hart0_csr_mem_server_request_put ;
  assign f_csr_reqs$ENQ = EN_hart0_csr_mem_server_request_put ;
  assign f_csr_reqs$DEQ =
	     WILL_FIRE_RL_rl_debug_csr_access_busy ||
	     WILL_FIRE_RL_rl_debug_write_csr ||
	     WILL_FIRE_RL_rl_debug_read_csr ;
  assign f_csr_reqs$CLR = 1'b0 ;

  // submodule f_csr_rsps
  always@(WILL_FIRE_RL_rl_debug_csr_access_busy or
	  WILL_FIRE_RL_rl_debug_write_csr or
	  WILL_FIRE_RL_rl_debug_read_csr or MUX_f_csr_rsps$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_debug_csr_access_busy:
	  f_csr_rsps$D_IN = 65'h0AAAAAAAAAAAAAAAA;
      WILL_FIRE_RL_rl_debug_write_csr:
	  f_csr_rsps$D_IN = 65'h1AAAAAAAAAAAAAAAA;
      WILL_FIRE_RL_rl_debug_read_csr:
	  f_csr_rsps$D_IN = MUX_f_csr_rsps$enq_1__VAL_3;
      default: f_csr_rsps$D_IN =
		   65'h0AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_csr_rsps$ENQ =
	     WILL_FIRE_RL_rl_debug_csr_access_busy ||
	     WILL_FIRE_RL_rl_debug_write_csr ||
	     WILL_FIRE_RL_rl_debug_read_csr ;
  assign f_csr_rsps$DEQ = EN_hart0_csr_mem_server_response_get ;
  assign f_csr_rsps$CLR = 1'b0 ;

  // submodule f_gpr_reqs
  assign f_gpr_reqs$D_IN = hart0_gpr_mem_server_request_put ;
  assign f_gpr_reqs$ENQ = EN_hart0_gpr_mem_server_request_put ;
  assign f_gpr_reqs$DEQ =
	     WILL_FIRE_RL_rl_debug_gpr_access_busy ||
	     WILL_FIRE_RL_rl_debug_write_gpr ||
	     WILL_FIRE_RL_rl_debug_read_gpr ;
  assign f_gpr_reqs$CLR = 1'b0 ;

  // submodule f_gpr_rsps
  always@(WILL_FIRE_RL_rl_debug_gpr_access_busy or
	  WILL_FIRE_RL_rl_debug_write_gpr or
	  WILL_FIRE_RL_rl_debug_read_gpr or MUX_f_gpr_rsps$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_debug_gpr_access_busy:
	  f_gpr_rsps$D_IN = 65'h0AAAAAAAAAAAAAAAA;
      WILL_FIRE_RL_rl_debug_write_gpr:
	  f_gpr_rsps$D_IN = 65'h1AAAAAAAAAAAAAAAA;
      WILL_FIRE_RL_rl_debug_read_gpr:
	  f_gpr_rsps$D_IN = MUX_f_gpr_rsps$enq_1__VAL_3;
      default: f_gpr_rsps$D_IN =
		   65'h0AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_gpr_rsps$ENQ =
	     WILL_FIRE_RL_rl_debug_gpr_access_busy ||
	     WILL_FIRE_RL_rl_debug_write_gpr ||
	     WILL_FIRE_RL_rl_debug_read_gpr ;
  assign f_gpr_rsps$DEQ = EN_hart0_gpr_mem_server_response_get ;
  assign f_gpr_rsps$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = hart0_server_reset_request_put ;
  assign f_reset_reqs$ENQ = EN_hart0_server_reset_request_put ;
  assign f_reset_reqs$DEQ = CAN_FIRE_RL_rl_reset_start ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = rg_run_on_reset ;
  assign f_reset_rsps$ENQ = WILL_FIRE_RL_rl_reset_complete ;
  assign f_reset_rsps$DEQ = EN_hart0_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_run_halt_reqs
  assign f_run_halt_reqs$D_IN = hart0_server_run_halt_request_put ;
  assign f_run_halt_reqs$ENQ = EN_hart0_server_run_halt_request_put ;
  assign f_run_halt_reqs$DEQ =
	     WILL_FIRE_RL_rl_debug_halt_redundant ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_debug_halt ||
	     WILL_FIRE_RL_rl_debug_run_redundant ;
  assign f_run_halt_reqs$CLR = 1'b0 ;

  // submodule f_run_halt_rsps
  assign f_run_halt_rsps$D_IN = !MUX_f_run_halt_rsps$enq_1__SEL_1 ;
  assign f_run_halt_rsps$ENQ =
	     WILL_FIRE_RL_rl_debug_halt_redundant ||
	     WILL_FIRE_RL_rl_BREAK_cache_flush_finish ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_debug_run_redundant ;
  assign f_run_halt_rsps$DEQ = EN_hart0_server_run_halt_response_get ;
  assign f_run_halt_rsps$CLR = 1'b0 ;

  // submodule gpr_regfile
  assign gpr_regfile$read_rs1_port2_rs1 = f_gpr_reqs$D_OUT[68:64] ;
  assign gpr_regfile$read_rs1_rs1 = _theResult____h5129[19:15] ;
  assign gpr_regfile$read_rs2_rs2 = _theResult____h5129[24:20] ;
  always@(MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  MUX_gpr_regfile$write_rd_1__SEL_3 or
	  rg_trap_instr or
	  WILL_FIRE_RL_rl_debug_write_gpr or
	  f_gpr_reqs$D_OUT or
	  MUX_gpr_regfile$write_rd_1__SEL_1 or stage3_rg_stage3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
      MUX_gpr_regfile$write_rd_1__SEL_3:
	  gpr_regfile$write_rd_rd = rg_trap_instr[11:7];
      WILL_FIRE_RL_rl_debug_write_gpr:
	  gpr_regfile$write_rd_rd = f_gpr_reqs$D_OUT[68:64];
      MUX_gpr_regfile$write_rd_1__SEL_1:
	  gpr_regfile$write_rd_rd = stage3_rg_stage3[68:64];
      default: gpr_regfile$write_rd_rd = 5'b01010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  MUX_gpr_regfile$write_rd_1__SEL_3 or
	  csr_regfile$read_csr or
	  WILL_FIRE_RL_rl_debug_write_gpr or
	  f_gpr_reqs$D_OUT or
	  MUX_gpr_regfile$write_rd_1__SEL_1 or stage3_rg_stage3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
      MUX_gpr_regfile$write_rd_1__SEL_3:
	  gpr_regfile$write_rd_rd_val = csr_regfile$read_csr[63:0];
      WILL_FIRE_RL_rl_debug_write_gpr:
	  gpr_regfile$write_rd_rd_val = f_gpr_reqs$D_OUT[63:0];
      MUX_gpr_regfile$write_rd_1__SEL_1:
	  gpr_regfile$write_rd_rd_val = stage3_rg_stage3[63:0];
      default: gpr_regfile$write_rd_rd_val =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign gpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign gpr_regfile$EN_server_reset_response_get =
	     WILL_FIRE_RL_rl_reset_complete ;
  assign gpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[69] ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_debug_write_gpr ;

  // submodule near_mem
  assign near_mem$dmem_req_addr = x_out_data_to_stage2_addr__h13712 ;
  assign near_mem$dmem_req_amo_funct7 =
	     x_out_data_to_stage2_val1__h13713[6:0] ;
  assign near_mem$dmem_req_f3 = x_out_data_to_stage2_instr__h13709[14:12] ;
  assign near_mem$dmem_req_mstatus_MXR = csr_regfile$read_mstatus[19] ;
  always@(IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957)
  begin
    case (IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957)
      3'd1: near_mem$dmem_req_op = 2'd0;
      3'd2: near_mem$dmem_req_op = 2'd1;
      default: near_mem$dmem_req_op = 2'd2;
    endcase
  end
  assign near_mem$dmem_req_priv =
	     csr_regfile$read_mstatus[17] ?
	       csr_regfile$read_mstatus[12:11] :
	       rg_cur_priv ;
  assign near_mem$dmem_req_satp = csr_regfile$read_satp ;
  assign near_mem$dmem_req_sstatus_SUM = csr_regfile$read_sstatus[18] ;
  assign near_mem$dmem_req_store_value = x_out_data_to_stage2_val2__h13714 ;
  assign near_mem$imem_master_arready = imem_master_arready ;
  assign near_mem$imem_master_awready = imem_master_awready ;
  assign near_mem$imem_master_bid = imem_master_bid ;
  assign near_mem$imem_master_bresp = imem_master_bresp ;
  assign near_mem$imem_master_bvalid = imem_master_bvalid ;
  assign near_mem$imem_master_rdata = imem_master_rdata ;
  assign near_mem$imem_master_rid = imem_master_rid ;
  assign near_mem$imem_master_rlast = imem_master_rlast ;
  assign near_mem$imem_master_rresp = imem_master_rresp ;
  assign near_mem$imem_master_rvalid = imem_master_rvalid ;
  assign near_mem$imem_master_wready = imem_master_wready ;
  always@(MUX_imem_c_rg_f3$write_1__SEL_1 or
	  MUX_near_mem$imem_req_2__VAL_1 or
	  MUX_imem_c_rg_f3$write_1__SEL_2 or
	  MUX_near_mem$imem_req_2__VAL_2 or
	  WILL_FIRE_RL_imem_c_rl_fetch_next_32b or
	  MUX_imem_c_rg_tval$write_1__VAL_6 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_trap_fetch or
	  MUX_near_mem$imem_req_2__VAL_5 or
	  MUX_near_mem$imem_req_1__SEL_6 or
	  WILL_FIRE_RL_rl_debug_run or MUX_near_mem$imem_req_2__VAL_7)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_c_rg_f3$write_1__SEL_1:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_1;
      MUX_imem_c_rg_f3$write_1__SEL_2:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_2;
      WILL_FIRE_RL_imem_c_rl_fetch_next_32b:
	  near_mem$imem_req_addr = MUX_imem_c_rg_tval$write_1__VAL_6;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_2;
      WILL_FIRE_RL_rl_trap_fetch:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_5;
      MUX_near_mem$imem_req_1__SEL_6:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_5;
      WILL_FIRE_RL_rl_debug_run:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_7;
      default: near_mem$imem_req_addr =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_f3 =
	     WILL_FIRE_RL_imem_c_rl_fetch_next_32b ? imem_c_rg_f3 : 3'b010 ;
  always@(MUX_imem_c_rg_f3$write_1__SEL_1 or
	  MUX_imem_c_rg_f3$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_near_mem$imem_req_1__SEL_6 or
	  WILL_FIRE_RL_rl_debug_run or
	  csr_regfile$read_mstatus or
	  WILL_FIRE_RL_rl_trap_fetch or
	  rg_mstatus_MXR or
	  WILL_FIRE_RL_imem_c_rl_fetch_next_32b or imem_c_rg_mstatus_MXR)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_c_rg_f3$write_1__SEL_1 || MUX_imem_c_rg_f3$write_1__SEL_2 ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      MUX_near_mem$imem_req_1__SEL_6 ||
      WILL_FIRE_RL_rl_debug_run:
	  near_mem$imem_req_mstatus_MXR = csr_regfile$read_mstatus[19];
      WILL_FIRE_RL_rl_trap_fetch:
	  near_mem$imem_req_mstatus_MXR = rg_mstatus_MXR;
      WILL_FIRE_RL_imem_c_rl_fetch_next_32b:
	  near_mem$imem_req_mstatus_MXR = imem_c_rg_mstatus_MXR;
      default: near_mem$imem_req_mstatus_MXR = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_priv =
	     (MUX_imem_c_rg_f3$write_1__SEL_1 ||
	      MUX_imem_c_rg_f3$write_1__SEL_2 ||
	      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	      WILL_FIRE_RL_rl_trap_fetch ||
	      MUX_near_mem$imem_req_1__SEL_6 ||
	      WILL_FIRE_RL_rl_debug_run) ?
	       rg_cur_priv :
	       imem_c_rg_priv ;
  assign near_mem$imem_req_satp =
	     WILL_FIRE_RL_imem_c_rl_fetch_next_32b ?
	       imem_c_rg_satp :
	       csr_regfile$read_satp ;
  always@(MUX_imem_c_rg_f3$write_1__SEL_1 or
	  MUX_imem_c_rg_f3$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_near_mem$imem_req_1__SEL_6 or
	  WILL_FIRE_RL_rl_debug_run or
	  csr_regfile$read_sstatus or
	  WILL_FIRE_RL_rl_trap_fetch or
	  rg_sstatus_SUM or
	  WILL_FIRE_RL_imem_c_rl_fetch_next_32b or imem_c_rg_sstatus_SUM)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_c_rg_f3$write_1__SEL_1 || MUX_imem_c_rg_f3$write_1__SEL_2 ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      MUX_near_mem$imem_req_1__SEL_6 ||
      WILL_FIRE_RL_rl_debug_run:
	  near_mem$imem_req_sstatus_SUM = csr_regfile$read_sstatus[18];
      WILL_FIRE_RL_rl_trap_fetch:
	  near_mem$imem_req_sstatus_SUM = rg_sstatus_SUM;
      WILL_FIRE_RL_imem_c_rl_fetch_next_32b:
	  near_mem$imem_req_sstatus_SUM = imem_c_rg_sstatus_SUM;
      default: near_mem$imem_req_sstatus_SUM = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign near_mem$mem_master_arready = dmem_master_arready ;
  assign near_mem$mem_master_awready = dmem_master_awready ;
  assign near_mem$mem_master_bid = dmem_master_bid ;
  assign near_mem$mem_master_bresp = dmem_master_bresp ;
  assign near_mem$mem_master_bvalid = dmem_master_bvalid ;
  assign near_mem$mem_master_rdata = dmem_master_rdata ;
  assign near_mem$mem_master_rid = dmem_master_rid ;
  assign near_mem$mem_master_rlast = dmem_master_rlast ;
  assign near_mem$mem_master_rresp = dmem_master_rresp ;
  assign near_mem$mem_master_rvalid = dmem_master_rvalid ;
  assign near_mem$mem_master_wready = dmem_master_wready ;
  assign near_mem$server_fence_request_put =
	     8'b10101010 /* unspecified value */  ;
  assign near_mem$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign near_mem$EN_server_reset_response_get =
	     WILL_FIRE_RL_rl_reset_complete ;
  assign near_mem$EN_imem_req =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     MUX_imem_c_rg_f3$write_1__SEL_2 ||
	     WILL_FIRE_RL_imem_c_rl_fetch_next_32b ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_debug_run ;
  assign near_mem$EN_dmem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1346 &&
	     (IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 ==
	      3'd1 ||
	      IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 ==
	      3'd2 ||
	      IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 ==
	      3'd4) ;
  assign near_mem$EN_server_fence_i_request_put =
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ;
  assign near_mem$EN_server_fence_i_response_get =
	     WILL_FIRE_RL_rl_BREAK_cache_flush_finish ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_server_fence_request_put = CAN_FIRE_RL_rl_stage1_FENCE ;
  assign near_mem$EN_server_fence_response_get = CAN_FIRE_RL_rl_finish_FENCE ;
  assign near_mem$EN_sfence_vma_server_request_put =
	     CAN_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign near_mem$EN_sfence_vma_server_response_get =
	     CAN_FIRE_RL_rl_finish_SFENCE_VMA ;
  assign near_mem$EN_ma_ddr4_ready = 1'b0 ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule stage1_f_reset_reqs
  assign stage1_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage1_f_reset_reqs$DEQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage1_f_reset_rsps
  assign stage1_f_reset_rsps$ENQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_rsps$DEQ = WILL_FIRE_RL_rl_reset_complete ;
  assign stage1_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_f_reset_reqs
  assign stage2_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage2_f_reset_reqs$DEQ = stage2_f_reset_reqs$EMPTY_N ;
  assign stage2_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage2_f_reset_rsps
  assign stage2_f_reset_rsps$ENQ = CAN_FIRE_RL_stage2_rl_reset_end ;
  assign stage2_f_reset_rsps$DEQ = WILL_FIRE_RL_rl_reset_complete ;
  assign stage2_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_mbox
  assign stage2_mbox$req_f3 = x_out_data_to_stage2_instr__h13709[14:12] ;
  assign stage2_mbox$req_is_OP_not_OP_32 = !_theResult____h5129[3] ;
  assign stage2_mbox$req_v1 = x_out_data_to_stage2_val1__h13713 ;
  assign stage2_mbox$req_v2 = x_out_data_to_stage2_val2__h13714 ;
  assign stage2_mbox$set_verbosity_verbosity = 4'h0 ;
  assign stage2_mbox$EN_set_verbosity = 1'b0 ;
  assign stage2_mbox$EN_req_reset = 1'b0 ;
  assign stage2_mbox$EN_rsp_reset = 1'b0 ;
  assign stage2_mbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1346 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 ==
	     3'd3 ;

  // submodule stage3_f_reset_reqs
  assign stage3_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage3_f_reset_reqs$DEQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage3_f_reset_rsps
  assign stage3_f_reset_rsps$ENQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_rsps$DEQ = WILL_FIRE_RL_rl_reset_complete ;
  assign stage3_f_reset_rsps$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1105 =
	     ((_theResult____h5129[6:0] == 7'b0010011 ||
	       _theResult____h5129[6:0] == 7'b0110011) &&
	      (_theResult____h5129[14:12] == 3'b001 ||
	       _theResult____h5129[14:12] == 3'b101)) ?
	       alu_outputs___1_val1__h14008 :
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1104 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1106 =
	     ((_theResult____h5129[6:0] == 7'b0110011 ||
	       _theResult____h5129[6:0] == 7'b0111011) &&
	      _theResult____h5129[31:25] == 7'b0000001) ?
	       rs1_val_bypassed__h5137 :
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1105 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1274 =
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801 ||
	     near_mem$imem_exc ||
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1289 =
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) &&
	     (rg_stop_req || rg_step_count) ||
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1300 =
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1289 ||
	      IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 !=
	      2'd2 &&
	      IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 !=
	      2'd0 ||
	      NOT_imem_c_rg_pc_BITS_63_TO_2_0_EQ_imem_c_rg_c_ETC___d1297 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734) &&
	     stage1_rg_full ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1427 =
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1289 ||
	      IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 !=
	      2'd2 &&
	      IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 !=
	      2'd0 ||
	      NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d1320) &&
	     stage1_rg_full ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d592 =
	     rs1_val_bypassed__h5137 == rs2_val_bypassed__h5143 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d594 =
	     (rs1_val_bypassed__h5137 ^ 64'h8000000000000000) <
	     (rs2_val_bypassed__h5143 ^ 64'h8000000000000000) ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d596 =
	     rs1_val_bypassed__h5137 < rs2_val_bypassed__h5143 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 =
	     (_theResult____h5129[6:0] == 7'b1100011) ?
	       _theResult____h5129[14:12] != 3'b0 &&
	       _theResult____h5129[14:12] != 3'b001 &&
	       _theResult____h5129[14:12] != 3'b100 &&
	       _theResult____h5129[14:12] != 3'b101 &&
	       _theResult____h5129[14:12] != 3'b110 &&
	       _theResult____h5129[14:12] != 3'b111 ||
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d603 :
	       _theResult____h5129[6:0] == 7'b1101111 ||
	       _theResult____h5129[6:0] == 7'b1100111 ||
	       (_theResult____h5129[6:0] != 7'b0110011 ||
		_theResult____h5129[31:25] != 7'b0000001) &&
	       (_theResult____h5129[6:0] != 7'b0111011 ||
		_theResult____h5129[31:25] != 7'b0000001) &&
	       (_theResult____h5129[6:0] != 7'b0010011 &&
		_theResult____h5129[6:0] != 7'b0110011 ||
		_theResult____h5129[14:12] != 3'b001 &&
		_theResult____h5129[14:12] != 3'b101) &&
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d720 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734 =
	     (_theResult____h5129[6:0] == 7'b1100011) ?
	       _theResult____h5129[14:12] != 3'b0 &&
	       _theResult____h5129[14:12] != 3'b001 &&
	       _theResult____h5129[14:12] != 3'b100 &&
	       _theResult____h5129[14:12] != 3'b101 &&
	       _theResult____h5129[14:12] != 3'b110 &&
	       _theResult____h5129[14:12] != 3'b111 ||
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d729 :
	       _theResult____h5129[6:0] != 7'b1101111 &&
	       _theResult____h5129[6:0] != 7'b1100111 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 =
	     (_theResult____h5129[6:0] == 7'b1100011) ?
	       (_theResult____h5129[14:12] == 3'b0 ||
		_theResult____h5129[14:12] == 3'b001 ||
		_theResult____h5129[14:12] == 3'b100 ||
		_theResult____h5129[14:12] == 3'b101 ||
		_theResult____h5129[14:12] == 3'b110 ||
		_theResult____h5129[14:12] == 3'b111) &&
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d729 :
	       _theResult____h5129[6:0] != 7'b1101111 &&
	       _theResult____h5129[6:0] != 7'b1100111 &&
	       (IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d751 ||
		IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d796) ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801 =
	     (_theResult____h5129[6:0] == 7'b1100011) ?
	       (_theResult____h5129[14:12] == 3'b0 ||
		_theResult____h5129[14:12] == 3'b001 ||
		_theResult____h5129[14:12] == 3'b100 ||
		_theResult____h5129[14:12] == 3'b101 ||
		_theResult____h5129[14:12] == 3'b110 ||
		_theResult____h5129[14:12] == 3'b111) &&
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d603 :
	       _theResult____h5129[6:0] == 7'b1101111 ||
	       _theResult____h5129[6:0] == 7'b1100111 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d853 =
	     IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d826 ?
	       4'd6 :
	       ((_theResult____h5129[11:7] == 5'd0 &&
		 _theResult____h5129[19:15] == 5'd0) ?
		  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d851 :
		  4'd11) ;
  assign IF_NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_N_ETC___d808 =
	     NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d639 ?
	       4'd11 :
	       4'd0 ;
  assign IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_ime_ETC___d259 =
	     (imem_c_rg_pc[1:0] != 2'b0 &&
	      imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_imem_p_ETC___d254) ?
	       { 16'b0,
		 IF_imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_ime_ETC___d257 } :
	       near_mem$imem_instr ;
  assign IF_NOT_near_mem_dmem_valid__22_41_OR_NOT_near__ETC___d187 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       ((stage2_rg_stage2[196:192] == 5'd0) ? 2'd0 : 2'd1) :
	       2'd0 ;
  assign IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 =
	     near_mem$imem_exc ?
	       4'd11 :
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d872 ;
  assign IF_csr_regfile_read_csr_rg_trap_instr_471_BITS_ETC___d1512 =
	     csr_regfile$read_csr[63:0] | rs1_val__h22101 ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d500 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b0 &&
	      instr__h5127[15:13] == 3'b011) ?
	       instr__h13297 :
	       ((csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b0 &&
		 instr__h5127[15:13] == 3'b111) ?
		  instr__h13448 :
		  32'h0) ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d501 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b10 &&
	      instr__h5127[15:13] == 3'b111) ?
	       instr__h13098 :
	       IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d500 ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d503 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b10 &&
	      instr__h5127[15:12] == 4'b1001 &&
	      instr__h5127[11:7] == 5'd0 &&
	      instr__h5127[6:2] == 5'd0) ?
	       instr__h12849 :
	       ((csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b10 &&
		 instr__h5127[11:7] != 5'd0 &&
		 instr__h5127[15:13] == 3'b011) ?
		  instr__h12945 :
		  IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d501) ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d505 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b01 &&
	      instr__h5127[15:10] == 6'b100111 &&
	      instr__h5127[6:5] == 2'b01) ?
	       instr__h12553 :
	       ((csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b01 &&
		 instr__h5127[15:10] == 6'b100111 &&
		 instr__h5127[6:5] == 2'b0) ?
		  instr__h12691 :
		  IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d503) ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d507 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b01 &&
	      instr__h5127[15:10] == 6'b100011 &&
	      instr__h5127[6:5] == 2'b01) ?
	       instr__h12279 :
	       ((csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b01 &&
		 instr__h5127[15:10] == 6'b100011 &&
		 instr__h5127[6:5] == 2'b0) ?
		  instr__h12415 :
		  IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d505) ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d509 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b01 &&
	      instr__h5127[15:10] == 6'b100011 &&
	      instr__h5127[6:5] == 2'b11) ?
	       instr__h12007 :
	       ((csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b01 &&
		 instr__h5127[15:10] == 6'b100011 &&
		 instr__h5127[6:5] == 2'b10) ?
		  instr__h12143 :
		  IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d507) ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d510 =
	     (csr_regfile_read_misa__9_BIT_2_39_AND_IF_NOT_i_ETC___d342 &&
	      instr__h5127[6:2] != 5'd0) ?
	       instr__h11912 :
	       IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d509 ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d511 =
	     (csr_regfile_read_misa__9_BIT_2_39_AND_IF_NOT_i_ETC___d336 &&
	      instr__h5127[6:2] != 5'd0) ?
	       instr__h11793 :
	       IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d510 ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d513 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b01 &&
	      instr__h5127[15:13] == 3'b100 &&
	      instr__h5127[11:10] == 2'b01 &&
	      imm6__h9906 != 6'd0) ?
	       instr__h11498 :
	       ((csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b01 &&
		 instr__h5127[15:13] == 3'b100 &&
		 instr__h5127[11:10] == 2'b10) ?
		  instr__h11615 :
		  IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d511) ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d514 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b01 &&
	      instr__h5127[15:13] == 3'b100 &&
	      instr__h5127[11:10] == 2'b0 &&
	      imm6__h9906 != 6'd0) ?
	       instr__h11309 :
	       IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d513 ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d515 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b10 &&
	      instr__h5127[15:13] == 3'b0 &&
	      instr__h5127[11:7] != 5'd0 &&
	      imm6__h9906 != 6'd0) ?
	       instr__h11120 :
	       IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d514 ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d517 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b01 &&
	      instr__h5127[15:13] == 3'b011 &&
	      instr__h5127[11:7] == 5'd2 &&
	      nzimm10__h10575 != 10'd0) ?
	       instr__h10779 :
	       ((csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b0 &&
		 instr__h5127[15:13] == 3'b0 &&
		 nzimm10__h10790 != 10'd0) ?
		  instr__h10951 :
		  IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d515) ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d519 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b01 &&
	      instr__h5127[15:13] == 3'b0 &&
	      instr__h5127[11:7] != 5'd0 &&
	      imm6__h9906 != 6'd0 ||
	      csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b01 &&
	      instr__h5127[15:13] == 3'b0 &&
	      instr__h5127[11:7] == 5'd0 &&
	      imm6__h9906 == 6'd0) ?
	       instr__h10297 :
	       ((csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b01 &&
		 instr__h5127[15:13] == 3'b001 &&
		 instr__h5127[11:7] != 5'd0) ?
		  instr__h10524 :
		  IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d517) ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d520 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b01 &&
	      instr__h5127[15:13] == 3'b011 &&
	      instr__h5127[11:7] != 5'd0 &&
	      instr__h5127[11:7] != 5'd2 &&
	      imm6__h9906 != 6'd0) ?
	       instr__h10168 :
	       IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d519 ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d522 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b01 &&
	      instr__h5127[15:13] == 3'b111) ?
	       instr__h9646 :
	       ((csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b01 &&
		 instr__h5127[15:13] == 3'b010 &&
		 instr__h5127[11:7] != 5'd0) ?
		  instr__h9984 :
		  IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d520) ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d523 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b01 &&
	      instr__h5127[15:13] == 3'b110) ?
	       instr__h9329 :
	       IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d522 ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d524 =
	     (csr_regfile_read_misa__9_BIT_2_39_AND_IF_NOT_i_ETC___d342 &&
	      instr__h5127[6:2] == 5'd0) ?
	       instr__h9264 :
	       IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d523 ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d525 =
	     (csr_regfile_read_misa__9_BIT_2_39_AND_IF_NOT_i_ETC___d336 &&
	      instr__h5127[6:2] == 5'd0) ?
	       instr__h9148 :
	       IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d524 ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d526 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b01 &&
	      instr__h5127[15:13] == 3'b101) ?
	       instr__h8694 :
	       IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d525 ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d527 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b0 &&
	      instr__h5127[15:13] == 3'b110) ?
	       instr__h8465 :
	       IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d526 ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d528 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b0 &&
	      instr__h5127[15:13] == 3'b010) ?
	       instr__h8270 :
	       IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d527 ;
  assign IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d529 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b10 &&
	      instr__h5127[15:13] == 3'b110) ?
	       instr__h8078 :
	       IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d528 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c__ETC___d260 =
	     (imem_c_rg_pc[1:0] == 2'b0 &&
	      imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_imem_p_ETC___d13 &&
	      near_mem$imem_instr[1:0] != 2'b11) ?
	       instr_out___1__h7801 :
	       IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_ime_ETC___d259 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1003 =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d229 ?
	       next_pc___1__h15710 :
	       next_pc__h15708 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d751 =
	     _theResult____h5129[6:0] == 7'b0110011 &&
	     _theResult____h5129[31:25] == 7'b0000001 ||
	     _theResult____h5129[6:0] == 7'b0111011 &&
	     _theResult____h5129[31:25] == 7'b0000001 ||
	     (_theResult____h5129[6:0] == 7'b0010011 ||
	      _theResult____h5129[6:0] == 7'b0110011) &&
	     (_theResult____h5129[14:12] == 3'b001 ||
	      _theResult____h5129[14:12] == 3'b101) ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d758 =
	     _theResult____h5129[14:12] == 3'b0 &&
	     (_theResult____h5129[6:0] != 7'b0110011 ||
	      !_theResult____h5129[30]) ||
	     _theResult____h5129[14:12] == 3'b0 &&
	     _theResult____h5129[6:0] == 7'b0110011 &&
	     _theResult____h5129[30] ||
	     _theResult____h5129[14:12] == 3'b010 ||
	     _theResult____h5129[14:12] == 3'b011 ||
	     _theResult____h5129[14:12] == 3'b100 ||
	     _theResult____h5129[14:12] == 3'b110 ||
	     _theResult____h5129[14:12] == 3'b111 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d826 =
	     _theResult____h5129[11:7] == 5'd0 &&
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[20]) &&
	     _theResult____h5129[31:25] == 7'b0001001 ;
  assign IF_imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_ime_ETC___d257 =
	     imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_imem_p_ETC___d13 ?
	       near_mem$imem_instr[31:16] :
	       (imem_c_rg_cache_b16[16] ? imem_c_rg_cache_b16[15:0] : 16'd0) ;
  assign IF_near_mem_dmem_valid__22_THEN_IF_near_mem_dm_ETC___d125 =
	     near_mem$dmem_valid ? (near_mem$dmem_exc ? 2'd3 : 2'd2) : 2'd1 ;
  assign IF_near_mem_imem_exc__54_THEN_near_mem_imem_ex_ETC___d1456 =
	     near_mem$imem_exc ?
	       { near_mem$imem_exc_code, imem_c_rg_tval } :
	       { alu_outputs_exc_code__h14472, trap_info_tval__h15551 } ;
  assign IF_rg_cur_priv_2_EQ_0b11_19_OR_rg_cur_priv_2_E_ETC___d849 =
	     ((rg_cur_priv == 2'b11 ||
	       rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[22]) &&
	      _theResult____h5129[31:20] == 12'b000100000010) ?
	       4'd8 :
	       (rg_cur_priv_2_EQ_0b11_19_OR_rg_cur_priv_2_EQ_0_ETC___d847 ?
		  4'd10 :
		  4'd11) ;
  assign IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q1 :
	       2'd0 ;
  assign IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d191 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q2 :
	       2'd0 ;
  assign IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d533 =
	     x_out_bypass_rd__h7470 == _theResult____h5129[19:15] ;
  assign IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d535 =
	     x_out_bypass_rd__h7470 == _theResult____h5129[24:20] ;
  assign IF_stage2_rg_stage2_01_BITS_199_TO_197_02_EQ_3_ETC___d128 =
	     stage2_mbox$valid ? 2'd2 : 2'd1 ;
  assign NOT_IF_NOT_stage1_rg_full_03_04_OR_NOT_near_me_ETC___d1409 =
	     x_out_next_pc__h13678[1:0] != 2'b0 && near_mem$imem_valid &&
	     addr_of_b32__h20141 == near_mem$imem_pc &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44 =
	     cur_verbosity__h3678 > 4'd1 ;
  assign NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d639 =
	     (_theResult____h5129[14:12] != 3'b0 ||
	      _theResult____h5129[6:0] == 7'b0110011 &&
	      _theResult____h5129[30]) &&
	     (_theResult____h5129[14:12] != 3'b0 ||
	      _theResult____h5129[6:0] != 7'b0110011 ||
	      !_theResult____h5129[30]) &&
	     _theResult____h5129[14:12] != 3'b010 &&
	     _theResult____h5129[14:12] != 3'b011 &&
	     _theResult____h5129[14:12] != 3'b100 &&
	     _theResult____h5129[14:12] != 3'b110 &&
	     _theResult____h5129[14:12] != 3'b111 ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1342 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     near_mem$imem_exc ||
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734 ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1376 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d1320) &&
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d1308) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1393 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     (!stage1_rg_full ||
	      imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d1387) &&
	     (!stage1_rg_full ||
	      imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d1389) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1440 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     !near_mem$imem_exc &&
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) ;
  assign NOT_csr_regfile_read_dpc__614_BITS_1_TO_0_615__ETC___d1623 =
	     csr_regfile$read_dpc[1:0] != 2'b0 && near_mem$imem_valid &&
	     addr_of_b32__h29253 == near_mem$imem_pc &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d1395 =
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d547 &&
	     (IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d191 !=
	      2'd1 ||
	      !IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d533 &&
	      !IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d535) ;
  assign NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d243 =
	     imem_c_rg_pc[1:0] != 2'b0 &&
	     imem_c_rg_pc_BITS_63_TO_2_0_EQ_imem_c_rg_cache_ETC___d208 &&
	     near_mem_imem_pc__1_EQ_imem_c_rg_pc_PLUS_2_11___d212 &&
	     imem_c_rg_cache_b16[16] &&
	     imem_c_rg_cache_b16[1:0] == 2'b11 ;
  assign NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d545 =
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d243 ||
	     imem_c_rg_pc[1:0] == 2'b0 &&
	     imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_imem_p_ETC___d13 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d547 =
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d545 ||
	     imem_c_rg_pc[1:0] != 2'b0 &&
	     imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_imem_p_ETC___d254 ||
	     imem_c_rg_pc[1:0] == 2'b0 &&
	     imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_imem_p_ETC___d13 &&
	     near_mem$imem_instr[1:0] != 2'b11 ;
  assign NOT_imem_c_rg_pc_BITS_63_TO_2_0_EQ_imem_c_rg_c_ETC___d1297 =
	     (!imem_c_rg_pc_BITS_63_TO_2_0_EQ_imem_c_rg_cache_ETC___d208 ||
	      !near_mem_imem_pc__1_EQ_imem_c_rg_pc_PLUS_2_11___d212 ||
	      !imem_c_rg_cache_b16[16] ||
	      imem_c_rg_cache_b16[1:0] != 2'b11) &&
	     (!imem_c_rg_pc_BITS_63_TO_2_0_EQ_imem_c_rg_cache_ETC___d208 ||
	      !imem_c_rg_cache_b16[16] ||
	      imem_c_rg_cache_b16[1:0] == 2'b11) ||
	     IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d191 ==
	     2'd1 &&
	     (IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d533 ||
	      IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d535) ;
  assign NOT_near_mem_imem_exc__54_39_AND_IF_IF_imem_c__ETC___d1439 =
	     !near_mem$imem_exc &&
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) ||
	     !rg_stop_req && !rg_step_count ;
  assign NOT_near_mem_imem_exc__54_39_AND_IF_IF_imem_c__ETC___d940 =
	     !near_mem$imem_exc &&
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd1 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd2 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd3 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd4 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd5 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd6 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd7 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd8 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd9 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd10 ;
  assign NOT_near_mem_imem_exc__54_39_AND_IF_IF_imem_c__ETC___d981 =
	     !near_mem$imem_exc &&
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 !=
	     3'd0 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 !=
	     3'd1 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 !=
	     3'd2 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 !=
	     3'd3 ;
  assign NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d1308 =
	     NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538 ||
	     !near_mem$imem_exc &&
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) ;
  assign NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d1320 =
	     NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538 ||
	     near_mem$imem_exc ||
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734 ;
  assign NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538 =
	     !near_mem$imem_valid ||
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d237 ||
	     IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d191 ==
	     2'd1 &&
	     (IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d533 ||
	      IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d535) ;
  assign NOT_rg_next_pc_539_BITS_1_TO_0_540_EQ_0b0_541__ETC___d1548 =
	     rg_next_pc[1:0] != 2'b0 && near_mem$imem_valid &&
	     addr_of_b32__h27521 == near_mem$imem_pc &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign NOT_rg_stop_req_277_313_AND_NOT_rg_step_count__ETC___d1323 =
	     !rg_stop_req && !rg_step_count &&
	     !csr_regfile$interrupt_pending[4] &&
	     !csr_regfile$nmi_pending ||
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d1320) &&
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d1308) ;
  assign NOT_soc_map_m_pc_reset_value__252_BITS_1_TO_0__ETC___d1265 =
	     soc_map$m_pc_reset_value[1:0] != 2'b0 && near_mem$imem_valid &&
	     addr_of_b32__h18314 == near_mem$imem_pc &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign NOT_stage1_rg_full_03_04_OR_NOT_near_mem_imem__ETC___d1375 =
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d1320) &&
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d1308) ||
	     !rg_stop_req && !rg_step_count ;
  assign NOT_stage1_rg_full_03_04_OR_NOT_near_mem_imem__ETC___d1412 =
	     NOT_stage1_rg_full_03_04_OR_NOT_near_mem_imem__ETC___d1375 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1376 &&
	     (near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1378 ||
	      !stage1_rg_full) &&
	     NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44 ;
  assign NOT_stage1_rg_full_03_04_OR_imem_c_rg_pc_BITS__ETC___d1392 =
	     (!stage1_rg_full ||
	      imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d1387) &&
	     (!stage1_rg_full ||
	      imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d1389) ||
	     !rg_stop_req && !rg_step_count ;
  assign NOT_stage1_rg_full_03_04_OR_imem_c_rg_pc_BITS__ETC___d1400 =
	     NOT_stage1_rg_full_03_04_OR_imem_c_rg_pc_BITS__ETC___d1392 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1393 &&
	     (near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1397 ||
	      !stage1_rg_full) &&
	     near_mem$imem_valid ;
  assign SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d326 =
	     { {9{offset__h8641[11]}}, offset__h8641 } ;
  assign SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d351 =
	     { {4{offset__h9273[8]}}, offset__h9273 } ;
  assign SEXT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ETC___d1012 =
	     { {52{theResult__129_BITS_31_TO_20__q19[11]}},
	       theResult__129_BITS_31_TO_20__q19 } ;
  assign _0_OR_0_OR_near_mem_imem_exc__54_OR_IF_IF_imem__ETC___d1415 =
	     near_mem$imem_exc ||
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734 ;
  assign _0_OR_0_OR_near_mem_imem_exc__54_OR_IF_IF_imem__ETC___d1418 =
	     (_0_OR_0_OR_near_mem_imem_exc__54_OR_IF_IF_imem__ETC___d1415 ||
	      !rg_stop_req && !rg_step_count) &&
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      _0_OR_0_OR_near_mem_imem_exc__54_OR_IF_IF_imem__ETC___d1415) ;
  assign _0_OR_0_OR_near_mem_imem_exc__54_OR_IF_IF_imem__ETC___d1423 =
	     _0_OR_0_OR_near_mem_imem_exc__54_OR_IF_IF_imem__ETC___d1418 &&
	     (IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	      2'd2 ||
	      IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	      2'd0) &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804 ||
	     !stage1_rg_full ;
  assign _theResult_____1_fst__h14888 =
	     (_theResult____h5129[14:12] == 3'b0 &&
	      _theResult____h5129[6:0] == 7'b0110011 &&
	      _theResult____h5129[30]) ?
	       rd_val___1__h14884 :
	       _theResult_____1_fst__h14895 ;
  assign _theResult_____1_fst__h14923 =
	     rs1_val_bypassed__h5137 & _theResult___snd__h16288 ;
  assign _theResult____h28521 =
	     (delta_CPI_instrs__h28520 == 64'd0) ?
	       delta_CPI_instrs___1__h28556 :
	       delta_CPI_instrs__h28520 ;
  assign _theResult____h5129 =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d229 ?
	       instr___1__h7628 :
	       instr__h5127 ;
  assign _theResult___fst__h14993 =
	     (_theResult____h5129[14:12] == 3'b001 &&
	      !_theResult____h5129[25]) ?
	       rd_val___1__h16348 :
	       _theResult___fst__h15000 ;
  assign _theResult___fst__h15000 =
	     _theResult____h5129[30] ?
	       rd_val___1__h16431 :
	       rd_val___1__h16402 ;
  assign _theResult___fst__h15100 =
	     { {32{rs1_val_bypassed137_BITS_31_TO_0_SRL_rs2_val_b_ETC__q7[31]}},
	       rs1_val_bypassed137_BITS_31_TO_0_SRL_rs2_val_b_ETC__q7 } ;
  assign _theResult___snd__h16288 =
	     (_theResult____h5129[6:0] == 7'b0010011) ?
	       SEXT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ETC___d1012 :
	       rs2_val_bypassed__h5143 ;
  assign addr_of_b32___1__h18426 = addr_of_b32__h18314 + 64'd4 ;
  assign addr_of_b32___1__h20253 = addr_of_b32__h20141 + 64'd4 ;
  assign addr_of_b32___1__h27633 = addr_of_b32__h27521 + 64'd4 ;
  assign addr_of_b32___1__h29365 = addr_of_b32__h29253 + 64'd4 ;
  assign addr_of_b32__h18314 = { soc_map$m_pc_reset_value[63:2], 2'd0 } ;
  assign addr_of_b32__h20141 = { x_out_next_pc__h13678[63:2], 2'd0 } ;
  assign addr_of_b32__h27521 = { rg_next_pc[63:2], 2'd0 } ;
  assign addr_of_b32__h29253 = { csr_regfile$read_dpc[63:2], 2'd0 } ;
  assign alu_outputs___1_addr__h13851 =
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d603 ?
	       branch_target__h13828 :
	       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1003 ;
  assign alu_outputs___1_addr__h13872 =
	     imem_c_rg_pc +
	     { {43{theResult__129_BIT_31_CONCAT_theResult__129_BI_ETC__q4[20]}},
	       theResult__129_BIT_31_CONCAT_theResult__129_BI_ETC__q4 } ;
  assign alu_outputs___1_addr__h13898 = { eaddr__h14123[63:1], 1'd0 } ;
  assign alu_outputs___1_addr__h14153 =
	     rs1_val_bypassed__h5137 +
	     { {52{theResult__129_BITS_31_TO_25_CONCAT_theResult__ETC__q5[11]}},
	       theResult__129_BITS_31_TO_25_CONCAT_theResult__ETC__q5 } ;
  assign alu_outputs___1_exc_code__h14428 =
	     (_theResult____h5129[14:12] == 3'b0) ?
	       (IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d826 ?
		  4'd2 :
		  ((_theResult____h5129[11:7] == 5'd0 &&
		    _theResult____h5129[19:15] == 5'd0) ?
		     CASE_theResult__129_BITS_31_TO_20_0b0_CASE_rg__ETC__q13 :
		     4'd2)) :
	       4'd2 ;
  assign alu_outputs___1_val1__h14008 =
	     (_theResult____h5129[14:12] == 3'b001) ?
	       rd_val__h16184 :
	       (_theResult____h5129[30] ? rd_val__h16258 : rd_val__h16236) ;
  assign alu_outputs___1_val1__h14044 =
	     (_theResult____h5129[14:12] == 3'b0 &&
	      (_theResult____h5129[6:0] != 7'b0110011 ||
	       !_theResult____h5129[30])) ?
	       rd_val___1__h14876 :
	       _theResult_____1_fst__h14888 ;
  assign alu_outputs___1_val1__h14065 =
	     (_theResult____h5129[14:12] == 3'b0) ?
	       rd_val___1__h16317 :
	       _theResult___fst__h14993 ;
  assign alu_outputs___1_val1__h14432 =
	     _theResult____h5129[14] ?
	       { 59'd0, _theResult____h5129[19:15] } :
	       rs1_val_bypassed__h5137 ;
  assign alu_outputs___1_val1__h14452 =
	     { 57'd0, _theResult____h5129[31:25] } ;
  assign branch_target__h13828 =
	     imem_c_rg_pc +
	     { {51{theResult__129_BIT_31_CONCAT_theResult__129_BI_ETC__q3[12]}},
	       theResult__129_BIT_31_CONCAT_theResult__129_BI_ETC__q3 } ;
  assign cpi__h28523 = x__h28522 / 64'd10 ;
  assign cpifrac__h28524 = x__h28522 % 64'd10 ;
  assign csr_regfile_RDY_server_reset_response_get__231_ETC___d1246 =
	     csr_regfile$RDY_server_reset_response_get &&
	     stage1_f_reset_rsps$EMPTY_N &&
	     stage2_f_reset_rsps$EMPTY_N &&
	     stage3_f_reset_rsps$EMPTY_N &&
	     f_reset_rsps$FULL_N &&
	     (!rg_run_on_reset ||
	      imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1240) ;
  assign csr_regfile_interrupt_pending_rg_cur_priv_2_28_ETC___d1285 =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     stage1_rg_full &&
	     imem_c_rg_pc_BITS_63_TO_2_0_EQ_imem_c_rg_cache_ETC___d1273 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1274 ;
  assign csr_regfile_read_csr_mcycle__1_MINUS_rg_start__ETC___d1597 =
	     delta_CPI_cycles__h28519 * 64'd10 ;
  assign csr_regfile_read_misa__9_BIT_2_39_AND_IF_NOT_i_ETC___d336 =
	     csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b10 &&
	     instr__h5127[15:12] == 4'b1000 &&
	     instr__h5127[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__9_BIT_2_39_AND_IF_NOT_i_ETC___d342 =
	     csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b10 &&
	     instr__h5127[15:12] == 4'b1001 &&
	     instr__h5127[11:7] != 5'd0 ;
  assign cur_verbosity__h3678 =
	     (csr_regfile$read_csr_minstret < cfg_logdelay) ?
	       4'd0 :
	       cfg_verbosity ;
  assign data_to_stage2_addr__h13704 = x_out_data_to_stage2_addr__h13712 ;
  assign delta_CPI_cycles__h28519 =
	     csr_regfile$read_csr_mcycle - rg_start_CPI_cycles ;
  assign delta_CPI_instrs___1__h28556 = delta_CPI_instrs__h28520 + 64'd1 ;
  assign delta_CPI_instrs__h28520 =
	     csr_regfile$read_csr_minstret - rg_start_CPI_instrs ;
  assign eaddr4123_BITS_31_TO_0__q20 = eaddr__h14123[31:0] ;
  assign eaddr__h14123 =
	     rs1_val_bypassed__h5137 +
	     SEXT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ETC___d1012 ;
  assign fall_through_pc__h13664 =
	     imem_c_rg_pc +
	     (NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d545 ?
		64'd4 :
		64'd2) ;
  assign funct10__h14074 =
	     { _theResult____h5129[31:25], _theResult____h5129[14:12] } ;
  assign gpr_regfile_RDY_server_reset_request_put__207__ETC___d1219 =
	     gpr_regfile$RDY_server_reset_request_put &&
	     near_mem$RDY_server_reset_request_put &&
	     csr_regfile$RDY_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     stage1_f_reset_reqs$FULL_N &&
	     stage2_f_reset_reqs$FULL_N &&
	     stage3_f_reset_reqs$FULL_N ;
  assign imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d1386 =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d237 ||
	     IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d191 ==
	     2'd1 &&
	     (IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d533 ||
	      IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d535) ;
  assign imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d1387 =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d1386 ||
	     near_mem$imem_exc ||
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734 ;
  assign imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d1389 =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d1386 ||
	     !near_mem$imem_exc &&
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) ;
  assign imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d229 =
	     (imem_c_rg_pc[1:0] == 2'b0 ||
	      !imem_c_rg_pc_BITS_63_TO_2_0_EQ_imem_c_rg_cache_ETC___d208 ||
	      !near_mem_imem_pc__1_EQ_imem_c_rg_pc_PLUS_2_11___d212 ||
	      !imem_c_rg_cache_b16[16] ||
	      imem_c_rg_cache_b16[1:0] != 2'b11) &&
	     (imem_c_rg_pc[1:0] != 2'b0 ||
	      !imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_imem_p_ETC___d13 ||
	      near_mem$imem_instr[1:0] != 2'b11) ;
  assign imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d237 =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d229 &&
	     (imem_c_rg_pc[1:0] == 2'b0 ||
	      (!imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_imem_p_ETC___d13 ||
	       near_mem$imem_instr[17:16] == 2'b11) &&
	      (!imem_c_rg_pc_BITS_63_TO_2_0_EQ_imem_c_rg_cache_ETC___d208 ||
	       !imem_c_rg_cache_b16[16] ||
	       imem_c_rg_cache_b16[1:0] == 2'b11)) &&
	     (imem_c_rg_pc[1:0] != 2'b0 ||
	      !imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_imem_p_ETC___d13 ||
	      near_mem$imem_instr[1:0] == 2'b11) ;
  assign imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1240 =
	     imem_c_rg_pc[1:0] == 2'b0 || !near_mem$imem_valid ||
	     !imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_imem_p_ETC___d13 ||
	     near_mem$imem_instr[17:16] != 2'b11 ;
  assign imem_c_rg_pc_BITS_63_TO_2_0_EQ_imem_c_rg_cache_ETC___d1273 =
	     imem_c_rg_pc_BITS_63_TO_2_0_EQ_imem_c_rg_cache_ETC___d208 &&
	     (near_mem_imem_pc__1_EQ_imem_c_rg_pc_PLUS_2_11___d212 &&
	      imem_c_rg_cache_b16[16] &&
	      imem_c_rg_cache_b16[1:0] == 2'b11 ||
	      imem_c_rg_cache_b16[16] && imem_c_rg_cache_b16[1:0] != 2'b11) &&
	     (IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d191 !=
	      2'd1 ||
	      !IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d533 &&
	      !IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d535) ;
  assign imem_c_rg_pc_BITS_63_TO_2_0_EQ_imem_c_rg_cache_ETC___d208 =
	     imem_c_rg_pc[63:2] == imem_c_rg_cache_addr[63:2] ;
  assign imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_imem_p_ETC___d13 =
	     imem_c_rg_pc[63:2] == near_mem$imem_pc[63:2] ;
  assign imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_imem_p_ETC___d254 =
	     imem_c_rg_pc_BITS_63_TO_2_0_EQ_near_mem_imem_p_ETC___d13 &&
	     near_mem$imem_instr[17:16] != 2'b11 ||
	     imem_c_rg_pc_BITS_63_TO_2_0_EQ_imem_c_rg_cache_ETC___d208 &&
	     imem_c_rg_cache_b16[16] &&
	     imem_c_rg_cache_b16[1:0] != 2'b11 ;
  assign imm12__h10577 = { {2{nzimm10__h10575[9]}}, nzimm10__h10575 } ;
  assign imm12__h10792 = { 2'd0, nzimm10__h10790 } ;
  assign imm12__h10988 = { 6'b0, imm6__h9906 } ;
  assign imm12__h11325 = { 6'b010000, imm6__h9906 } ;
  assign imm12__h12946 = { 3'd0, offset__h12860 } ;
  assign imm12__h13298 = { 4'd0, offset__h13232 } ;
  assign imm12__h7934 = { 4'd0, offset__h7670 } ;
  assign imm12__h8271 = { 5'd0, offset__h8213 } ;
  assign imm12__h9908 = { {6{imm6__h9906[5]}}, imm6__h9906 } ;
  assign imm20__h10036 = { {14{imm6__h9906[5]}}, imm6__h9906 } ;
  assign imm6__h9906 = { instr__h5127[12], instr__h5127[6:2] } ;
  assign instr___1__h7628 =
	     (csr_regfile$read_misa[2] && instr__h5127[1:0] == 2'b10 &&
	      instr__h5127[11:7] != 5'd0 &&
	      instr__h5127[15:13] == 3'b010) ?
	       instr__h7933 :
	       IF_csr_regfile_read_misa__9_BIT_2_39_AND_IF_NO_ETC___d529 ;
  assign instr__h10168 = { imm20__h10036, instr__h5127[11:7], 7'b0110111 } ;
  assign instr__h10297 =
	     { imm12__h9908,
	       instr__h5127[11:7],
	       3'b0,
	       instr__h5127[11:7],
	       7'b0010011 } ;
  assign instr__h10524 =
	     { imm12__h9908,
	       instr__h5127[11:7],
	       3'b0,
	       instr__h5127[11:7],
	       7'b0011011 } ;
  assign instr__h10779 =
	     { imm12__h10577,
	       instr__h5127[11:7],
	       3'b0,
	       instr__h5127[11:7],
	       7'b0010011 } ;
  assign instr__h10951 = { imm12__h10792, 8'd16, rd__h8273, 7'b0010011 } ;
  assign instr__h11120 =
	     { imm12__h10988,
	       instr__h5127[11:7],
	       3'b001,
	       instr__h5127[11:7],
	       7'b0010011 } ;
  assign instr__h11309 =
	     { imm12__h10988, rs1__h8272, 3'b101, rs1__h8272, 7'b0010011 } ;
  assign instr__h11498 =
	     { imm12__h11325, rs1__h8272, 3'b101, rs1__h8272, 7'b0010011 } ;
  assign instr__h11615 =
	     { imm12__h9908, rs1__h8272, 3'b111, rs1__h8272, 7'b0010011 } ;
  assign instr__h11793 =
	     { 7'b0,
	       instr__h5127[6:2],
	       8'd0,
	       instr__h5127[11:7],
	       7'b0110011 } ;
  assign instr__h11912 =
	     { 7'b0,
	       instr__h5127[6:2],
	       instr__h5127[11:7],
	       3'b0,
	       instr__h5127[11:7],
	       7'b0110011 } ;
  assign instr__h12007 =
	     { 7'b0, rd__h8273, rs1__h8272, 3'b111, rs1__h8272, 7'b0110011 } ;
  assign instr__h12143 =
	     { 7'b0, rd__h8273, rs1__h8272, 3'b110, rs1__h8272, 7'b0110011 } ;
  assign instr__h12279 =
	     { 7'b0, rd__h8273, rs1__h8272, 3'b100, rs1__h8272, 7'b0110011 } ;
  assign instr__h12415 =
	     { 7'b0100000,
	       rd__h8273,
	       rs1__h8272,
	       3'b0,
	       rs1__h8272,
	       7'b0110011 } ;
  assign instr__h12553 =
	     { 7'b0, rd__h8273, rs1__h8272, 3'b0, rs1__h8272, 7'b0111011 } ;
  assign instr__h12691 =
	     { 7'b0100000,
	       rd__h8273,
	       rs1__h8272,
	       3'b0,
	       rs1__h8272,
	       7'b0111011 } ;
  assign instr__h12849 =
	     { 12'b000000000001,
	       instr__h5127[11:7],
	       3'b0,
	       instr__h5127[11:7],
	       7'b1110011 } ;
  assign instr__h12945 =
	     { imm12__h12946, 8'd19, instr__h5127[11:7], 7'b0000011 } ;
  assign instr__h13098 =
	     { 3'd0,
	       instr__h5127[9:7],
	       instr__h5127[12],
	       instr__h5127[6:2],
	       8'd19,
	       offset_BITS_4_TO_0___h13573,
	       7'b0100011 } ;
  assign instr__h13297 =
	     { imm12__h13298, rs1__h8272, 3'b011, rd__h8273, 7'b0000011 } ;
  assign instr__h13448 =
	     { 4'd0,
	       instr__h5127[6:5],
	       instr__h5127[12],
	       rd__h8273,
	       rs1__h8272,
	       3'b011,
	       offset_BITS_4_TO_0___h13573,
	       7'b0100011 } ;
  assign instr__h5127 =
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d243 ?
	       instr_out___1__h7770 :
	       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c__ETC___d260 ;
  assign instr__h7933 =
	     { imm12__h7934, 8'd18, instr__h5127[11:7], 7'b0000011 } ;
  assign instr__h8078 =
	     { 4'd0,
	       instr__h5127[8:7],
	       instr__h5127[12],
	       instr__h5127[6:2],
	       8'd18,
	       offset_BITS_4_TO_0___h8202,
	       7'b0100011 } ;
  assign instr__h8270 =
	     { imm12__h8271, rs1__h8272, 3'b010, rd__h8273, 7'b0000011 } ;
  assign instr__h8465 =
	     { 5'd0,
	       instr__h5127[5],
	       instr__h5127[12],
	       rd__h8273,
	       rs1__h8272,
	       3'b010,
	       offset_BITS_4_TO_0___h8633,
	       7'b0100011 } ;
  assign instr__h8694 =
	     { SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d326[20],
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d326[10:1],
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d326[11],
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d326[19:12],
	       12'd111 } ;
  assign instr__h9148 = { 12'd0, instr__h5127[11:7], 15'd103 } ;
  assign instr__h9264 = { 12'd0, instr__h5127[11:7], 15'd231 } ;
  assign instr__h9329 =
	     { SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d351[12],
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d351[10:5],
	       5'd0,
	       rs1__h8272,
	       3'b0,
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d351[4:1],
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d351[11],
	       7'b1100011 } ;
  assign instr__h9646 =
	     { SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d351[12],
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d351[10:5],
	       5'd0,
	       rs1__h8272,
	       3'b001,
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d351[4:1],
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d351[11],
	       7'b1100011 } ;
  assign instr__h9984 =
	     { imm12__h9908, 8'd0, instr__h5127[11:7], 7'b0010011 } ;
  assign instr_out___1__h7770 =
	     { near_mem$imem_instr[15:0], imem_c_rg_cache_b16[15:0] } ;
  assign instr_out___1__h7801 = { 16'b0, near_mem$imem_instr[15:0] } ;
  assign near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1117 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734) &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	     4'd0 ;
  assign near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1120 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734) &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	     4'd1 ;
  assign near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1123 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734) &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	     4'd2 ;
  assign near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1126 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734) &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	     4'd3 ;
  assign near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1129 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734) &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	     4'd4 ;
  assign near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1132 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734) &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	     4'd5 ;
  assign near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1135 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734) &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	     4'd6 ;
  assign near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1138 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734) &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	     4'd7 ;
  assign near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1141 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734) &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	     4'd8 ;
  assign near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1144 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734) &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	     4'd9 ;
  assign near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1147 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734) &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	     4'd10 ;
  assign near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1150 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734) &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd1 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd2 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd3 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd4 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd5 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd6 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd7 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd8 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd9 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 !=
	     4'd10 ;
  assign near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1341 =
	     near_mem$imem_exc ||
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734 ||
	     !rg_stop_req && !rg_step_count ;
  assign near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1346 =
	     near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1341 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1342 &&
	     (IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	      2'd2 ||
	      IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	      2'd0) &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804 ;
  assign near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1378 =
	     near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1341 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1342 &&
	     (IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	      2'd2 ||
	      IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	      2'd0) &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804 ;
  assign near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1397 =
	     near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1341 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1342 &&
	     (IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	      2'd2 ||
	      IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	      2'd0) &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d1395 &&
	     !near_mem$imem_exc &&
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) ;
  assign near_mem_imem_pc__1_EQ_imem_c_rg_pc_PLUS_2_11___d212 =
	     near_mem$imem_pc == next_pc___1__h15710 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d547 &&
	     (IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d191 !=
	      2'd1 ||
	      !IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d533 &&
	      !IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d535) ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737 =
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d723 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d734) ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804 =
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	     !near_mem$imem_exc &&
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) ;
  assign next_pc___1__h15710 = imem_c_rg_pc + 64'd2 ;
  assign next_pc__h15708 = imem_c_rg_pc + 64'd4 ;
  assign nzimm10__h10575 =
	     { instr__h5127[12],
	       instr__h5127[4:3],
	       instr__h5127[5],
	       instr__h5127[2],
	       instr__h5127[6],
	       4'b0 } ;
  assign nzimm10__h10790 =
	     { instr__h5127[10:7],
	       instr__h5127[12:11],
	       instr__h5127[5],
	       instr__h5127[6],
	       2'b0 } ;
  assign offset_BITS_4_TO_0___h13573 = { instr__h5127[11:10], 3'b0 } ;
  assign offset_BITS_4_TO_0___h8202 = { instr__h5127[11:9], 2'b0 } ;
  assign offset_BITS_4_TO_0___h8633 =
	     { instr__h5127[11:10], instr__h5127[6], 2'b0 } ;
  assign offset__h12860 =
	     { instr__h5127[4:2],
	       instr__h5127[12],
	       instr__h5127[6:5],
	       3'b0 } ;
  assign offset__h13232 = { instr__h5127[6:5], instr__h5127[12:10], 3'b0 } ;
  assign offset__h7670 =
	     { instr__h5127[3:2],
	       instr__h5127[12],
	       instr__h5127[6:4],
	       2'b0 } ;
  assign offset__h8213 =
	     { instr__h5127[5], instr__h5127[12:10], instr__h5127[6], 2'b0 } ;
  assign offset__h8641 =
	     { instr__h5127[12],
	       instr__h5127[8],
	       instr__h5127[10:9],
	       instr__h5127[6],
	       instr__h5127[7],
	       instr__h5127[2],
	       instr__h5127[11],
	       instr__h5127[5:3],
	       1'b0 } ;
  assign offset__h9273 =
	     { instr__h5127[12],
	       instr__h5127[6:5],
	       instr__h5127[2],
	       instr__h5127[11:10],
	       instr__h5127[4:3],
	       1'b0 } ;
  assign rd__h8273 = { 2'b01, instr__h5127[4:2] } ;
  assign rd_val___1__h14876 =
	     rs1_val_bypassed__h5137 + _theResult___snd__h16288 ;
  assign rd_val___1__h14884 =
	     rs1_val_bypassed__h5137 - _theResult___snd__h16288 ;
  assign rd_val___1__h14891 =
	     ((rs1_val_bypassed__h5137 ^ 64'h8000000000000000) <
	      (_theResult___snd__h16288 ^ 64'h8000000000000000)) ?
	       64'd1 :
	       64'd0 ;
  assign rd_val___1__h14898 =
	     (rs1_val_bypassed__h5137 < _theResult___snd__h16288) ?
	       64'd1 :
	       64'd0 ;
  assign rd_val___1__h14905 =
	     rs1_val_bypassed__h5137 ^ _theResult___snd__h16288 ;
  assign rd_val___1__h14912 =
	     rs1_val_bypassed__h5137 | _theResult___snd__h16288 ;
  assign rd_val___1__h16317 =
	     { {32{eaddr4123_BITS_31_TO_0__q20[31]}},
	       eaddr4123_BITS_31_TO_0__q20 } ;
  assign rd_val___1__h16348 = { {32{x__h16351[31]}}, x__h16351 } ;
  assign rd_val___1__h16402 = { {32{x__h16405[31]}}, x__h16405 } ;
  assign rd_val___1__h16431 = { {32{tmp__h16430[31]}}, tmp__h16430 } ;
  assign rd_val___1__h16483 =
	     { {32{rs1_val_bypassed137_BITS_31_TO_0_PLUS_rs2_val__ETC__q8[31]}},
	       rs1_val_bypassed137_BITS_31_TO_0_PLUS_rs2_val__ETC__q8 } ;
  assign rd_val___1__h16531 =
	     { {32{rs1_val_bypassed137_BITS_31_TO_0_MINUS_rs2_val_ETC__q9[31]}},
	       rs1_val_bypassed137_BITS_31_TO_0_MINUS_rs2_val_ETC__q9 } ;
  assign rd_val___1__h16537 = { {32{x__h16540[31]}}, x__h16540 } ;
  assign rd_val___1__h16582 = { {32{x__h16585[31]}}, x__h16585 } ;
  assign rd_val__h13621 =
	     (stage3_rg_full && stage3_rg_stage3[69] &&
	      stage3_rg_stage3[68:64] == _theResult____h5129[24:20]) ?
	       stage3_rg_stage3[63:0] :
	       gpr_regfile$read_rs2 ;
  assign rd_val__h14093 = { {32{v32__h14091[31]}}, v32__h14091 } ;
  assign rd_val__h14107 = imem_c_rg_pc + rd_val__h14093 ;
  assign rd_val__h16184 = rs1_val_bypassed__h5137 << shamt__h13995 ;
  assign rd_val__h16236 = rs1_val_bypassed__h5137 >> shamt__h13995 ;
  assign rd_val__h16258 =
	     rs1_val_bypassed__h5137 >> shamt__h13995 |
	     ~(64'hFFFFFFFFFFFFFFFF >> shamt__h13995) &
	     {64{rs1_val_bypassed__h5137[63]}} ;
  assign rd_val__h7580 =
	     (stage3_rg_full && stage3_rg_stage3[69] &&
	      stage3_rg_stage3[68:64] == _theResult____h5129[19:15]) ?
	       stage3_rg_stage3[63:0] :
	       gpr_regfile$read_rs1 ;
  assign rg_cur_priv_2_EQ_0b11_19_OR_rg_cur_priv_2_EQ_0_ETC___d847 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[21] ||
	      rg_cur_priv == 2'b0 && csr_regfile$read_misa[13]) &&
	     _theResult____h5129[31:20] == 12'b000100000101 ;
  assign rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1443 =
	     rg_state == 4'd4 &&
	     NOT_near_mem_imem_exc__54_39_AND_IF_IF_imem_c__ETC___d1439 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1440 &&
	     !stage3_rg_full ;
  assign rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1447 =
	     rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1443 &&
	     IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	     4'd11 ;
  assign rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1533 =
	     rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1443 &&
	     IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	     4'd5 ;
  assign rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1552 =
	     rg_state_5_EQ_4_303_AND_NOT_near_mem_imem_exc__ETC___d1443 &&
	     IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737 &&
	     IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 ==
	     4'd4 ;
  assign rg_state_5_EQ_4_303_AND_stage3_rg_full_1_OR_NO_ETC___d1326 =
	     rg_state == 4'd4 &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 !=
	      2'd0 ||
	      stage1_rg_full) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 !=
	      2'd3) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 !=
	      2'd0 ||
	      !stage1_rg_full ||
	      NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d1308) &&
	     (NOT_rg_stop_req_277_313_AND_NOT_rg_step_count__ETC___d1323 ||
	      IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 !=
	      2'd0 ||
	      stage3_rg_full) ;
  assign rg_stop_req_277_OR_rg_step_count_278_279_AND_s_ETC___d1589 =
	     (rg_stop_req || rg_step_count) && stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1274 ;
  assign rg_stop_req_277_OR_rg_step_count_278_279_AND_s_ETC___d1592 =
	     rg_stop_req_277_OR_rg_step_count_278_279_AND_s_ETC___d1589 &&
	     IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 ==
	     2'd0 &&
	     !stage3_rg_full &&
	     !csr_regfile$interrupt_pending[4] &&
	     !csr_regfile$nmi_pending ;
  assign rs1__h8272 = { 2'b01, instr__h5127[9:7] } ;
  assign rs1_val__h21422 =
	     (rg_trap_instr[14:12] == 3'b001) ?
	       rg_csr_val1 :
	       { 59'd0, rg_trap_instr[19:15] } ;
  assign rs1_val_bypassed137_BITS_31_TO_0_MINUS_rs2_val_ETC__q9 =
	     rs1_val_bypassed__h5137[31:0] - rs2_val_bypassed__h5143[31:0] ;
  assign rs1_val_bypassed137_BITS_31_TO_0_PLUS_rs2_val__ETC__q8 =
	     rs1_val_bypassed__h5137[31:0] + rs2_val_bypassed__h5143[31:0] ;
  assign rs1_val_bypassed137_BITS_31_TO_0_SRL_rs2_val_b_ETC__q7 =
	     rs1_val_bypassed__h5137[31:0] >> rs2_val_bypassed__h5143[4:0] |
	     ~(32'hFFFFFFFF >> rs2_val_bypassed__h5143[4:0]) &
	     {32{rs1_val_bypassed137_BITS_31_TO_0__q6[31]}} ;
  assign rs1_val_bypassed137_BITS_31_TO_0__q6 =
	     rs1_val_bypassed__h5137[31:0] ;
  assign rs1_val_bypassed__h5137 =
	     (_theResult____h5129[19:15] == 5'd0) ? 64'd0 : val__h7582 ;
  assign rs2_val_bypassed__h5143 =
	     (_theResult____h5129[24:20] == 5'd0) ? 64'd0 : val__h13623 ;
  assign shamt__h13995 =
	     (_theResult____h5129[6:0] == 7'b0010011) ?
	       _theResult____h5129[25:20] :
	       rs2_val_bypassed__h5143[5:0] ;
  assign stage1_rg_full_03_AND_imem_c_rg_pc_BITS_63_TO__ETC___d1280 =
	     stage1_rg_full &&
	     imem_c_rg_pc_BITS_63_TO_2_0_EQ_imem_c_rg_cache_ETC___d1273 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1274 &&
	     (rg_stop_req || rg_step_count) ;
  assign stage1_rg_full_03_AND_near_mem_imem_valid_AND__ETC___d1432 =
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1274 &&
	     csr_regfile$read_dcsr_step ;
  assign sxl__h6200 =
	     (csr_regfile$read_misa[27:26] == 2'd2) ?
	       csr_regfile$read_mstatus[35:34] :
	       2'd0 ;
  assign theResult__129_BITS_31_TO_20__q19 = _theResult____h5129[31:20] ;
  assign theResult__129_BITS_31_TO_25_CONCAT_theResult__ETC__q5 =
	     { _theResult____h5129[31:25], _theResult____h5129[11:7] } ;
  assign theResult__129_BIT_31_CONCAT_theResult__129_BI_ETC__q3 =
	     { _theResult____h5129[31],
	       _theResult____h5129[7],
	       _theResult____h5129[30:25],
	       _theResult____h5129[11:8],
	       1'b0 } ;
  assign theResult__129_BIT_31_CONCAT_theResult__129_BI_ETC__q4 =
	     { _theResult____h5129[31],
	       _theResult____h5129[19:12],
	       _theResult____h5129[20],
	       _theResult____h5129[30:21],
	       1'b0 } ;
  assign tmp__h16430 =
	     rs1_val_bypassed__h5137[31:0] >> _theResult____h5129[24:20] |
	     ~(32'hFFFFFFFF >> _theResult____h5129[24:20]) &
	     {32{rs1_val_bypassed137_BITS_31_TO_0__q6[31]}} ;
  assign trap_info_tval__h15551 =
	     (_theResult____h5129[6:0] != 7'b1101111 &&
	      _theResult____h5129[6:0] != 7'b1100111 &&
	      (_theResult____h5129[6:0] != 7'b1110011 ||
	       _theResult____h5129[14:12] != 3'b0 ||
	       _theResult____h5129[11:7] != 5'd0 ||
	       _theResult____h5129[19:15] != 5'd0 ||
	       _theResult____h5129[31:20] != 12'b0 &&
	       _theResult____h5129[31:20] != 12'b000000000001)) ?
	       (NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d545 ?
		  { 32'd0, _theResult____h5129 } :
		  { 48'd0, instr__h5127[15:0] }) :
	       CASE_theResult__129_BITS_6_TO_0_0b1100111_data_ETC__q21 ;
  assign uxl__h6201 =
	     (csr_regfile$read_misa[27:26] == 2'd2) ?
	       csr_regfile$read_mstatus[33:32] :
	       2'd0 ;
  assign v32__h14091 = { _theResult____h5129[31:12], 12'h0 } ;
  assign val__h13623 =
	     (IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d191 ==
	      2'd2 &&
	      IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d535) ?
	       x_out_bypass_rd_val__h7471 :
	       rd_val__h13621 ;
  assign val__h7582 =
	     (IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d191 ==
	      2'd2 &&
	      IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d533) ?
	       x_out_bypass_rd_val__h7471 :
	       rd_val__h7580 ;
  assign value__h15598 =
	     near_mem$imem_exc ? imem_c_rg_tval : trap_info_tval__h15551 ;
  assign x__h16351 =
	     rs1_val_bypassed__h5137[31:0] << _theResult____h5129[24:20] ;
  assign x__h16405 =
	     rs1_val_bypassed__h5137[31:0] >> _theResult____h5129[24:20] ;
  assign x__h16540 =
	     rs1_val_bypassed__h5137[31:0] << rs2_val_bypassed__h5143[4:0] ;
  assign x__h16585 =
	     rs1_val_bypassed__h5137[31:0] >> rs2_val_bypassed__h5143[4:0] ;
  assign x__h28522 =
	     csr_regfile_read_csr_mcycle__1_MINUS_rg_start__ETC___d1597[63:0] /
	     _theResult____h28521 ;
  assign x_exc_code__h28270 =
	     (csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending) ?
	       csr_regfile$interrupt_pending[3:0] :
	       4'd0 ;
  assign x_out_data_to_stage2_instr__h13709 = _theResult____h5129 ;
  assign x_out_data_to_stage2_rd__h13711 =
	     (_theResult____h5129[6:0] == 7'b1100011) ?
	       5'd0 :
	       _theResult____h5129[11:7] ;
  assign x_out_data_to_stage2_val2__h13714 =
	     (_theResult____h5129[6:0] == 7'b1100011) ?
	       branch_target__h13828 :
	       rs2_val_bypassed__h5143 ;
  assign x_out_next_pc__h13678 =
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801 ?
	       data_to_stage2_addr__h13704 :
	       fall_through_pc__h13664 ;
  assign x_out_trap_info_exc_code__h15554 =
	     near_mem$imem_exc ?
	       near_mem$imem_exc_code :
	       alu_outputs_exc_code__h14472 ;
  assign y__h22370 = ~rs1_val__h22101 ;
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[199:197])
      3'd0, 3'd1, 3'd4:
	  x_out_data_to_stage3_rd__h7131 = stage2_rg_stage2[196:192];
      3'd2: x_out_data_to_stage3_rd__h7131 = 5'd0;
      default: x_out_data_to_stage3_rd__h7131 = stage2_rg_stage2[196:192];
    endcase
  end
  always@(stage2_rg_stage2 or stage2_mbox$word)
  begin
    case (stage2_rg_stage2[199:197])
      3'd0, 3'd1, 3'd4: x_out_bypass_rd_val__h7471 = stage2_rg_stage2[127:64];
      default: x_out_bypass_rd_val__h7471 = stage2_mbox$word;
    endcase
  end
  always@(stage2_rg_stage2 or stage2_mbox$word or near_mem$dmem_word64)
  begin
    case (stage2_rg_stage2[199:197])
      3'd0, 3'd2:
	  x_out_data_to_stage3_rd_val__h7132 = stage2_rg_stage2[127:64];
      3'd1, 3'd4: x_out_data_to_stage3_rd_val__h7132 = near_mem$dmem_word64;
      default: x_out_data_to_stage3_rd_val__h7132 = stage2_mbox$word;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[199:197])
      3'd0, 3'd1, 3'd4: x_out_bypass_rd__h7470 = stage2_rg_stage2[196:192];
      default: x_out_bypass_rd__h7470 = stage2_rg_stage2[196:192];
    endcase
  end
  always@(rg_trap_instr or rg_csr_val1)
  begin
    case (rg_trap_instr[14:12])
      3'b010, 3'b011: rs1_val__h22101 = rg_csr_val1;
      default: rs1_val__h22101 = { 59'd0, rg_trap_instr[19:15] };
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_rg_stage2_01_BITS_199_TO_197_02_EQ_3_ETC___d128 or
	  IF_near_mem_dmem_valid__22_THEN_IF_near_mem_dm_ETC___d125)
  begin
    case (stage2_rg_stage2[199:197])
      3'd0: CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q1 = 2'd2;
      3'd1, 3'd2, 3'd4:
	  CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q1 =
	      IF_near_mem_dmem_valid__22_THEN_IF_near_mem_dm_ETC___d125;
      default: CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q1 =
		   IF_stage2_rg_stage2_01_BITS_199_TO_197_02_EQ_3_ETC___d128;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[199:197])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_01_BITS_199_TO_197_02_EQ_1_ETC___d145 =
	      !near_mem$dmem_valid || near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_01_BITS_199_TO_197_02_EQ_1_ETC___d145 =
		   !stage2_mbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[199:197])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_01_BITS_199_TO_197_02_EQ_1_ETC___d154 =
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_01_BITS_199_TO_197_02_EQ_1_ETC___d154 =
		   stage2_mbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_rg_stage2_01_BITS_199_TO_197_02_EQ_3_ETC___d128 or
	  IF_NOT_near_mem_dmem_valid__22_41_OR_NOT_near__ETC___d187)
  begin
    case (stage2_rg_stage2[199:197])
      3'd0: CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q2 = 2'd2;
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q2 =
	      IF_NOT_near_mem_dmem_valid__22_41_OR_NOT_near__ETC___d187;
      3'd2: CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q2 = 2'd0;
      default: CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q2 =
		   IF_stage2_rg_stage2_01_BITS_199_TO_197_02_EQ_3_ETC___d128;
    endcase
  end
  always@(funct10__h14074 or
	  _theResult___fst__h15100 or
	  rd_val___1__h16483 or
	  rd_val___1__h16537 or rd_val___1__h16582 or rd_val___1__h16531)
  begin
    case (funct10__h14074)
      10'b0: alu_outputs___1_val1__h14086 = rd_val___1__h16483;
      10'b0000000001: alu_outputs___1_val1__h14086 = rd_val___1__h16537;
      10'b0000000101: alu_outputs___1_val1__h14086 = rd_val___1__h16582;
      10'b0100000000: alu_outputs___1_val1__h14086 = rd_val___1__h16531;
      default: alu_outputs___1_val1__h14086 = _theResult___fst__h15100;
    endcase
  end
  always@(_theResult____h5129 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d596 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d592 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d594)
  begin
    case (_theResult____h5129[14:12])
      3'b0:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d729 =
	      !IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d592;
      3'b001:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d729 =
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d592;
      3'b100:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d729 =
	      !IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d594;
      3'b101:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d729 =
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d594;
      3'b110:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d729 =
	      !IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d596;
      default: IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d729 =
		   _theResult____h5129[14:12] != 3'b111 ||
		   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d596;
    endcase
  end
  always@(_theResult____h5129 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d596 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d592 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d594)
  begin
    case (_theResult____h5129[14:12])
      3'b0:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d603 =
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d592;
      3'b001:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d603 =
	      !IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d592;
      3'b100:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d603 =
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d594;
      3'b101:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d603 =
	      !IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d594;
      3'b110:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d603 =
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d596;
      default: IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d603 =
		   _theResult____h5129[14:12] == 3'b111 &&
		   !IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d596;
    endcase
  end
  always@(_theResult____h5129)
  begin
    case (_theResult____h5129[6:0])
      7'b0000011:
	  CASE_theResult__129_BITS_6_TO_0_0b11_NOT_theRe_ETC__q10 =
	      _theResult____h5129[14:12] != 3'b0 &&
	      _theResult____h5129[14:12] != 3'b100 &&
	      _theResult____h5129[14:12] != 3'b001 &&
	      _theResult____h5129[14:12] != 3'b101 &&
	      _theResult____h5129[14:12] != 3'b010 &&
	      _theResult____h5129[14:12] != 3'b110 &&
	      _theResult____h5129[14:12] != 3'b011;
      7'b0100011:
	  CASE_theResult__129_BITS_6_TO_0_0b11_NOT_theRe_ETC__q10 =
	      _theResult____h5129[14:12] != 3'b0 &&
	      _theResult____h5129[14:12] != 3'b001 &&
	      _theResult____h5129[14:12] != 3'b010 &&
	      _theResult____h5129[14:12] != 3'b011;
      default: CASE_theResult__129_BITS_6_TO_0_0b11_NOT_theRe_ETC__q10 =
		   _theResult____h5129[6:0] != 7'b0101111 ||
		   _theResult____h5129[31:27] != 5'b00010 &&
		   _theResult____h5129[31:27] != 5'b00011 &&
		   _theResult____h5129[31:27] != 5'b0 &&
		   _theResult____h5129[31:27] != 5'b00001 &&
		   _theResult____h5129[31:27] != 5'b01100 &&
		   _theResult____h5129[31:27] != 5'b01000 &&
		   _theResult____h5129[31:27] != 5'b00100 &&
		   _theResult____h5129[31:27] != 5'b10000 &&
		   _theResult____h5129[31:27] != 5'b11000 &&
		   _theResult____h5129[31:27] != 5'b10100 &&
		   _theResult____h5129[31:27] != 5'b11100 ||
		   _theResult____h5129[14:12] != 3'b010 &&
		   _theResult____h5129[14:12] != 3'b011;
    endcase
  end
  always@(_theResult____h5129 or
	  CASE_theResult__129_BITS_6_TO_0_0b11_NOT_theRe_ETC__q10 or
	  NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d639 or
	  funct10__h14074)
  begin
    case (_theResult____h5129[6:0])
      7'b0010011, 7'b0110011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d720 =
	      NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d639;
      7'b0011011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d720 =
	      _theResult____h5129[14:12] != 3'b0 &&
	      (_theResult____h5129[14:12] != 3'b001 ||
	       _theResult____h5129[25]) &&
	      (_theResult____h5129[14:12] != 3'b101 ||
	       _theResult____h5129[25]);
      7'b0111011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d720 =
	      funct10__h14074 != 10'b0 && funct10__h14074 != 10'b0100000000 &&
	      funct10__h14074 != 10'b0000000001 &&
	      funct10__h14074 != 10'b0000000101 &&
	      funct10__h14074 != 10'b0100000101;
      default: IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d720 =
		   _theResult____h5129[6:0] != 7'b0110111 &&
		   _theResult____h5129[6:0] != 7'b0010111 &&
		   CASE_theResult__129_BITS_6_TO_0_0b11_NOT_theRe_ETC__q10;
    endcase
  end
  always@(_theResult____h5129)
  begin
    case (_theResult____h5129[6:0])
      7'b0000011:
	  CASE_theResult__129_BITS_6_TO_0_0b11_theResult_ETC__q11 =
	      _theResult____h5129[14:12] == 3'b0 ||
	      _theResult____h5129[14:12] == 3'b100 ||
	      _theResult____h5129[14:12] == 3'b001 ||
	      _theResult____h5129[14:12] == 3'b101 ||
	      _theResult____h5129[14:12] == 3'b010 ||
	      _theResult____h5129[14:12] == 3'b110 ||
	      _theResult____h5129[14:12] == 3'b011;
      7'b0100011:
	  CASE_theResult__129_BITS_6_TO_0_0b11_theResult_ETC__q11 =
	      _theResult____h5129[14:12] == 3'b0 ||
	      _theResult____h5129[14:12] == 3'b001 ||
	      _theResult____h5129[14:12] == 3'b010 ||
	      _theResult____h5129[14:12] == 3'b011;
      default: CASE_theResult__129_BITS_6_TO_0_0b11_theResult_ETC__q11 =
		   _theResult____h5129[6:0] == 7'b0101111 &&
		   (_theResult____h5129[31:27] == 5'b00010 ||
		    _theResult____h5129[31:27] == 5'b00011 ||
		    _theResult____h5129[31:27] == 5'b0 ||
		    _theResult____h5129[31:27] == 5'b00001 ||
		    _theResult____h5129[31:27] == 5'b01100 ||
		    _theResult____h5129[31:27] == 5'b01000 ||
		    _theResult____h5129[31:27] == 5'b00100 ||
		    _theResult____h5129[31:27] == 5'b10000 ||
		    _theResult____h5129[31:27] == 5'b11000 ||
		    _theResult____h5129[31:27] == 5'b10100 ||
		    _theResult____h5129[31:27] == 5'b11100) &&
		   (_theResult____h5129[14:12] == 3'b010 ||
		    _theResult____h5129[14:12] == 3'b011);
    endcase
  end
  always@(_theResult____h5129 or
	  CASE_theResult__129_BITS_6_TO_0_0b11_theResult_ETC__q11 or
	  IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d758 or
	  funct10__h14074)
  begin
    case (_theResult____h5129[6:0])
      7'b0010011, 7'b0110011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d796 =
	      IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d758;
      7'b0011011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d796 =
	      _theResult____h5129[14:12] == 3'b0 ||
	      (_theResult____h5129[14:12] == 3'b001 ||
	       _theResult____h5129[14:12] == 3'b101) &&
	      !_theResult____h5129[25];
      7'b0111011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d796 =
	      funct10__h14074 == 10'b0 || funct10__h14074 == 10'b0100000000 ||
	      funct10__h14074 == 10'b0000000001 ||
	      funct10__h14074 == 10'b0000000101 ||
	      funct10__h14074 == 10'b0100000101;
      default: IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d796 =
		   _theResult____h5129[6:0] == 7'b0110111 ||
		   _theResult____h5129[6:0] == 7'b0010111 ||
		   CASE_theResult__129_BITS_6_TO_0_0b11_theResult_ETC__q11;
    endcase
  end
  always@(rg_cur_priv)
  begin
    case (rg_cur_priv)
      2'b0: CASE_rg_cur_priv_0b0_8_0b1_9_11__q12 = 4'd8;
      2'b01: CASE_rg_cur_priv_0b0_8_0b1_9_11__q12 = 4'd9;
      default: CASE_rg_cur_priv_0b0_8_0b1_9_11__q12 = 4'd11;
    endcase
  end
  always@(_theResult____h5129 or CASE_rg_cur_priv_0b0_8_0b1_9_11__q12)
  begin
    case (_theResult____h5129[31:20])
      12'b0:
	  CASE_theResult__129_BITS_31_TO_20_0b0_CASE_rg__ETC__q13 =
	      CASE_rg_cur_priv_0b0_8_0b1_9_11__q12;
      12'b000000000001:
	  CASE_theResult__129_BITS_31_TO_20_0b0_CASE_rg__ETC__q13 = 4'd3;
      default: CASE_theResult__129_BITS_31_TO_20_0b0_CASE_rg__ETC__q13 = 4'd2;
    endcase
  end
  always@(_theResult____h5129 or alu_outputs___1_exc_code__h14428)
  begin
    case (_theResult____h5129[6:0])
      7'b0000011,
      7'b0001111,
      7'b0010011,
      7'b0010111,
      7'b0011011,
      7'b0100011,
      7'b0110011,
      7'b0110111,
      7'b0111011,
      7'b1100011:
	  alu_outputs_exc_code__h14472 = 4'd2;
      7'b1100111, 7'b1101111: alu_outputs_exc_code__h14472 = 4'd0;
      7'b1110011:
	  alu_outputs_exc_code__h14472 = alu_outputs___1_exc_code__h14428;
      default: alu_outputs_exc_code__h14472 = 4'd2;
    endcase
  end
  always@(_theResult____h5129 or
	  rg_cur_priv or
	  IF_rg_cur_priv_2_EQ_0b11_19_OR_rg_cur_priv_2_E_ETC___d849)
  begin
    case (_theResult____h5129[31:20])
      12'b0, 12'b000000000001:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d851 = 4'd11;
      default: IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d851 =
		   (rg_cur_priv == 2'b11 &&
		    _theResult____h5129[31:20] == 12'b001100000010) ?
		     4'd7 :
		     IF_rg_cur_priv_2_EQ_0b11_19_OR_rg_cur_priv_2_E_ETC___d849;
    endcase
  end
  always@(_theResult____h5129)
  begin
    case (_theResult____h5129[14:12])
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  CASE_theResult__129_BITS_14_TO_12_0b0_0_0b1_0__ETC__q14 = 4'd0;
      3'd7: CASE_theResult__129_BITS_14_TO_12_0b0_0_0b1_0__ETC__q14 = 4'd11;
    endcase
  end
  always@(_theResult____h5129)
  begin
    case (_theResult____h5129[14:12])
      3'b0: CASE_theResult__129_BITS_14_TO_12_0b0_4_0b1_5_11__q15 = 4'd4;
      3'b001: CASE_theResult__129_BITS_14_TO_12_0b0_4_0b1_5_11__q15 = 4'd5;
      default: CASE_theResult__129_BITS_14_TO_12_0b0_4_0b1_5_11__q15 = 4'd11;
    endcase
  end
  always@(_theResult____h5129)
  begin
    case (_theResult____h5129[14:12])
      3'b0, 3'b001, 3'b010, 3'b011:
	  CASE_theResult__129_BITS_14_TO_12_0b0_0_0b1_0__ETC__q16 = 4'd0;
      default: CASE_theResult__129_BITS_14_TO_12_0b0_0_0b1_0__ETC__q16 =
		   4'd11;
    endcase
  end
  always@(_theResult____h5129 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d853)
  begin
    case (_theResult____h5129[14:12])
      3'b0:
	  CASE_theResult__129_BITS_14_TO_12_0b0_IF_IF_im_ETC__q17 =
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d853;
      3'b001, 3'b101:
	  CASE_theResult__129_BITS_14_TO_12_0b0_IF_IF_im_ETC__q17 = 4'd2;
      3'b010, 3'b011, 3'b110, 3'b111:
	  CASE_theResult__129_BITS_14_TO_12_0b0_IF_IF_im_ETC__q17 = 4'd3;
      3'd4: CASE_theResult__129_BITS_14_TO_12_0b0_IF_IF_im_ETC__q17 = 4'd11;
    endcase
  end
  always@(_theResult____h5129 or
	  CASE_theResult__129_BITS_14_TO_12_0b0_0_0b1_0__ETC__q14 or
	  CASE_theResult__129_BITS_14_TO_12_0b0_4_0b1_5_11__q15 or
	  IF_NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_N_ETC___d808 or
	  CASE_theResult__129_BITS_14_TO_12_0b0_0_0b1_0__ETC__q16 or
	  funct10__h14074 or
	  CASE_theResult__129_BITS_14_TO_12_0b0_IF_IF_im_ETC__q17)
  begin
    case (_theResult____h5129[6:0])
      7'b0000011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d869 =
	      CASE_theResult__129_BITS_14_TO_12_0b0_0_0b1_0__ETC__q14;
      7'b0001111:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d869 =
	      CASE_theResult__129_BITS_14_TO_12_0b0_4_0b1_5_11__q15;
      7'b0010011, 7'b0110011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d869 =
	      IF_NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_N_ETC___d808;
      7'b0010111, 7'b0110111:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d869 = 4'd0;
      7'b0011011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d869 =
	      (_theResult____h5129[14:12] != 3'b0 &&
	       (_theResult____h5129[14:12] != 3'b001 ||
		_theResult____h5129[25]) &&
	       (_theResult____h5129[14:12] != 3'b101 ||
		_theResult____h5129[25])) ?
		4'd11 :
		4'd0;
      7'b0100011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d869 =
	      CASE_theResult__129_BITS_14_TO_12_0b0_0_0b1_0__ETC__q16;
      7'b0101111:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d869 =
	      ((_theResult____h5129[31:27] == 5'b00010 ||
		_theResult____h5129[31:27] == 5'b00011 ||
		_theResult____h5129[31:27] == 5'b0 ||
		_theResult____h5129[31:27] == 5'b00001 ||
		_theResult____h5129[31:27] == 5'b01100 ||
		_theResult____h5129[31:27] == 5'b01000 ||
		_theResult____h5129[31:27] == 5'b00100 ||
		_theResult____h5129[31:27] == 5'b10000 ||
		_theResult____h5129[31:27] == 5'b11000 ||
		_theResult____h5129[31:27] == 5'b10100 ||
		_theResult____h5129[31:27] == 5'b11100) &&
	       (_theResult____h5129[14:12] == 3'b010 ||
		_theResult____h5129[14:12] == 3'b011)) ?
		4'd0 :
		4'd11;
      7'b0111011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d869 =
	      (funct10__h14074 != 10'b0 &&
	       funct10__h14074 != 10'b0100000000 &&
	       funct10__h14074 != 10'b0000000001 &&
	       funct10__h14074 != 10'b0000000101 &&
	       funct10__h14074 != 10'b0100000101) ?
		4'd11 :
		4'd0;
      7'b1110011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d869 =
	      CASE_theResult__129_BITS_14_TO_12_0b0_IF_IF_im_ETC__q17;
      default: IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d869 =
		   4'd11;
    endcase
  end
  always@(_theResult____h5129 or
	  IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d751 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d869 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d603)
  begin
    case (_theResult____h5129[6:0])
      7'b1100011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d872 =
	      (_theResult____h5129[14:12] != 3'b0 &&
	       _theResult____h5129[14:12] != 3'b001 &&
	       _theResult____h5129[14:12] != 3'b100 &&
	       _theResult____h5129[14:12] != 3'b101 &&
	       _theResult____h5129[14:12] != 3'b110 &&
	       _theResult____h5129[14:12] != 3'b111) ?
		4'd11 :
		(IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d603 ?
		   4'd1 :
		   4'd0);
      7'b1100111, 7'b1101111:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d872 = 4'd1;
      default: IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d872 =
		   IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d751 ?
		     4'd0 :
		     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d869;
    endcase
  end
  always@(_theResult____h5129)
  begin
    case (_theResult____h5129[6:0])
      7'b0000011:
	  CASE_theResult__129_BITS_6_TO_0_0b11_1_0b10011_ETC__q18 = 3'd1;
      7'b0010011, 7'b0010111, 7'b0011011, 7'b0110011, 7'b0110111, 7'b0111011:
	  CASE_theResult__129_BITS_6_TO_0_0b11_1_0b10011_ETC__q18 = 3'd0;
      7'b0100011:
	  CASE_theResult__129_BITS_6_TO_0_0b11_1_0b10011_ETC__q18 = 3'd2;
      default: CASE_theResult__129_BITS_6_TO_0_0b11_1_0b10011_ETC__q18 = 3'd4;
    endcase
  end
  always@(_theResult____h5129 or
	  CASE_theResult__129_BITS_6_TO_0_0b11_1_0b10011_ETC__q18)
  begin
    case (_theResult____h5129[6:0])
      7'b1100011, 7'b1100111, 7'b1101111:
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 = 3'd0;
      default: IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 =
		   ((_theResult____h5129[6:0] == 7'b0110011 ||
		     _theResult____h5129[6:0] == 7'b0111011) &&
		    _theResult____h5129[31:25] == 7'b0000001) ?
		     3'd3 :
		     CASE_theResult__129_BITS_6_TO_0_0b11_1_0b10011_ETC__q18;
    endcase
  end
  always@(_theResult____h5129 or
	  _theResult_____1_fst__h14923 or
	  rd_val___1__h14891 or
	  rd_val___1__h14898 or rd_val___1__h14905 or rd_val___1__h14912)
  begin
    case (_theResult____h5129[14:12])
      3'b010: _theResult_____1_fst__h14895 = rd_val___1__h14891;
      3'b011: _theResult_____1_fst__h14895 = rd_val___1__h14898;
      3'b100: _theResult_____1_fst__h14895 = rd_val___1__h14905;
      3'b110: _theResult_____1_fst__h14895 = rd_val___1__h14912;
      default: _theResult_____1_fst__h14895 = _theResult_____1_fst__h14923;
    endcase
  end
  always@(_theResult____h5129 or
	  rs1_val_bypassed__h5137 or
	  eaddr__h14123 or
	  alu_outputs___1_addr__h14153 or
	  alu_outputs___1_addr__h13851 or
	  alu_outputs___1_addr__h13898 or alu_outputs___1_addr__h13872)
  begin
    case (_theResult____h5129[6:0])
      7'b0000011: x_out_data_to_stage2_addr__h13712 = eaddr__h14123;
      7'b0100011:
	  x_out_data_to_stage2_addr__h13712 = alu_outputs___1_addr__h14153;
      7'b1100011:
	  x_out_data_to_stage2_addr__h13712 = alu_outputs___1_addr__h13851;
      7'b1100111:
	  x_out_data_to_stage2_addr__h13712 = alu_outputs___1_addr__h13898;
      7'b1101111:
	  x_out_data_to_stage2_addr__h13712 = alu_outputs___1_addr__h13872;
      default: x_out_data_to_stage2_addr__h13712 = rs1_val_bypassed__h5137;
    endcase
  end
  always@(_theResult____h5129 or imem_c_rg_pc or data_to_stage2_addr__h13704)
  begin
    case (_theResult____h5129[6:0])
      7'b1100111, 7'b1101111:
	  CASE_theResult__129_BITS_6_TO_0_0b1100111_data_ETC__q21 =
	      data_to_stage2_addr__h13704;
      default: CASE_theResult__129_BITS_6_TO_0_0b1100111_data_ETC__q21 =
		   (_theResult____h5129[6:0] == 7'b1110011 &&
		    _theResult____h5129[14:12] == 3'b0 &&
		    _theResult____h5129[11:7] == 5'd0 &&
		    _theResult____h5129[19:15] == 5'd0 &&
		    _theResult____h5129[31:20] == 12'b000000000001) ?
		     imem_c_rg_pc :
		     64'd0;
    endcase
  end
  always@(_theResult____h5129 or
	  alu_outputs___1_val1__h14452 or
	  alu_outputs___1_val1__h14044 or
	  rd_val__h14107 or
	  alu_outputs___1_val1__h14065 or
	  rd_val__h14093 or
	  alu_outputs___1_val1__h14086 or alu_outputs___1_val1__h14432)
  begin
    case (_theResult____h5129[6:0])
      7'b0010011, 7'b0110011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1104 =
	      alu_outputs___1_val1__h14044;
      7'b0010111:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1104 =
	      rd_val__h14107;
      7'b0011011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1104 =
	      alu_outputs___1_val1__h14065;
      7'b0110111:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1104 =
	      rd_val__h14093;
      7'b0111011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1104 =
	      alu_outputs___1_val1__h14086;
      7'b1110011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1104 =
	      alu_outputs___1_val1__h14432;
      default: IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1104 =
		   alu_outputs___1_val1__h14452;
    endcase
  end
  always@(_theResult____h5129 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1106 or
	  IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1003)
  begin
    case (_theResult____h5129[6:0])
      7'b1100111, 7'b1101111:
	  x_out_data_to_stage2_val1__h13713 =
	      IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1003;
      default: x_out_data_to_stage2_val1__h13713 =
		   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1106;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_logdelay <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd2;
	imem_c_rg_cache_addr <= `BSV_ASSIGNMENT_DELAY 64'hFFFFFFFFFFFFFFFF;
	rg_cur_priv <= `BSV_ASSIGNMENT_DELAY 2'b11;
	rg_run_on_reset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_step_count <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_stop_req <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage1_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage3_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_logdelay$EN)
	  cfg_logdelay <= `BSV_ASSIGNMENT_DELAY cfg_logdelay$D_IN;
	if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (imem_c_rg_cache_addr$EN)
	  imem_c_rg_cache_addr <= `BSV_ASSIGNMENT_DELAY
	      imem_c_rg_cache_addr$D_IN;
	if (rg_cur_priv$EN)
	  rg_cur_priv <= `BSV_ASSIGNMENT_DELAY rg_cur_priv$D_IN;
	if (rg_run_on_reset$EN)
	  rg_run_on_reset <= `BSV_ASSIGNMENT_DELAY rg_run_on_reset$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (rg_step_count$EN)
	  rg_step_count <= `BSV_ASSIGNMENT_DELAY rg_step_count$D_IN;
	if (rg_stop_req$EN)
	  rg_stop_req <= `BSV_ASSIGNMENT_DELAY rg_stop_req$D_IN;
	if (stage1_rg_full$EN)
	  stage1_rg_full <= `BSV_ASSIGNMENT_DELAY stage1_rg_full$D_IN;
	if (stage2_rg_full$EN)
	  stage2_rg_full <= `BSV_ASSIGNMENT_DELAY stage2_rg_full$D_IN;
	if (stage2_rg_resetting$EN)
	  stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY
	      stage2_rg_resetting$D_IN;
	if (stage3_rg_full$EN)
	  stage3_rg_full <= `BSV_ASSIGNMENT_DELAY stage3_rg_full$D_IN;
      end
    if (imem_c_rg_cache_b16$EN)
      imem_c_rg_cache_b16 <= `BSV_ASSIGNMENT_DELAY imem_c_rg_cache_b16$D_IN;
    if (imem_c_rg_f3$EN)
      imem_c_rg_f3 <= `BSV_ASSIGNMENT_DELAY imem_c_rg_f3$D_IN;
    if (imem_c_rg_mstatus_MXR$EN)
      imem_c_rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY
	  imem_c_rg_mstatus_MXR$D_IN;
    if (imem_c_rg_pc$EN)
      imem_c_rg_pc <= `BSV_ASSIGNMENT_DELAY imem_c_rg_pc$D_IN;
    if (imem_c_rg_priv$EN)
      imem_c_rg_priv <= `BSV_ASSIGNMENT_DELAY imem_c_rg_priv$D_IN;
    if (imem_c_rg_satp$EN)
      imem_c_rg_satp <= `BSV_ASSIGNMENT_DELAY imem_c_rg_satp$D_IN;
    if (imem_c_rg_sstatus_SUM$EN)
      imem_c_rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY
	  imem_c_rg_sstatus_SUM$D_IN;
    if (imem_c_rg_tval$EN)
      imem_c_rg_tval <= `BSV_ASSIGNMENT_DELAY imem_c_rg_tval$D_IN;
    if (rg_csr_pc$EN) rg_csr_pc <= `BSV_ASSIGNMENT_DELAY rg_csr_pc$D_IN;
    if (rg_csr_val1$EN) rg_csr_val1 <= `BSV_ASSIGNMENT_DELAY rg_csr_val1$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_next_pc$EN) rg_next_pc <= `BSV_ASSIGNMENT_DELAY rg_next_pc$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_start_CPI_cycles$EN)
      rg_start_CPI_cycles <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_cycles$D_IN;
    if (rg_start_CPI_instrs$EN)
      rg_start_CPI_instrs <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_instrs$D_IN;
    if (rg_trap_info$EN)
      rg_trap_info <= `BSV_ASSIGNMENT_DELAY rg_trap_info$D_IN;
    if (rg_trap_instr$EN)
      rg_trap_instr <= `BSV_ASSIGNMENT_DELAY rg_trap_instr$D_IN;
    if (rg_trap_interrupt$EN)
      rg_trap_interrupt <= `BSV_ASSIGNMENT_DELAY rg_trap_interrupt$D_IN;
    if (stage2_rg_stage2$EN)
      stage2_rg_stage2 <= `BSV_ASSIGNMENT_DELAY stage2_rg_stage2$D_IN;
    if (stage3_rg_stage3$EN)
      stage3_rg_stage3 <= `BSV_ASSIGNMENT_DELAY stage3_rg_stage3$D_IN;
  end

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      isInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (isInReset_isInReset$EN)
	isInReset_isInReset <= `BSV_ASSIGNMENT_DELAY isInReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_logdelay = 64'hAAAAAAAAAAAAAAAA;
    cfg_verbosity = 4'hA;
    imem_c_rg_cache_addr = 64'hAAAAAAAAAAAAAAAA;
    imem_c_rg_cache_b16 = 17'h0AAAA;
    imem_c_rg_f3 = 3'h2;
    imem_c_rg_mstatus_MXR = 1'h0;
    imem_c_rg_pc = 64'hAAAAAAAAAAAAAAAA;
    imem_c_rg_priv = 2'h2;
    imem_c_rg_satp = 64'hAAAAAAAAAAAAAAAA;
    imem_c_rg_sstatus_SUM = 1'h0;
    imem_c_rg_tval = 64'hAAAAAAAAAAAAAAAA;
    isInReset_isInReset = 1'h0;
    rg_csr_pc = 64'hAAAAAAAAAAAAAAAA;
    rg_csr_val1 = 64'hAAAAAAAAAAAAAAAA;
    rg_cur_priv = 2'h2;
    rg_mstatus_MXR = 1'h0;
    rg_next_pc = 64'hAAAAAAAAAAAAAAAA;
    rg_run_on_reset = 1'h0;
    rg_sstatus_SUM = 1'h0;
    rg_start_CPI_cycles = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_instrs = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_step_count = 1'h0;
    rg_stop_req = 1'h0;
    rg_trap_info = 132'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_trap_instr = 32'hAAAAAAAA;
    rg_trap_interrupt = 1'h0;
    stage1_rg_full = 1'h0;
    stage2_rg_full = 1'h0;
    stage2_rg_resetting = 1'h0;
    stage2_rg_stage2 =
	298'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage3_rg_full = 1'h0;
    stage3_rg_stage3 = 168'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("%0d: Pipeline State:  minstret:%0d  cur_priv:%0d  mstatus:%0x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 rg_cur_priv,
		 csr_regfile$read_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write("MStatus{",
	       "sd:%0d",
	       csr_regfile$read_mstatus[14:13] == 2'h3 ||
	       csr_regfile$read_mstatus[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] == 2'd2)
	$write(" sxl:%0d uxl:%0d", sxl__h6200, uxl__h6201);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tsr:%0d", csr_regfile$read_mstatus[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tw:%0d", csr_regfile$read_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tvm:%0d", csr_regfile$read_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mxr:%0d", csr_regfile$read_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" sum:%0d", csr_regfile$read_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mprv:%0d", csr_regfile$read_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" xs:%0d", csr_regfile$read_mstatus[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" fs:%0d", csr_regfile$read_mstatus[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mpp:%0d", csr_regfile$read_mstatus[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" spp:%0d", csr_regfile$read_mstatus[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" pies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[7],
	       csr_regfile$read_mstatus[5],
	       csr_regfile$read_mstatus[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" ies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[3],
	       csr_regfile$read_mstatus[1],
	       csr_regfile$read_mstatus[0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    Stage3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_Stage3");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full) $write(" PIPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_full || !stage3_rg_stage3[69]))
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full && stage3_rg_stage3[69])
	$write("Rd %0d ",
	       stage3_rg_stage3[68:64],
	       "rd_val:%h",
	       stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage2: pc 0x%08h instr 0x%08h priv %0d",
		 stage2_rg_stage2[295:232],
		 stage2_rg_stage2[231:200],
		 stage2_rg_stage2[297:296]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd0)
	$write("Output_Stage2", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd1)
	$write("Output_Stage2", " BUSY: pc:%0h", stage2_rg_stage2[295:232]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd3)
	$write("Output_Stage2", " NONPIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3)
	$write("Output_Stage2", " PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[295:232],
	       stage2_rg_stage2[231:200],
	       stage2_rg_stage2[297:296]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3 &&
	  stage2_rg_stage2[199:197] != 3'd0 &&
	  IF_stage2_rg_stage2_01_BITS_199_TO_197_02_EQ_1_ETC___d145)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3 &&
	  (stage2_rg_stage2[199:197] == 3'd0 ||
	   IF_stage2_rg_stage2_01_BITS_199_TO_197_02_EQ_1_ETC___d154))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h7131,
	       x_out_data_to_stage3_rd_val__h7132);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd3)
	$write("'h%h", stage2_rg_stage2[295:232]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd3)
	$write("'h%h", near_mem$dmem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd3)
	$write("'h%h", stage2_rg_stage2[191:128], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd3)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd3)
	$write("'h%h", stage2_rg_stage2[295:232]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd3)
	$write("'h%h", near_mem$dmem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd3)
	$write("'h%h", stage2_rg_stage2[191:128], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd1 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d191 == 2'd0)
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d191 != 2'd0)
	$write("Rd %0d ", x_out_bypass_rd__h7470);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d191 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d191 == 2'd1)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d191 != 2'd0 &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d191 != 2'd1)
	$write("rd_val:%h", x_out_bypass_rd_val__h7471);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage1: pc 0x%08h instr 0x%08h priv %0d",
		 imem_c_rg_pc,
		 x_out_data_to_stage2_instr__h13709,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("Output_Stage1", " BUSY pc:%h", imem_c_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write("Output_Stage1", " NONPIPE: pc:%h", imem_c_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804)
	$write("Output_Stage1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full)
	$write("Output_Stage1", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 == 4'd0)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 == 4'd1)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 == 4'd2)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 == 4'd3)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 == 4'd4)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 == 4'd5)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 == 4'd6)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 == 4'd7)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 == 4'd8)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 == 4'd9)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d874 == 4'd10)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  NOT_near_mem_imem_exc__54_39_AND_IF_IF_imem_c__ETC___d940)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       imem_c_rg_pc,
	       x_out_data_to_stage2_instr__h13709,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 == 3'd0)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 == 3'd1)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 == 3'd2)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d799 ||
	   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d801) &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 == 3'd3)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  NOT_near_mem_imem_exc__54_39_AND_IF_IF_imem_c__ETC___d981)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h13711);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h13712,
	       x_out_data_to_stage2_val1__h13713,
	       x_out_data_to_stage2_val2__h13714);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1117)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1120)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1123)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1126)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1129)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1132)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1135)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1138)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1141)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1144)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1147)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d553 &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1150)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write("'h%h", imem_c_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write("'h%h", x_out_trap_info_exc_code__h15554);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d737)
	$write("'h%h", value__h15598, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d804)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_05_OR_imem_c_rg_pc_BIT_ETC___d538)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $display("----------------");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run_redundant &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_debug_run_redundant",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run_redundant)
	$display("%0d: %m.debug_run_redundant: CPU already running.",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_debug_halt_redundant",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant)
	$display("%0d: %m.rl_debug_halt_redundant: CPU already halted.",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant) $write("    state = ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd0)
	$write("CPU_RESET1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd1)
	$write("CPU_RESET2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd2)
	$write("CPU_GDB_PAUSING");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd3)
	$write("CPU_DEBUG_MODE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd4)
	$write("CPU_RUNNING");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd5)
	$write("CPU_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd6)
	$write("CPU_START_TRAP_HANDLER");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd7)
	$write("CPU_CSRRW_2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd8)
	$write("CPU_CSRR_S_or_C_2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd9)
	$write("CPU_CSRRX_RESTART");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd10)
	$write("CPU_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd11)
	$write("CPU_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd12)
	$write("CPU_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state != 4'd0 &&
	  rg_state != 4'd1 &&
	  rg_state != 4'd2 &&
	  rg_state != 4'd3 &&
	  rg_state != 4'd4 &&
	  rg_state != 4'd5 &&
	  rg_state != 4'd6 &&
	  rg_state != 4'd7 &&
	  rg_state != 4'd8 &&
	  rg_state != 4'd9 &&
	  rg_state != 4'd10 &&
	  rg_state != 4'd11 &&
	  rg_state != 4'd12)
	$write("CPU_WFI_PAUSED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_read_gpr &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_debug_read_gpr: reg %0d => 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 f_gpr_reqs$D_OUT[68:64],
		 gpr_regfile$read_rs1_port2);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_write_gpr &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_debug_write_gpr: reg %0d <= 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 f_gpr_reqs$D_OUT[68:64],
		 f_gpr_reqs$D_OUT[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_debug_gpr_access_busy",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_read_csr &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_debug_read_csr: csr %0d => 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 f_csr_reqs$D_OUT[75:64],
		 csr_regfile$read_csr_port2[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_debug_run", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("    CPU_Stage1.enq: 0x%08h", csr_regfile$read_dpc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run)
	$display("%0d: %m.rl_debug_run: restart at PC = 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_dpc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_write_csr &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_debug_write_csr: csr 0x%0h 0x%0h <= 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 f_csr_reqs$D_OUT[75:64],
		 f_csr_reqs$D_OUT[63:0],
		 { csr_regfile$mav_csr_write[128:64],
		   csr_regfile$mav_csr_write[64] ?
		     csr_regfile$mav_csr_write[63:0] :
		     64'hAAAAAAAAAAAAAAAA });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_pipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[69] &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("    S3.fa_deq: write GRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[68:64],
		 stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$write("    S3.enq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[295:232],
	       stage2_rg_stage2[231:200],
	       stage2_rg_stage2[297:296]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44 &&
	  stage2_rg_stage2[199:197] != 3'd0 &&
	  IF_stage2_rg_stage2_01_BITS_199_TO_197_02_EQ_1_ETC___d145)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44 &&
	  (stage2_rg_stage2[199:197] == 3'd0 ||
	   IF_stage2_rg_stage2_01_BITS_199_TO_197_02_EQ_1_ETC___d154))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h7131,
	       x_out_data_to_stage3_rd_val__h7132);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_00_THEN_IF_stage2_rg_stage2__ETC___d131 == 2'd2 &&
	  cur_verbosity__h3678 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage2_rg_stage2[295:232],
		 stage2_rg_stage2[231:200],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1346 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$write("    CPU_Stage2.enq (Data_Stage1_to_Stage2) ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1346 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       imem_c_rg_pc,
	       x_out_data_to_stage2_instr__h13709,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1346 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1346 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44 &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 == 3'd0)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1346 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44 &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 == 3'd1)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1346 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44 &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 == 3'd2)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1346 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44 &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 == 3'd3)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1346 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44 &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 != 3'd0 &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 != 3'd1 &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 != 3'd2 &&
	  IF_NOT_stage1_rg_full_03_04_OR_NOT_near_mem_im_ETC___d957 != 3'd3)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1346 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h13711);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1346 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h13712,
	       x_out_data_to_stage2_val1__h13713,
	       x_out_data_to_stage2_val2__h13714);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  near_mem_imem_exc__54_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1346 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_stage1_rg_full_03_04_OR_NOT_near_mem_imem__ETC___d1412)
	$display("    CPU_Stage1.enq: 0x%08h", x_out_next_pc__h13678);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_debug_halt", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_debug_halt", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_debug_csr_access_busy",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  cfg_verbosity != 4'd0)
	$display("%0d: %m.rl_reset_complete: restart at PC = 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 soc_map$m_pc_reset_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("    CPU_Stage1.enq: 0x%08h", soc_map$m_pc_reset_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset &&
	  cfg_verbosity != 4'd0)
	$display("%0d: %m.rl_reset_complete: entering DEBUG_MODE",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_stage2_nonpipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_stage1_trap", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap && cur_verbosity__h3678 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_trap_info[131:68],
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap && cur_verbosity__h3678 != 4'd0)
	$display("    mcause:0x%0h  epc 0x%0h  tval:0x%0h  next_pc 0x%0h, new_priv %0d new_mstatus 0x%0h",
		 csr_regfile$csr_trap_actions[65:2],
		 rg_trap_info[131:68],
		 rg_trap_info[63:0],
		 csr_regfile$csr_trap_actions[193:130],
		 csr_regfile$csr_trap_actions[1:0],
		 csr_regfile$csr_trap_actions[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_stage1_CSRR_W", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_stage1_CSRR_W_2", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1 &&
	  cur_verbosity__h3678 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_csr_pc,
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("    S1: write CSRRW/CSRRWI Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h21422,
		 rg_trap_instr[31:20],
		 csr_regfile$read_csr[63:0],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	  !csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("    Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h21422,
		 rg_trap_instr[31:20],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_stage1_CSRR_S_or_C",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_stage1_CSRR_S_or_C_2",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  csr_regfile$access_permitted_2 &&
	  cur_verbosity__h3678 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_csr_pc,
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("    S1: write CSRR_S_or_C: Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h22101,
		 rg_trap_instr[31:20],
		 csr_regfile$read_csr[63:0],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  !csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("    Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h22101,
		 rg_trap_instr[31:20],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_stage1_restart_after_csrrx",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("    CPU_Stage1.enq: 0x%08h", x_out_next_pc__h13678);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_stage1_xRET", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h3678 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_c_rg_pc,
		 x_out_data_to_stage2_instr__h13709,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h3678 != 4'd0)
	$display("    xRET: next_pc:0x%0h  new mstatus:0x%0h  new priv:%0d",
		 csr_regfile$csr_ret_actions[129:66],
		 csr_regfile$csr_ret_actions[63:0],
		 csr_regfile$csr_ret_actions[65:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_finish_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("    CPU.rl_finish_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I && cur_verbosity__h3678 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_c_rg_pc,
		 x_out_data_to_stage2_instr__h13709,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE && cur_verbosity__h3678 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_c_rg_pc,
		 x_out_data_to_stage2_instr__h13709,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_finish_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("    CPU.rl_finish_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_stage1_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA && cur_verbosity__h3678 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_c_rg_pc,
		 x_out_data_to_stage2_instr__h13709,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_stage1_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_stage1_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI && cur_verbosity__h3678 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_c_rg_pc,
		 x_out_data_to_stage2_instr__h13709,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("    CPU.rl_stage1_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_finish_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("    CPU.rl_finish_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_WFI_resume", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_reset_from_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_trap_BREAK_to_Debug_Mode",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode)
	$display("%0d: %m.rl_trap_BREAK_to_Debug_Mode: PC 0x%08h instr 0x%08h",
		 csr_regfile$read_csr_mcycle,
		 imem_c_rg_pc,
		 x_out_data_to_stage2_instr__h13709);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("    Flushing caches");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_BREAK_cache_flush_finish &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_BREAK_cache_flush_finish",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_Debug_Module)
	$display("%0d: %m.rl_reset_from_Debug_Module",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_stop &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_stage1_stop", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_stop && rg_stop_req)
	$display("%0d: %m.rl_stage1_stop: Stop for debugger. minstret %0d priv %0d PC 0x%0h instr 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 rg_cur_priv,
		 imem_c_rg_pc,
		 x_out_data_to_stage2_instr__h13709);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_stop && rg_stop_req)
	$display("CPI: %0d.%0d = (%0d/%0d) since last 'continue'",
		 cpi__h28523,
		 cpifrac__h28524,
		 delta_CPI_cycles__h28519,
		 _theResult____h28521);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_stop && !rg_stop_req)
	$display("%0d: %m.rl_stage1_stop: Stop after single-step. PC = 0x%08h",
		 csr_regfile$read_csr_mcycle,
		 imem_c_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__8_ULT_cf_ETC___d44)
	$display("%0d: %m.rl_stage1_interrupt", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start && cfg_verbosity != 4'd0)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start && cfg_verbosity != 4'd0)
	$write("CPU: Bluespec  RISC-V  Piccolo  v3.0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start && cfg_verbosity != 4'd0)
	$display(" (RV64)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start && cfg_verbosity != 4'd0)
	$display("Copyright (c) 2016-2020 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start && cfg_verbosity != 4'd0)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start && cur_verbosity__h3678 != 4'd0)
	$display("%0d: %m.rl_reset_start", csr_regfile$read_csr_mcycle);
    if (WILL_FIRE_RL_imem_c_rl_assert_fail)
      begin
        v__h2389 = $stime;
	#0;
      end
    v__h2383 = v__h2389 / 32'd10;
    if (WILL_FIRE_RL_imem_c_rl_assert_fail)
      $display("%0d: ERROR: CPU_Fetch_C: imem32.is_i32_not_i16 is False",
	       v__h2383);
    if (WILL_FIRE_RL_imem_c_rl_assert_fail) $finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkCPU

