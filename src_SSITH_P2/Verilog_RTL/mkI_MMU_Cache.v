//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// valid                          O     1
// addr                           O    64 reg
// word64                         O    64
// exc                            O     1
// exc_code                       O     4
// RDY_flush_server_request_put   O     1 reg
// RDY_flush_server_response_get  O     1 reg
// RDY_tlb_flush                  O     1 const
// ptw_client_request_get         O   128 reg
// RDY_ptw_client_request_get     O     1 reg
// RDY_ptw_client_response_put    O     1 reg
// pte_writeback_g_get            O   128 reg
// RDY_pte_writeback_g_get        O     1 reg
// mem_master_awvalid             O     1 reg
// mem_master_awid                O     4 reg
// mem_master_awaddr              O    64 reg
// mem_master_awlen               O     8 reg
// mem_master_awsize              O     3 reg
// mem_master_awburst             O     2 reg
// mem_master_awlock              O     1 reg
// mem_master_awcache             O     4 reg
// mem_master_awprot              O     3 reg
// mem_master_awqos               O     4 reg
// mem_master_awregion            O     4 reg
// mem_master_wvalid              O     1 reg
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_wlast               O     1 reg
// mem_master_bready              O     1 reg
// mem_master_arvalid             O     1 reg
// mem_master_arid                O     4 reg
// mem_master_araddr              O    64 reg
// mem_master_arlen               O     8 reg
// mem_master_arsize              O     3 reg
// mem_master_arburst             O     2 reg
// mem_master_arlock              O     1 reg
// mem_master_arcache             O     4 reg
// mem_master_arprot              O     3 reg
// mem_master_arqos               O     4 reg
// mem_master_arregion            O     4 reg
// mem_master_rready              O     1 reg
// RDY_ma_ddr4_ready              O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// req_va                         I    64
// req_priv                       I     2
// req_sstatus_SUM                I     1
// req_mstatus_MXR                I     1
// req_satp                       I    64
// flush_server_request_put       I     1 reg
// ptw_client_response_put        I   132 reg
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bid                 I     4 reg
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rid                 I     4 reg
// mem_master_rdata               I    64 reg
// mem_master_rresp               I     2 reg
// mem_master_rlast               I     1 reg
// EN_req                         I     1
// EN_flush_server_request_put    I     1
// EN_flush_server_response_get   I     1
// EN_tlb_flush                   I     1
// EN_ptw_client_response_put     I     1
// EN_ma_ddr4_ready               I     1
// EN_ptw_client_request_get      I     1
// EN_pte_writeback_g_get         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkI_MMU_Cache(CLK,
		     RST_N,

		     req_va,
		     req_priv,
		     req_sstatus_SUM,
		     req_mstatus_MXR,
		     req_satp,
		     EN_req,

		     valid,

		     addr,

		     word64,

		     exc,

		     exc_code,

		     flush_server_request_put,
		     EN_flush_server_request_put,
		     RDY_flush_server_request_put,

		     EN_flush_server_response_get,
		     RDY_flush_server_response_get,

		     EN_tlb_flush,
		     RDY_tlb_flush,

		     EN_ptw_client_request_get,
		     ptw_client_request_get,
		     RDY_ptw_client_request_get,

		     ptw_client_response_put,
		     EN_ptw_client_response_put,
		     RDY_ptw_client_response_put,

		     EN_pte_writeback_g_get,
		     pte_writeback_g_get,
		     RDY_pte_writeback_g_get,

		     mem_master_awvalid,

		     mem_master_awid,

		     mem_master_awaddr,

		     mem_master_awlen,

		     mem_master_awsize,

		     mem_master_awburst,

		     mem_master_awlock,

		     mem_master_awcache,

		     mem_master_awprot,

		     mem_master_awqos,

		     mem_master_awregion,

		     mem_master_awready,

		     mem_master_wvalid,

		     mem_master_wdata,

		     mem_master_wstrb,

		     mem_master_wlast,

		     mem_master_wready,

		     mem_master_bvalid,
		     mem_master_bid,
		     mem_master_bresp,

		     mem_master_bready,

		     mem_master_arvalid,

		     mem_master_arid,

		     mem_master_araddr,

		     mem_master_arlen,

		     mem_master_arsize,

		     mem_master_arburst,

		     mem_master_arlock,

		     mem_master_arcache,

		     mem_master_arprot,

		     mem_master_arqos,

		     mem_master_arregion,

		     mem_master_arready,

		     mem_master_rvalid,
		     mem_master_rid,
		     mem_master_rdata,
		     mem_master_rresp,
		     mem_master_rlast,

		     mem_master_rready,

		     EN_ma_ddr4_ready,
		     RDY_ma_ddr4_ready);
  input  CLK;
  input  RST_N;

  // action method req
  input  [63 : 0] req_va;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [63 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [63 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method flush_server_request_put
  input  flush_server_request_put;
  input  EN_flush_server_request_put;
  output RDY_flush_server_request_put;

  // action method flush_server_response_get
  input  EN_flush_server_response_get;
  output RDY_flush_server_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // actionvalue method ptw_client_request_get
  input  EN_ptw_client_request_get;
  output [127 : 0] ptw_client_request_get;
  output RDY_ptw_client_request_get;

  // action method ptw_client_response_put
  input  [131 : 0] ptw_client_response_put;
  input  EN_ptw_client_response_put;
  output RDY_ptw_client_response_put;

  // actionvalue method pte_writeback_g_get
  input  EN_pte_writeback_g_get;
  output [127 : 0] pte_writeback_g_get;
  output RDY_pte_writeback_g_get;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_m_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_m_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_m_awlock
  output mem_master_awlock;

  // value method mem_master_m_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_m_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_m_wlast
  output mem_master_wlast;

  // value method mem_master_m_wuser

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_m_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_m_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_m_arlock
  output mem_master_arlock;

  // value method mem_master_m_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_m_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;

  // value method mem_master_m_rready
  output mem_master_rready;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // signals for module outputs
  wire [127 : 0] pte_writeback_g_get, ptw_client_request_get;
  wire [63 : 0] addr,
		mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		word64;
  wire [7 : 0] mem_master_arlen, mem_master_awlen, mem_master_wstrb;
  wire [3 : 0] exc_code,
	       mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst;
  wire RDY_flush_server_request_put,
       RDY_flush_server_response_get,
       RDY_ma_ddr4_ready,
       RDY_pte_writeback_g_get,
       RDY_ptw_client_request_get,
       RDY_ptw_client_response_put,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       valid;

  // inlined wires
  wire [207 : 0] wire_mmu_cache_req$wget;
  wire dw_exc$wget, dw_valid$wget, dw_valid$whas;

  // register rg_exc
  reg rg_exc;
  reg rg_exc$D_IN;
  wire rg_exc$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  reg [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_fsm_flush_state
  reg rg_fsm_flush_state;
  wire rg_fsm_flush_state$D_IN, rg_fsm_flush_state$EN;

  // register rg_fsm_main_state
  reg [2 : 0] rg_fsm_main_state;
  reg [2 : 0] rg_fsm_main_state$D_IN;
  wire rg_fsm_main_state$EN;

  // register rg_ld_val
  reg [63 : 0] rg_ld_val;
  wire [63 : 0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;

  // register rg_pa
  reg [63 : 0] rg_pa;
  wire [63 : 0] rg_pa$D_IN;
  wire rg_pa$EN;

  // register rg_req
  reg [207 : 0] rg_req;
  wire [207 : 0] rg_req$D_IN;
  wire rg_req$EN;

  // register rg_valid
  reg rg_valid;
  wire rg_valid$D_IN, rg_valid$EN;

  // register verbosity
  reg [2 : 0] verbosity;
  wire [2 : 0] verbosity$D_IN;
  wire verbosity$EN;

  // ports of submodule axi4_adapter
  wire [66 : 0] axi4_adapter$p_mem_single_req_put;
  wire [64 : 0] axi4_adapter$g_mem_line_read_data_get,
		axi4_adapter$g_mem_single_read_data_get,
		axi4_adapter$p_mem_line_req_put;
  wire [63 : 0] axi4_adapter$mem_master_araddr,
		axi4_adapter$mem_master_awaddr,
		axi4_adapter$mem_master_rdata,
		axi4_adapter$mem_master_wdata,
		axi4_adapter$p_mem_line_write_data_put,
		axi4_adapter$p_mem_single_write_data_put;
  wire [7 : 0] axi4_adapter$mem_master_arlen,
	       axi4_adapter$mem_master_awlen,
	       axi4_adapter$mem_master_wstrb;
  wire [3 : 0] axi4_adapter$mem_master_arcache,
	       axi4_adapter$mem_master_arid,
	       axi4_adapter$mem_master_arqos,
	       axi4_adapter$mem_master_arregion,
	       axi4_adapter$mem_master_awcache,
	       axi4_adapter$mem_master_awid,
	       axi4_adapter$mem_master_awqos,
	       axi4_adapter$mem_master_awregion,
	       axi4_adapter$mem_master_bid,
	       axi4_adapter$mem_master_rid;
  wire [2 : 0] axi4_adapter$mem_master_arprot,
	       axi4_adapter$mem_master_arsize,
	       axi4_adapter$mem_master_awprot,
	       axi4_adapter$mem_master_awsize;
  wire [1 : 0] axi4_adapter$mem_master_arburst,
	       axi4_adapter$mem_master_awburst,
	       axi4_adapter$mem_master_bresp,
	       axi4_adapter$mem_master_rresp;
  wire axi4_adapter$EN_g_mem_line_read_data_get,
       axi4_adapter$EN_g_mem_single_read_data_get,
       axi4_adapter$EN_ma_ddr4_ready,
       axi4_adapter$EN_p_mem_line_req_put,
       axi4_adapter$EN_p_mem_line_write_data_put,
       axi4_adapter$EN_p_mem_single_req_put,
       axi4_adapter$EN_p_mem_single_write_data_put,
       axi4_adapter$RDY_g_mem_line_read_data_get,
       axi4_adapter$RDY_g_mem_single_read_data_get,
       axi4_adapter$RDY_p_mem_line_req_put,
       axi4_adapter$RDY_p_mem_line_write_data_put,
       axi4_adapter$RDY_p_mem_single_req_put,
       axi4_adapter$RDY_p_mem_single_write_data_put,
       axi4_adapter$mem_master_arlock,
       axi4_adapter$mem_master_arready,
       axi4_adapter$mem_master_arvalid,
       axi4_adapter$mem_master_awlock,
       axi4_adapter$mem_master_awready,
       axi4_adapter$mem_master_awvalid,
       axi4_adapter$mem_master_bready,
       axi4_adapter$mem_master_bvalid,
       axi4_adapter$mem_master_rlast,
       axi4_adapter$mem_master_rready,
       axi4_adapter$mem_master_rvalid,
       axi4_adapter$mem_master_wlast,
       axi4_adapter$mem_master_wready,
       axi4_adapter$mem_master_wvalid;

  // ports of submodule cache
  wire [207 : 0] cache$mav_request_pa_req;
  wire [129 : 0] cache$mav_request_pa;
  wire [64 : 0] cache$g_mem_req_get, cache$p_mem_read_data_put;
  wire [63 : 0] cache$g_write_data_get,
		cache$ma_request_va_va,
		cache$mav_request_pa_pa;
  wire cache$EN_flush_server_request_put,
       cache$EN_flush_server_response_get,
       cache$EN_g_mem_req_get,
       cache$EN_g_write_data_get,
       cache$EN_ma_request_va,
       cache$EN_mav_request_pa,
       cache$EN_p_mem_read_data_put,
       cache$RDY_flush_server_request_put,
       cache$RDY_flush_server_response_get,
       cache$RDY_g_mem_req_get,
       cache$RDY_g_write_data_get,
       cache$RDY_mav_request_pa,
       cache$RDY_mv_refill_ok,
       cache$RDY_p_mem_read_data_put,
       cache$flush_server_request_put,
       cache$mv_refill_ok;

  // ports of submodule f_cache_flush_reqs
  wire f_cache_flush_reqs$CLR,
       f_cache_flush_reqs$DEQ,
       f_cache_flush_reqs$D_IN,
       f_cache_flush_reqs$D_OUT,
       f_cache_flush_reqs$EMPTY_N,
       f_cache_flush_reqs$ENQ,
       f_cache_flush_reqs$FULL_N;

  // ports of submodule f_cache_flush_rsps
  wire f_cache_flush_rsps$CLR,
       f_cache_flush_rsps$DEQ,
       f_cache_flush_rsps$EMPTY_N,
       f_cache_flush_rsps$ENQ,
       f_cache_flush_rsps$FULL_N;

  // ports of submodule f_pte_writebacks
  wire [127 : 0] f_pte_writebacks$D_IN, f_pte_writebacks$D_OUT;
  wire f_pte_writebacks$CLR,
       f_pte_writebacks$DEQ,
       f_pte_writebacks$EMPTY_N,
       f_pte_writebacks$ENQ,
       f_pte_writebacks$FULL_N;

  // ports of submodule f_ptw_reqs
  wire [127 : 0] f_ptw_reqs$D_IN, f_ptw_reqs$D_OUT;
  wire f_ptw_reqs$CLR,
       f_ptw_reqs$DEQ,
       f_ptw_reqs$EMPTY_N,
       f_ptw_reqs$ENQ,
       f_ptw_reqs$FULL_N;

  // ports of submodule f_ptw_rsps
  wire [131 : 0] f_ptw_rsps$D_IN, f_ptw_rsps$D_OUT;
  wire f_ptw_rsps$CLR,
       f_ptw_rsps$DEQ,
       f_ptw_rsps$EMPTY_N,
       f_ptw_rsps$ENQ,
       f_ptw_rsps$FULL_N;

  // ports of submodule mmio
  wire [207 : 0] mmio$req_mmu_cache_req;
  wire [66 : 0] mmio$g_mem_req_get;
  wire [64 : 0] mmio$p_mem_read_data_put;
  wire [63 : 0] mmio$g_write_data_get, mmio$result_snd_fst, mmio$start_pa;
  wire mmio$EN_g_mem_req_get,
       mmio$EN_g_write_data_get,
       mmio$EN_p_mem_read_data_put,
       mmio$EN_req,
       mmio$EN_start,
       mmio$RDY_g_mem_req_get,
       mmio$RDY_g_write_data_get,
       mmio$RDY_p_mem_read_data_put,
       mmio$RDY_result_fst,
       mmio$RDY_result_snd_fst,
       mmio$result_fst;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;
  wire soc_map$m_is_mem_addr;

  // ports of submodule tlb
  wire [200 : 0] tlb$mv_vm_xlate;
  wire [63 : 0] tlb$ma_insert_pte,
		tlb$ma_insert_pte_pa,
		tlb$mv_vm_xlate_satp,
		tlb$mv_vm_xlate_va;
  wire [26 : 0] tlb$ma_insert_vpn;
  wire [15 : 0] tlb$ma_insert_asid;
  wire [1 : 0] tlb$ma_insert_level, tlb$mv_vm_xlate_priv;
  wire tlb$EN_ma_flush,
       tlb$EN_ma_insert,
       tlb$mv_vm_xlate_dmem_not_imem,
       tlb$mv_vm_xlate_mstatus_MXR,
       tlb$mv_vm_xlate_read_not_write,
       tlb$mv_vm_xlate_sstatus_SUM;

  // rule scheduling signals
  wire CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_mkConnectionGetPut_2,
       CAN_FIRE_RL_mkConnectionGetPut_3,
       CAN_FIRE_RL_mkConnectionGetPut_4,
       CAN_FIRE_RL_mkConnectionGetPut_5,
       CAN_FIRE_RL_rl_cache_flush_finish,
       CAN_FIRE_RL_rl_cache_flush_start,
       CAN_FIRE_RL_rl_fsm_main_PA,
       CAN_FIRE_RL_rl_fsm_main_PTW_finished,
       CAN_FIRE_RL_rl_fsm_main_PTW_start,
       CAN_FIRE_RL_rl_fsm_main_cache_WAIT,
       CAN_FIRE_RL_rl_fsm_main_idle,
       CAN_FIRE_RL_rl_fsm_main_mmio_WAIT,
       CAN_FIRE_RL_rl_req,
       CAN_FIRE_flush_server_request_put,
       CAN_FIRE_flush_server_response_get,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_pte_writeback_g_get,
       CAN_FIRE_ptw_client_request_get,
       CAN_FIRE_ptw_client_response_put,
       CAN_FIRE_req,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionGetPut_2,
       WILL_FIRE_RL_mkConnectionGetPut_3,
       WILL_FIRE_RL_mkConnectionGetPut_4,
       WILL_FIRE_RL_mkConnectionGetPut_5,
       WILL_FIRE_RL_rl_cache_flush_finish,
       WILL_FIRE_RL_rl_cache_flush_start,
       WILL_FIRE_RL_rl_fsm_main_PA,
       WILL_FIRE_RL_rl_fsm_main_PTW_finished,
       WILL_FIRE_RL_rl_fsm_main_PTW_start,
       WILL_FIRE_RL_rl_fsm_main_cache_WAIT,
       WILL_FIRE_RL_rl_fsm_main_idle,
       WILL_FIRE_RL_rl_fsm_main_mmio_WAIT,
       WILL_FIRE_RL_rl_req,
       WILL_FIRE_flush_server_request_put,
       WILL_FIRE_flush_server_response_get,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_pte_writeback_g_get,
       WILL_FIRE_ptw_client_request_get,
       WILL_FIRE_ptw_client_response_put,
       WILL_FIRE_req,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  reg [2 : 0] MUX_rg_fsm_main_state$write_1__VAL_7;
  wire [3 : 0] MUX_rg_exc_code$write_1__VAL_1;
  wire [2 : 0] MUX_rg_fsm_main_state$write_1__VAL_2,
	       MUX_rg_fsm_main_state$write_1__VAL_3,
	       MUX_rg_fsm_main_state$write_1__VAL_6;
  wire MUX_cache$ma_request_va_1__SEL_1,
       MUX_dw_exc$wset_1__SEL_1,
       MUX_rg_exc$write_1__SEL_1,
       MUX_rg_exc$write_1__SEL_2,
       MUX_rg_exc$write_1__SEL_5,
       MUX_rg_fsm_main_state$write_1__SEL_7,
       MUX_rg_valid$write_1__SEL_4,
       MUX_tlb$ma_insert_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h2692;
  reg [31 : 0] v__h3655;
  reg [31 : 0] v__h4916;
  reg [31 : 0] v__h4754;
  reg [31 : 0] v__h4976;
  reg [31 : 0] v__h5308;
  reg [31 : 0] v__h5496;
  reg [31 : 0] v__h5751;
  reg [31 : 0] v__h2887;
  reg [31 : 0] v__h6021;
  reg [31 : 0] v__h6141;
  reg [31 : 0] v__h6270;
  reg [31 : 0] v__h6638;
  reg [31 : 0] v__h6779;
  reg [31 : 0] v__h2686;
  reg [31 : 0] v__h2881;
  reg [31 : 0] v__h3649;
  reg [31 : 0] v__h4748;
  reg [31 : 0] v__h4910;
  reg [31 : 0] v__h4970;
  reg [31 : 0] v__h5302;
  reg [31 : 0] v__h5490;
  reg [31 : 0] v__h5745;
  reg [31 : 0] v__h6015;
  reg [31 : 0] v__h6135;
  reg [31 : 0] v__h6264;
  reg [31 : 0] v__h6632;
  reg [31 : 0] v__h6773;
  // synopsys translate_on

  // remaining internal signals
  wire NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d395,
       NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d409,
       NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d413,
       NOT_verbosity_1_ULT_2_2___d33,
       NOT_verbosity_1_ULT_3_60___d261,
       NOT_wire_mmu_cache_req_wget__5_BITS_204_TO_203_ETC___d147,
       soc_map_m_is_mem_addr_tlb_mv_vm_xlate_rg_req_5_ETC___d468,
       tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139_57_r_ETC___d176,
       wire_mmu_cache_req_wget__5_BITS_204_TO_203_26__ETC___d155;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas && dw_valid$wget ;

  // value method addr
  assign addr = rg_req[202:139] ;

  // value method word64
  assign word64 =
	     MUX_dw_exc$wset_1__SEL_1 ?
	       cache$mav_request_pa[127:64] :
	       rg_ld_val ;

  // value method exc
  assign exc = dw_valid$whas && dw_exc$wget ;

  // value method exc_code
  assign exc_code =
	     MUX_dw_exc$wset_1__SEL_1 ?
	       4'b1010 /* unspecified value */  :
	       rg_exc_code ;

  // action method flush_server_request_put
  assign RDY_flush_server_request_put = f_cache_flush_reqs$FULL_N ;
  assign CAN_FIRE_flush_server_request_put = f_cache_flush_reqs$FULL_N ;
  assign WILL_FIRE_flush_server_request_put = EN_flush_server_request_put ;

  // action method flush_server_response_get
  assign RDY_flush_server_response_get = f_cache_flush_rsps$EMPTY_N ;
  assign CAN_FIRE_flush_server_response_get = f_cache_flush_rsps$EMPTY_N ;
  assign WILL_FIRE_flush_server_response_get = EN_flush_server_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // actionvalue method ptw_client_request_get
  assign ptw_client_request_get = f_ptw_reqs$D_OUT ;
  assign RDY_ptw_client_request_get = f_ptw_reqs$EMPTY_N ;
  assign CAN_FIRE_ptw_client_request_get = f_ptw_reqs$EMPTY_N ;
  assign WILL_FIRE_ptw_client_request_get = EN_ptw_client_request_get ;

  // action method ptw_client_response_put
  assign RDY_ptw_client_response_put = f_ptw_rsps$FULL_N ;
  assign CAN_FIRE_ptw_client_response_put = f_ptw_rsps$FULL_N ;
  assign WILL_FIRE_ptw_client_response_put = EN_ptw_client_response_put ;

  // actionvalue method pte_writeback_g_get
  assign pte_writeback_g_get = f_pte_writebacks$D_OUT ;
  assign RDY_pte_writeback_g_get = f_pte_writebacks$EMPTY_N ;
  assign CAN_FIRE_pte_writeback_g_get = f_pte_writebacks$EMPTY_N ;
  assign WILL_FIRE_pte_writeback_g_get = EN_pte_writeback_g_get ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid = axi4_adapter$mem_master_awvalid ;

  // value method mem_master_m_awid
  assign mem_master_awid = axi4_adapter$mem_master_awid ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = axi4_adapter$mem_master_awaddr ;

  // value method mem_master_m_awlen
  assign mem_master_awlen = axi4_adapter$mem_master_awlen ;

  // value method mem_master_m_awsize
  assign mem_master_awsize = axi4_adapter$mem_master_awsize ;

  // value method mem_master_m_awburst
  assign mem_master_awburst = axi4_adapter$mem_master_awburst ;

  // value method mem_master_m_awlock
  assign mem_master_awlock = axi4_adapter$mem_master_awlock ;

  // value method mem_master_m_awcache
  assign mem_master_awcache = axi4_adapter$mem_master_awcache ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = axi4_adapter$mem_master_awprot ;

  // value method mem_master_m_awqos
  assign mem_master_awqos = axi4_adapter$mem_master_awqos ;

  // value method mem_master_m_awregion
  assign mem_master_awregion = axi4_adapter$mem_master_awregion ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid = axi4_adapter$mem_master_wvalid ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = axi4_adapter$mem_master_wdata ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = axi4_adapter$mem_master_wstrb ;

  // value method mem_master_m_wlast
  assign mem_master_wlast = axi4_adapter$mem_master_wlast ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = axi4_adapter$mem_master_bready ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid = axi4_adapter$mem_master_arvalid ;

  // value method mem_master_m_arid
  assign mem_master_arid = axi4_adapter$mem_master_arid ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = axi4_adapter$mem_master_araddr ;

  // value method mem_master_m_arlen
  assign mem_master_arlen = axi4_adapter$mem_master_arlen ;

  // value method mem_master_m_arsize
  assign mem_master_arsize = axi4_adapter$mem_master_arsize ;

  // value method mem_master_m_arburst
  assign mem_master_arburst = axi4_adapter$mem_master_arburst ;

  // value method mem_master_m_arlock
  assign mem_master_arlock = axi4_adapter$mem_master_arlock ;

  // value method mem_master_m_arcache
  assign mem_master_arcache = axi4_adapter$mem_master_arcache ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = axi4_adapter$mem_master_arprot ;

  // value method mem_master_m_arqos
  assign mem_master_arqos = axi4_adapter$mem_master_arqos ;

  // value method mem_master_m_arregion
  assign mem_master_arregion = axi4_adapter$mem_master_arregion ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = axi4_adapter$mem_master_rready ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready = 1'd1 ;
  assign CAN_FIRE_ma_ddr4_ready = 1'd1 ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // submodule axi4_adapter
  mkMMU_Cache_AXI4_Adapter #(.verbosity(3'd0)) axi4_adapter(.CLK(CLK),
							    .RST_N(RST_N),
							    .mem_master_arready(axi4_adapter$mem_master_arready),
							    .mem_master_awready(axi4_adapter$mem_master_awready),
							    .mem_master_bid(axi4_adapter$mem_master_bid),
							    .mem_master_bresp(axi4_adapter$mem_master_bresp),
							    .mem_master_bvalid(axi4_adapter$mem_master_bvalid),
							    .mem_master_rdata(axi4_adapter$mem_master_rdata),
							    .mem_master_rid(axi4_adapter$mem_master_rid),
							    .mem_master_rlast(axi4_adapter$mem_master_rlast),
							    .mem_master_rresp(axi4_adapter$mem_master_rresp),
							    .mem_master_rvalid(axi4_adapter$mem_master_rvalid),
							    .mem_master_wready(axi4_adapter$mem_master_wready),
							    .p_mem_line_req_put(axi4_adapter$p_mem_line_req_put),
							    .p_mem_line_write_data_put(axi4_adapter$p_mem_line_write_data_put),
							    .p_mem_single_req_put(axi4_adapter$p_mem_single_req_put),
							    .p_mem_single_write_data_put(axi4_adapter$p_mem_single_write_data_put),
							    .EN_p_mem_line_req_put(axi4_adapter$EN_p_mem_line_req_put),
							    .EN_p_mem_line_write_data_put(axi4_adapter$EN_p_mem_line_write_data_put),
							    .EN_g_mem_line_read_data_get(axi4_adapter$EN_g_mem_line_read_data_get),
							    .EN_p_mem_single_req_put(axi4_adapter$EN_p_mem_single_req_put),
							    .EN_p_mem_single_write_data_put(axi4_adapter$EN_p_mem_single_write_data_put),
							    .EN_g_mem_single_read_data_get(axi4_adapter$EN_g_mem_single_read_data_get),
							    .EN_ma_ddr4_ready(axi4_adapter$EN_ma_ddr4_ready),
							    .RDY_p_mem_line_req_put(axi4_adapter$RDY_p_mem_line_req_put),
							    .RDY_p_mem_line_write_data_put(axi4_adapter$RDY_p_mem_line_write_data_put),
							    .g_mem_line_read_data_get(axi4_adapter$g_mem_line_read_data_get),
							    .RDY_g_mem_line_read_data_get(axi4_adapter$RDY_g_mem_line_read_data_get),
							    .RDY_p_mem_single_req_put(axi4_adapter$RDY_p_mem_single_req_put),
							    .RDY_p_mem_single_write_data_put(axi4_adapter$RDY_p_mem_single_write_data_put),
							    .g_mem_single_read_data_get(axi4_adapter$g_mem_single_read_data_get),
							    .RDY_g_mem_single_read_data_get(axi4_adapter$RDY_g_mem_single_read_data_get),
							    .mv_write_error(),
							    .mem_master_awvalid(axi4_adapter$mem_master_awvalid),
							    .mem_master_awid(axi4_adapter$mem_master_awid),
							    .mem_master_awaddr(axi4_adapter$mem_master_awaddr),
							    .mem_master_awlen(axi4_adapter$mem_master_awlen),
							    .mem_master_awsize(axi4_adapter$mem_master_awsize),
							    .mem_master_awburst(axi4_adapter$mem_master_awburst),
							    .mem_master_awlock(axi4_adapter$mem_master_awlock),
							    .mem_master_awcache(axi4_adapter$mem_master_awcache),
							    .mem_master_awprot(axi4_adapter$mem_master_awprot),
							    .mem_master_awqos(axi4_adapter$mem_master_awqos),
							    .mem_master_awregion(axi4_adapter$mem_master_awregion),
							    .mem_master_wvalid(axi4_adapter$mem_master_wvalid),
							    .mem_master_wdata(axi4_adapter$mem_master_wdata),
							    .mem_master_wstrb(axi4_adapter$mem_master_wstrb),
							    .mem_master_wlast(axi4_adapter$mem_master_wlast),
							    .mem_master_bready(axi4_adapter$mem_master_bready),
							    .mem_master_arvalid(axi4_adapter$mem_master_arvalid),
							    .mem_master_arid(axi4_adapter$mem_master_arid),
							    .mem_master_araddr(axi4_adapter$mem_master_araddr),
							    .mem_master_arlen(axi4_adapter$mem_master_arlen),
							    .mem_master_arsize(axi4_adapter$mem_master_arsize),
							    .mem_master_arburst(axi4_adapter$mem_master_arburst),
							    .mem_master_arlock(axi4_adapter$mem_master_arlock),
							    .mem_master_arcache(axi4_adapter$mem_master_arcache),
							    .mem_master_arprot(axi4_adapter$mem_master_arprot),
							    .mem_master_arqos(axi4_adapter$mem_master_arqos),
							    .mem_master_arregion(axi4_adapter$mem_master_arregion),
							    .mem_master_rready(axi4_adapter$mem_master_rready),
							    .RDY_ma_ddr4_ready(),
							    .mv_status());

  // submodule cache
  mkCache #(.verbosity(3'd0)) cache(.CLK(CLK),
				    .RST_N(RST_N),
				    .flush_server_request_put(cache$flush_server_request_put),
				    .ma_request_va_va(cache$ma_request_va_va),
				    .mav_request_pa_pa(cache$mav_request_pa_pa),
				    .mav_request_pa_req(cache$mav_request_pa_req),
				    .p_mem_read_data_put(cache$p_mem_read_data_put),
				    .EN_ma_request_va(cache$EN_ma_request_va),
				    .EN_mav_request_pa(cache$EN_mav_request_pa),
				    .EN_flush_server_request_put(cache$EN_flush_server_request_put),
				    .EN_flush_server_response_get(cache$EN_flush_server_response_get),
				    .EN_g_mem_req_get(cache$EN_g_mem_req_get),
				    .EN_g_write_data_get(cache$EN_g_write_data_get),
				    .EN_p_mem_read_data_put(cache$EN_p_mem_read_data_put),
				    .mav_request_pa(cache$mav_request_pa),
				    .RDY_mav_request_pa(cache$RDY_mav_request_pa),
				    .mv_refill_ok(cache$mv_refill_ok),
				    .RDY_mv_refill_ok(cache$RDY_mv_refill_ok),
				    .RDY_flush_server_request_put(cache$RDY_flush_server_request_put),
				    .RDY_flush_server_response_get(cache$RDY_flush_server_response_get),
				    .g_mem_req_get(cache$g_mem_req_get),
				    .RDY_g_mem_req_get(cache$RDY_g_mem_req_get),
				    .g_write_data_get(cache$g_write_data_get),
				    .RDY_g_write_data_get(cache$RDY_g_write_data_get),
				    .RDY_p_mem_read_data_put(cache$RDY_p_mem_read_data_put));

  // submodule f_cache_flush_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_cache_flush_reqs(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(f_cache_flush_reqs$D_IN),
							     .ENQ(f_cache_flush_reqs$ENQ),
							     .DEQ(f_cache_flush_reqs$DEQ),
							     .CLR(f_cache_flush_reqs$CLR),
							     .D_OUT(f_cache_flush_reqs$D_OUT),
							     .FULL_N(f_cache_flush_reqs$FULL_N),
							     .EMPTY_N(f_cache_flush_reqs$EMPTY_N));

  // submodule f_cache_flush_rsps
  FIFO20 #(.guarded(32'd1)) f_cache_flush_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(f_cache_flush_rsps$ENQ),
					       .DEQ(f_cache_flush_rsps$DEQ),
					       .CLR(f_cache_flush_rsps$CLR),
					       .FULL_N(f_cache_flush_rsps$FULL_N),
					       .EMPTY_N(f_cache_flush_rsps$EMPTY_N));

  // submodule f_pte_writebacks
  FIFO2 #(.width(32'd128), .guarded(32'd1)) f_pte_writebacks(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(f_pte_writebacks$D_IN),
							     .ENQ(f_pte_writebacks$ENQ),
							     .DEQ(f_pte_writebacks$DEQ),
							     .CLR(f_pte_writebacks$CLR),
							     .D_OUT(f_pte_writebacks$D_OUT),
							     .FULL_N(f_pte_writebacks$FULL_N),
							     .EMPTY_N(f_pte_writebacks$EMPTY_N));

  // submodule f_ptw_reqs
  FIFO2 #(.width(32'd128), .guarded(32'd1)) f_ptw_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_ptw_reqs$D_IN),
						       .ENQ(f_ptw_reqs$ENQ),
						       .DEQ(f_ptw_reqs$DEQ),
						       .CLR(f_ptw_reqs$CLR),
						       .D_OUT(f_ptw_reqs$D_OUT),
						       .FULL_N(f_ptw_reqs$FULL_N),
						       .EMPTY_N(f_ptw_reqs$EMPTY_N));

  // submodule f_ptw_rsps
  FIFO2 #(.width(32'd132), .guarded(32'd1)) f_ptw_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_ptw_rsps$D_IN),
						       .ENQ(f_ptw_rsps$ENQ),
						       .DEQ(f_ptw_rsps$DEQ),
						       .CLR(f_ptw_rsps$CLR),
						       .D_OUT(f_ptw_rsps$D_OUT),
						       .FULL_N(f_ptw_rsps$FULL_N),
						       .EMPTY_N(f_ptw_rsps$EMPTY_N));

  // submodule mmio
  mkMMIO mmio(.CLK(CLK),
	      .RST_N(RST_N),
	      .p_mem_read_data_put(mmio$p_mem_read_data_put),
	      .req_mmu_cache_req(mmio$req_mmu_cache_req),
	      .start_pa(mmio$start_pa),
	      .EN_req(mmio$EN_req),
	      .EN_start(mmio$EN_start),
	      .EN_g_mem_req_get(mmio$EN_g_mem_req_get),
	      .EN_g_write_data_get(mmio$EN_g_write_data_get),
	      .EN_p_mem_read_data_put(mmio$EN_p_mem_read_data_put),
	      .RDY_req(),
	      .RDY_start(),
	      .result_fst(mmio$result_fst),
	      .RDY_result_fst(mmio$RDY_result_fst),
	      .result_snd_fst(mmio$result_snd_fst),
	      .RDY_result_snd_fst(mmio$RDY_result_snd_fst),
	      .result_snd_snd(),
	      .RDY_result_snd_snd(),
	      .g_mem_req_get(mmio$g_mem_req_get),
	      .RDY_g_mem_req_get(mmio$RDY_g_mem_req_get),
	      .g_write_data_get(mmio$g_write_data_get),
	      .RDY_g_write_data_get(mmio$RDY_g_write_data_get),
	      .RDY_p_mem_read_data_put(mmio$RDY_p_mem_read_data_put));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_quad_spi_0_mem_addr_base(),
		    .m_quad_spi_0_mem_addr_size(),
		    .m_quad_spi_0_mem_addr_lim(),
		    .m_quad_spi_0_reg_addr_base(),
		    .m_quad_spi_0_reg_addr_size(),
		    .m_quad_spi_0_reg_addr_lim(),
		    .m_ethernet_0_addr_base(),
		    .m_ethernet_0_addr_size(),
		    .m_ethernet_0_addr_lim(),
		    .m_dma_0_addr_base(),
		    .m_dma_0_addr_size(),
		    .m_dma_0_addr_lim(),
		    .m_uart16550_0_addr_base(),
		    .m_uart16550_0_addr_size(),
		    .m_uart16550_0_addr_lim(),
		    .m_gpio0_addr_base(),
		    .m_gpio0_addr_size(),
		    .m_gpio0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_ddr4_0_uncached_addr_base(),
		    .m_ddr4_0_uncached_addr_size(),
		    .m_ddr4_0_uncached_addr_lim(),
		    .m_ddr4_0_cached_addr_base(),
		    .m_ddr4_0_cached_addr_size(),
		    .m_ddr4_0_cached_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_is_mem_addr(soc_map$m_is_mem_addr),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // submodule tlb
  mkTLB tlb(.CLK(CLK),
	    .RST_N(RST_N),
	    .ma_insert_asid(tlb$ma_insert_asid),
	    .ma_insert_level(tlb$ma_insert_level),
	    .ma_insert_pte(tlb$ma_insert_pte),
	    .ma_insert_pte_pa(tlb$ma_insert_pte_pa),
	    .ma_insert_vpn(tlb$ma_insert_vpn),
	    .mv_vm_xlate_dmem_not_imem(tlb$mv_vm_xlate_dmem_not_imem),
	    .mv_vm_xlate_mstatus_MXR(tlb$mv_vm_xlate_mstatus_MXR),
	    .mv_vm_xlate_priv(tlb$mv_vm_xlate_priv),
	    .mv_vm_xlate_read_not_write(tlb$mv_vm_xlate_read_not_write),
	    .mv_vm_xlate_satp(tlb$mv_vm_xlate_satp),
	    .mv_vm_xlate_sstatus_SUM(tlb$mv_vm_xlate_sstatus_SUM),
	    .mv_vm_xlate_va(tlb$mv_vm_xlate_va),
	    .EN_ma_insert(tlb$EN_ma_insert),
	    .EN_ma_flush(tlb$EN_ma_flush),
	    .mv_vm_xlate(tlb$mv_vm_xlate),
	    .RDY_mv_vm_xlate(),
	    .RDY_ma_insert(),
	    .RDY_ma_flush());

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     cache$RDY_g_mem_req_get && axi4_adapter$RDY_p_mem_line_req_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     cache$RDY_g_write_data_get &&
	     axi4_adapter$RDY_p_mem_line_write_data_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_mkConnectionGetPut_2
  assign CAN_FIRE_RL_mkConnectionGetPut_2 =
	     cache$RDY_p_mem_read_data_put &&
	     axi4_adapter$RDY_g_mem_line_read_data_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // rule RL_mkConnectionGetPut_3
  assign CAN_FIRE_RL_mkConnectionGetPut_3 =
	     mmio$RDY_g_mem_req_get && axi4_adapter$RDY_p_mem_single_req_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_3 =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // rule RL_mkConnectionGetPut_4
  assign CAN_FIRE_RL_mkConnectionGetPut_4 =
	     mmio$RDY_g_write_data_get &&
	     axi4_adapter$RDY_p_mem_single_write_data_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_4 =
	     CAN_FIRE_RL_mkConnectionGetPut_4 ;

  // rule RL_mkConnectionGetPut_5
  assign CAN_FIRE_RL_mkConnectionGetPut_5 =
	     mmio$RDY_p_mem_read_data_put &&
	     axi4_adapter$RDY_g_mem_single_read_data_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_5 =
	     CAN_FIRE_RL_mkConnectionGetPut_5 ;

  // rule RL_rl_fsm_main_idle
  assign CAN_FIRE_RL_rl_fsm_main_idle = rg_fsm_main_state == 3'd0 ;
  assign WILL_FIRE_RL_rl_fsm_main_idle = CAN_FIRE_RL_rl_fsm_main_idle ;

  // rule RL_rl_fsm_main_PA
  assign CAN_FIRE_RL_rl_fsm_main_PA =
	     (tlb$mv_vm_xlate[200:199] == 2'd1 ||
	      tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139_57_r_ETC___d176) &&
	     rg_fsm_main_state == 3'd1 &&
	     !rg_fsm_flush_state ;
  assign WILL_FIRE_RL_rl_fsm_main_PA = CAN_FIRE_RL_rl_fsm_main_PA ;

  // rule RL_rl_fsm_main_cache_WAIT
  assign CAN_FIRE_RL_rl_fsm_main_cache_WAIT =
	     cache$RDY_mv_refill_ok && rg_fsm_main_state == 3'd2 ;
  assign WILL_FIRE_RL_rl_fsm_main_cache_WAIT =
	     CAN_FIRE_RL_rl_fsm_main_cache_WAIT ;

  // rule RL_rl_fsm_main_mmio_WAIT
  assign CAN_FIRE_RL_rl_fsm_main_mmio_WAIT =
	     mmio$RDY_result_fst && mmio$RDY_result_snd_fst &&
	     rg_fsm_main_state == 3'd3 ;
  assign WILL_FIRE_RL_rl_fsm_main_mmio_WAIT =
	     CAN_FIRE_RL_rl_fsm_main_mmio_WAIT ;

  // rule RL_rl_fsm_main_PTW_start
  assign CAN_FIRE_RL_rl_fsm_main_PTW_start =
	     f_ptw_reqs$FULL_N && rg_fsm_main_state == 3'd4 ;
  assign WILL_FIRE_RL_rl_fsm_main_PTW_start =
	     CAN_FIRE_RL_rl_fsm_main_PTW_start ;

  // rule RL_rl_req
  assign CAN_FIRE_RL_rl_req = EN_req ;
  assign WILL_FIRE_RL_rl_req = EN_req ;

  // rule RL_rl_fsm_main_PTW_finished
  assign CAN_FIRE_RL_rl_fsm_main_PTW_finished =
	     f_ptw_rsps$EMPTY_N && rg_fsm_main_state == 3'd5 ;
  assign WILL_FIRE_RL_rl_fsm_main_PTW_finished =
	     CAN_FIRE_RL_rl_fsm_main_PTW_finished && !EN_req ;

  // rule RL_rl_cache_flush_start
  assign CAN_FIRE_RL_rl_cache_flush_start =
	     cache$RDY_flush_server_request_put &&
	     f_cache_flush_reqs$EMPTY_N &&
	     !rg_fsm_flush_state ;
  assign WILL_FIRE_RL_rl_cache_flush_start =
	     CAN_FIRE_RL_rl_cache_flush_start ;

  // rule RL_rl_cache_flush_finish
  assign CAN_FIRE_RL_rl_cache_flush_finish =
	     cache$RDY_flush_server_response_get &&
	     f_cache_flush_reqs$EMPTY_N &&
	     f_cache_flush_rsps$FULL_N &&
	     rg_fsm_flush_state ;
  assign WILL_FIRE_RL_rl_cache_flush_finish =
	     CAN_FIRE_RL_rl_cache_flush_finish ;

  // inputs to muxes for submodule ports
  assign MUX_cache$ma_request_va_1__SEL_1 =
	     WILL_FIRE_RL_rl_fsm_main_PTW_finished &&
	     f_ptw_rsps$D_OUT[131:130] == 2'd0 ;
  assign MUX_dw_exc$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_fsm_main_PA &&
	     tlb$mv_vm_xlate[200:199] != 2'd1 &&
	     tlb$mv_vm_xlate[200:199] != 2'd2 &&
	     soc_map$m_is_mem_addr &&
	     cache$mav_request_pa[129:128] == 2'd1 ;
  assign MUX_rg_exc$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_fsm_main_PTW_finished &&
	     f_ptw_rsps$D_OUT[131:130] != 2'd0 ;
  assign MUX_rg_exc$write_1__SEL_2 =
	     EN_req &&
	     NOT_wire_mmu_cache_req_wget__5_BITS_204_TO_203_ETC___d147 ;
  assign MUX_rg_exc$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] == 2'd2 ;
  assign MUX_rg_fsm_main_state$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_fsm_main_PA &&
	     (tlb$mv_vm_xlate[200:199] == 2'd1 ||
	      tlb$mv_vm_xlate[200:199] == 2'd2 ||
	      cache$mav_request_pa[129:128] == 2'd0 ||
	      !soc_map$m_is_mem_addr) ;
  assign MUX_rg_valid$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_fsm_main_cache_WAIT && !cache$mv_refill_ok ;
  assign MUX_tlb$ma_insert_1__SEL_2 =
	     WILL_FIRE_RL_rl_fsm_main_PA &&
	     tlb$mv_vm_xlate[200:199] != 2'd1 &&
	     tlb$mv_vm_xlate[200:199] != 2'd2 &&
	     tlb$mv_vm_xlate[130] ;
  assign MUX_rg_exc_code$write_1__VAL_1 =
	     (f_ptw_rsps$D_OUT[131:130] == 2'd1) ? 4'd1 : 4'd12 ;
  assign MUX_rg_fsm_main_state$write_1__VAL_2 =
	     (f_ptw_rsps$D_OUT[131:130] == 2'd0) ? 3'd1 : 3'd0 ;
  assign MUX_rg_fsm_main_state$write_1__VAL_3 =
	     NOT_wire_mmu_cache_req_wget__5_BITS_204_TO_203_ETC___d147 ?
	       3'd0 :
	       3'd1 ;
  assign MUX_rg_fsm_main_state$write_1__VAL_6 =
	     cache$mv_refill_ok ? 3'd1 : 3'd0 ;
  always@(tlb$mv_vm_xlate or soc_map$m_is_mem_addr)
  begin
    case (tlb$mv_vm_xlate[200:199])
      2'd1: MUX_rg_fsm_main_state$write_1__VAL_7 = 3'd4;
      2'd2: MUX_rg_fsm_main_state$write_1__VAL_7 = 3'd0;
      default: MUX_rg_fsm_main_state$write_1__VAL_7 =
		   soc_map$m_is_mem_addr ? 3'd2 : 3'd3;
    endcase
  end

  // inlined wires
  assign dw_valid$wget = MUX_dw_exc$wset_1__SEL_1 || rg_valid ;
  assign dw_valid$whas =
	     WILL_FIRE_RL_rl_fsm_main_PA &&
	     tlb$mv_vm_xlate[200:199] != 2'd1 &&
	     tlb$mv_vm_xlate[200:199] != 2'd2 &&
	     soc_map$m_is_mem_addr &&
	     cache$mav_request_pa[129:128] == 2'd1 ||
	     WILL_FIRE_RL_rl_fsm_main_idle ;
  assign dw_exc$wget = !MUX_dw_exc$wset_1__SEL_1 && rg_exc ;
  assign wire_mmu_cache_req$wget =
	     { 5'd2,
	       req_va,
	       71'h55555555555555552A,
	       req_priv,
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp } ;

  // register rg_exc
  always@(MUX_rg_exc$write_1__SEL_1 or
	  MUX_rg_exc$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_fsm_main_mmio_WAIT or
	  mmio$result_fst or
	  MUX_rg_valid$write_1__SEL_4 or MUX_rg_exc$write_1__SEL_5)
  case (1'b1)
    MUX_rg_exc$write_1__SEL_1 || MUX_rg_exc$write_1__SEL_2:
	rg_exc$D_IN = 1'd1;
    WILL_FIRE_RL_rl_fsm_main_mmio_WAIT: rg_exc$D_IN = mmio$result_fst;
    MUX_rg_valid$write_1__SEL_4 || MUX_rg_exc$write_1__SEL_5:
	rg_exc$D_IN = 1'd1;
    default: rg_exc$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign rg_exc$EN =
	     WILL_FIRE_RL_rl_fsm_main_PA &&
	     tlb$mv_vm_xlate[200:199] == 2'd2 ||
	     EN_req &&
	     NOT_wire_mmu_cache_req_wget__5_BITS_204_TO_203_ETC___d147 ||
	     WILL_FIRE_RL_rl_fsm_main_PTW_finished &&
	     f_ptw_rsps$D_OUT[131:130] != 2'd0 ||
	     WILL_FIRE_RL_rl_fsm_main_cache_WAIT && !cache$mv_refill_ok ||
	     WILL_FIRE_RL_rl_fsm_main_mmio_WAIT ;

  // register rg_exc_code
  always@(MUX_rg_exc$write_1__SEL_1 or
	  MUX_rg_exc_code$write_1__VAL_1 or
	  MUX_rg_exc$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_fsm_main_mmio_WAIT or
	  MUX_rg_valid$write_1__SEL_4 or
	  MUX_rg_exc$write_1__SEL_5 or tlb$mv_vm_xlate)
  case (1'b1)
    MUX_rg_exc$write_1__SEL_1:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc$write_1__SEL_2: rg_exc_code$D_IN = 4'd0;
    WILL_FIRE_RL_rl_fsm_main_mmio_WAIT || MUX_rg_valid$write_1__SEL_4:
	rg_exc_code$D_IN = 4'd1;
    MUX_rg_exc$write_1__SEL_5: rg_exc_code$D_IN = tlb$mv_vm_xlate[134:131];
    default: rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_fsm_main_PA &&
	     tlb$mv_vm_xlate[200:199] == 2'd2 ||
	     EN_req &&
	     NOT_wire_mmu_cache_req_wget__5_BITS_204_TO_203_ETC___d147 ||
	     WILL_FIRE_RL_rl_fsm_main_PTW_finished &&
	     f_ptw_rsps$D_OUT[131:130] != 2'd0 ||
	     WILL_FIRE_RL_rl_fsm_main_cache_WAIT && !cache$mv_refill_ok ||
	     WILL_FIRE_RL_rl_fsm_main_mmio_WAIT ;

  // register rg_fsm_flush_state
  assign rg_fsm_flush_state$D_IN = !WILL_FIRE_RL_rl_cache_flush_finish ;
  assign rg_fsm_flush_state$EN =
	     WILL_FIRE_RL_rl_cache_flush_finish ||
	     WILL_FIRE_RL_rl_cache_flush_start ;

  // register rg_fsm_main_state
  always@(WILL_FIRE_RL_rl_cache_flush_finish or
	  WILL_FIRE_RL_rl_fsm_main_PTW_finished or
	  MUX_rg_fsm_main_state$write_1__VAL_2 or
	  EN_req or
	  MUX_rg_fsm_main_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_fsm_main_PTW_start or
	  WILL_FIRE_RL_rl_fsm_main_mmio_WAIT or
	  WILL_FIRE_RL_rl_fsm_main_cache_WAIT or
	  MUX_rg_fsm_main_state$write_1__VAL_6 or
	  MUX_rg_fsm_main_state$write_1__SEL_7 or
	  MUX_rg_fsm_main_state$write_1__VAL_7)
  case (1'b1)
    WILL_FIRE_RL_rl_cache_flush_finish: rg_fsm_main_state$D_IN = 3'd0;
    WILL_FIRE_RL_rl_fsm_main_PTW_finished:
	rg_fsm_main_state$D_IN = MUX_rg_fsm_main_state$write_1__VAL_2;
    EN_req: rg_fsm_main_state$D_IN = MUX_rg_fsm_main_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_fsm_main_PTW_start: rg_fsm_main_state$D_IN = 3'd5;
    WILL_FIRE_RL_rl_fsm_main_mmio_WAIT: rg_fsm_main_state$D_IN = 3'd0;
    WILL_FIRE_RL_rl_fsm_main_cache_WAIT:
	rg_fsm_main_state$D_IN = MUX_rg_fsm_main_state$write_1__VAL_6;
    MUX_rg_fsm_main_state$write_1__SEL_7:
	rg_fsm_main_state$D_IN = MUX_rg_fsm_main_state$write_1__VAL_7;
    default: rg_fsm_main_state$D_IN = 3'b010 /* unspecified value */ ;
  endcase
  assign rg_fsm_main_state$EN =
	     WILL_FIRE_RL_rl_fsm_main_PA &&
	     (tlb$mv_vm_xlate[200:199] == 2'd1 ||
	      tlb$mv_vm_xlate[200:199] == 2'd2 ||
	      cache$mav_request_pa[129:128] == 2'd0 ||
	      !soc_map$m_is_mem_addr) ||
	     EN_req ||
	     WILL_FIRE_RL_rl_fsm_main_cache_WAIT ||
	     WILL_FIRE_RL_rl_fsm_main_PTW_finished ||
	     WILL_FIRE_RL_rl_cache_flush_finish ||
	     WILL_FIRE_RL_rl_fsm_main_mmio_WAIT ||
	     WILL_FIRE_RL_rl_fsm_main_PTW_start ;

  // register rg_ld_val
  assign rg_ld_val$D_IN = mmio$result_snd_fst ;
  assign rg_ld_val$EN = CAN_FIRE_RL_rl_fsm_main_mmio_WAIT ;

  // register rg_pa
  assign rg_pa$D_IN =
	     EN_req ?
	       wire_mmu_cache_req$wget[202:139] :
	       tlb$mv_vm_xlate[198:135] ;
  assign rg_pa$EN = WILL_FIRE_RL_rl_fsm_main_PA || EN_req ;

  // register rg_req
  assign rg_req$D_IN = wire_mmu_cache_req$wget ;
  assign rg_req$EN = EN_req ;

  // register rg_valid
  assign rg_valid$D_IN = 1'd1 ;
  assign rg_valid$EN =
	     WILL_FIRE_RL_rl_fsm_main_PA &&
	     tlb$mv_vm_xlate[200:199] == 2'd2 ||
	     EN_req &&
	     NOT_wire_mmu_cache_req_wget__5_BITS_204_TO_203_ETC___d147 ||
	     WILL_FIRE_RL_rl_fsm_main_PTW_finished &&
	     f_ptw_rsps$D_OUT[131:130] != 2'd0 ||
	     WILL_FIRE_RL_rl_fsm_main_cache_WAIT && !cache$mv_refill_ok ||
	     WILL_FIRE_RL_rl_fsm_main_mmio_WAIT ;

  // register verbosity
  assign verbosity$D_IN = 3'h0 ;
  assign verbosity$EN = 1'b0 ;

  // submodule axi4_adapter
  assign axi4_adapter$mem_master_arready = mem_master_arready ;
  assign axi4_adapter$mem_master_awready = mem_master_awready ;
  assign axi4_adapter$mem_master_bid = mem_master_bid ;
  assign axi4_adapter$mem_master_bresp = mem_master_bresp ;
  assign axi4_adapter$mem_master_bvalid = mem_master_bvalid ;
  assign axi4_adapter$mem_master_rdata = mem_master_rdata ;
  assign axi4_adapter$mem_master_rid = mem_master_rid ;
  assign axi4_adapter$mem_master_rlast = mem_master_rlast ;
  assign axi4_adapter$mem_master_rresp = mem_master_rresp ;
  assign axi4_adapter$mem_master_rvalid = mem_master_rvalid ;
  assign axi4_adapter$mem_master_wready = mem_master_wready ;
  assign axi4_adapter$p_mem_line_req_put = cache$g_mem_req_get ;
  assign axi4_adapter$p_mem_line_write_data_put = cache$g_write_data_get ;
  assign axi4_adapter$p_mem_single_req_put = mmio$g_mem_req_get ;
  assign axi4_adapter$p_mem_single_write_data_put = mmio$g_write_data_get ;
  assign axi4_adapter$EN_p_mem_line_req_put = CAN_FIRE_RL_mkConnectionGetPut ;
  assign axi4_adapter$EN_p_mem_line_write_data_put =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign axi4_adapter$EN_g_mem_line_read_data_get =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign axi4_adapter$EN_p_mem_single_req_put =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign axi4_adapter$EN_p_mem_single_write_data_put =
	     CAN_FIRE_RL_mkConnectionGetPut_4 ;
  assign axi4_adapter$EN_g_mem_single_read_data_get =
	     CAN_FIRE_RL_mkConnectionGetPut_5 ;
  assign axi4_adapter$EN_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // submodule cache
  assign cache$flush_server_request_put = f_cache_flush_reqs$D_OUT ;
  assign cache$ma_request_va_va =
	     MUX_cache$ma_request_va_1__SEL_1 ?
	       rg_req[202:139] :
	       wire_mmu_cache_req$wget[202:139] ;
  assign cache$mav_request_pa_pa = tlb$mv_vm_xlate[198:135] ;
  assign cache$mav_request_pa_req = rg_req ;
  assign cache$p_mem_read_data_put = axi4_adapter$g_mem_line_read_data_get ;
  assign cache$EN_ma_request_va =
	     WILL_FIRE_RL_rl_fsm_main_PTW_finished &&
	     f_ptw_rsps$D_OUT[131:130] == 2'd0 ||
	     EN_req &&
	     wire_mmu_cache_req_wget__5_BITS_204_TO_203_26__ETC___d155 ;
  assign cache$EN_mav_request_pa =
	     WILL_FIRE_RL_rl_fsm_main_PA &&
	     tlb$mv_vm_xlate[200:199] != 2'd1 &&
	     tlb$mv_vm_xlate[200:199] != 2'd2 &&
	     soc_map$m_is_mem_addr ;
  assign cache$EN_flush_server_request_put =
	     CAN_FIRE_RL_rl_cache_flush_start ;
  assign cache$EN_flush_server_response_get =
	     CAN_FIRE_RL_rl_cache_flush_finish ;
  assign cache$EN_g_mem_req_get = CAN_FIRE_RL_mkConnectionGetPut ;
  assign cache$EN_g_write_data_get = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign cache$EN_p_mem_read_data_put = CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // submodule f_cache_flush_reqs
  assign f_cache_flush_reqs$D_IN = flush_server_request_put ;
  assign f_cache_flush_reqs$ENQ = EN_flush_server_request_put ;
  assign f_cache_flush_reqs$DEQ = CAN_FIRE_RL_rl_cache_flush_finish ;
  assign f_cache_flush_reqs$CLR = 1'b0 ;

  // submodule f_cache_flush_rsps
  assign f_cache_flush_rsps$ENQ = CAN_FIRE_RL_rl_cache_flush_finish ;
  assign f_cache_flush_rsps$DEQ = EN_flush_server_response_get ;
  assign f_cache_flush_rsps$CLR = 1'b0 ;

  // submodule f_pte_writebacks
  assign f_pte_writebacks$D_IN =
	     { tlb$mv_vm_xlate[63:0], tlb$mv_vm_xlate[129:66] } ;
  assign f_pte_writebacks$ENQ = MUX_tlb$ma_insert_1__SEL_2 ;
  assign f_pte_writebacks$DEQ = EN_pte_writeback_g_get ;
  assign f_pte_writebacks$CLR = 1'b0 ;

  // submodule f_ptw_reqs
  assign f_ptw_reqs$D_IN = { rg_req[202:139], rg_req[63:0] } ;
  assign f_ptw_reqs$ENQ = CAN_FIRE_RL_rl_fsm_main_PTW_start ;
  assign f_ptw_reqs$DEQ = EN_ptw_client_request_get ;
  assign f_ptw_reqs$CLR = 1'b0 ;

  // submodule f_ptw_rsps
  assign f_ptw_rsps$D_IN = ptw_client_response_put ;
  assign f_ptw_rsps$ENQ = EN_ptw_client_response_put ;
  assign f_ptw_rsps$DEQ = WILL_FIRE_RL_rl_fsm_main_PTW_finished ;
  assign f_ptw_rsps$CLR = 1'b0 ;

  // submodule mmio
  assign mmio$p_mem_read_data_put = axi4_adapter$g_mem_single_read_data_get ;
  assign mmio$req_mmu_cache_req = wire_mmu_cache_req$wget ;
  assign mmio$start_pa = tlb$mv_vm_xlate[198:135] ;
  assign mmio$EN_req = EN_req ;
  assign mmio$EN_start =
	     WILL_FIRE_RL_rl_fsm_main_PA &&
	     tlb$mv_vm_xlate[200:199] != 2'd1 &&
	     tlb$mv_vm_xlate[200:199] != 2'd2 &&
	     !soc_map$m_is_mem_addr ;
  assign mmio$EN_g_mem_req_get = CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign mmio$EN_g_write_data_get = CAN_FIRE_RL_mkConnectionGetPut_4 ;
  assign mmio$EN_p_mem_read_data_put = CAN_FIRE_RL_mkConnectionGetPut_5 ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = tlb$mv_vm_xlate[198:135] ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule tlb
  assign tlb$ma_insert_asid = rg_req[59:44] ;
  assign tlb$ma_insert_level =
	     MUX_cache$ma_request_va_1__SEL_1 ?
	       f_ptw_rsps$D_OUT[65:64] :
	       tlb$mv_vm_xlate[65:64] ;
  assign tlb$ma_insert_pte =
	     MUX_cache$ma_request_va_1__SEL_1 ?
	       f_ptw_rsps$D_OUT[129:66] :
	       tlb$mv_vm_xlate[129:66] ;
  assign tlb$ma_insert_pte_pa =
	     MUX_cache$ma_request_va_1__SEL_1 ?
	       f_ptw_rsps$D_OUT[63:0] :
	       tlb$mv_vm_xlate[63:0] ;
  assign tlb$ma_insert_vpn = rg_req[177:151] ;
  assign tlb$mv_vm_xlate_dmem_not_imem = 1'd0 ;
  assign tlb$mv_vm_xlate_mstatus_MXR = rg_req[64] ;
  assign tlb$mv_vm_xlate_priv = rg_req[67:66] ;
  assign tlb$mv_vm_xlate_read_not_write = 1'd1 ;
  assign tlb$mv_vm_xlate_satp = rg_req[63:0] ;
  assign tlb$mv_vm_xlate_sstatus_SUM = rg_req[65] ;
  assign tlb$mv_vm_xlate_va = rg_req[202:139] ;
  assign tlb$EN_ma_insert =
	     WILL_FIRE_RL_rl_fsm_main_PTW_finished &&
	     f_ptw_rsps$D_OUT[131:130] == 2'd0 ||
	     WILL_FIRE_RL_rl_fsm_main_PA &&
	     tlb$mv_vm_xlate[200:199] != 2'd1 &&
	     tlb$mv_vm_xlate[200:199] != 2'd2 &&
	     tlb$mv_vm_xlate[130] ;
  assign tlb$EN_ma_flush = EN_tlb_flush ;

  // remaining internal signals
  assign NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d395 =
	     tlb$mv_vm_xlate[200:199] != 2'd2 && soc_map$m_is_mem_addr &&
	     cache$mav_request_pa[129:128] == 2'd1 &&
	     NOT_verbosity_1_ULT_2_2___d33 ;
  assign NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d409 =
	     tlb$mv_vm_xlate[200:199] != 2'd2 && soc_map$m_is_mem_addr &&
	     cache$mav_request_pa[129:128] == 2'd2 &&
	     rg_req[207:206] == 2'd2 ;
  assign NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d413 =
	     tlb$mv_vm_xlate[200:199] != 2'd2 && soc_map$m_is_mem_addr &&
	     cache$mav_request_pa[129:128] == 2'd2 &&
	     rg_req[207:206] != 2'd2 ;
  assign NOT_verbosity_1_ULT_2_2___d33 = verbosity >= 3'd2 ;
  assign NOT_verbosity_1_ULT_3_60___d261 = verbosity >= 3'd3 ;
  assign NOT_wire_mmu_cache_req_wget__5_BITS_204_TO_203_ETC___d147 =
	     wire_mmu_cache_req$wget[204:203] != 2'b0 &&
	     (wire_mmu_cache_req$wget[204:203] != 2'b01 ||
	      wire_mmu_cache_req$wget[139]) &&
	     (wire_mmu_cache_req$wget[204:203] != 2'b10 ||
	      wire_mmu_cache_req$wget[140:139] != 2'b0) &&
	     (wire_mmu_cache_req$wget[204:203] != 2'b11 ||
	      wire_mmu_cache_req$wget[141:139] != 3'b0) ;
  assign soc_map_m_is_mem_addr_tlb_mv_vm_xlate_rg_req_5_ETC___d468 =
	     soc_map$m_is_mem_addr && cache$mav_request_pa[129:128] == 2'd2 &&
	     rg_req[207:206] == 2'd2 &&
	     rg_req[74:70] != 5'b00010 &&
	     rg_req[74:70] != 5'b00011 &&
	     rg_req[74:70] != 5'b0 &&
	     rg_req[74:70] != 5'b00001 &&
	     rg_req[74:70] != 5'b00100 &&
	     rg_req[74:70] != 5'b01100 &&
	     rg_req[74:70] != 5'b01000 &&
	     rg_req[74:70] != 5'b10000 &&
	     rg_req[74:70] != 5'b10100 &&
	     rg_req[74:70] != 5'b11000 ;
  assign tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139_57_r_ETC___d176 =
	     tlb$mv_vm_xlate[200:199] == 2'd2 ||
	     (!tlb$mv_vm_xlate[130] || f_pte_writebacks$FULL_N) &&
	     (!soc_map$m_is_mem_addr || cache$RDY_mav_request_pa) ;
  assign wire_mmu_cache_req_wget__5_BITS_204_TO_203_26__ETC___d155 =
	     wire_mmu_cache_req$wget[204:203] == 2'b0 ||
	     wire_mmu_cache_req$wget[204:203] == 2'b01 &&
	     !wire_mmu_cache_req$wget[139] ||
	     wire_mmu_cache_req$wget[204:203] == 2'b10 &&
	     wire_mmu_cache_req$wget[140:139] == 2'b0 ||
	     wire_mmu_cache_req$wget[204:203] == 2'b11 &&
	     wire_mmu_cache_req$wget[141:139] == 3'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_fsm_flush_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_fsm_main_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	verbosity <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (rg_fsm_flush_state$EN)
	  rg_fsm_flush_state <= `BSV_ASSIGNMENT_DELAY rg_fsm_flush_state$D_IN;
	if (rg_fsm_main_state$EN)
	  rg_fsm_main_state <= `BSV_ASSIGNMENT_DELAY rg_fsm_main_state$D_IN;
	if (rg_valid$EN) rg_valid <= `BSV_ASSIGNMENT_DELAY rg_valid$D_IN;
	if (verbosity$EN) verbosity <= `BSV_ASSIGNMENT_DELAY verbosity$D_IN;
      end
    if (rg_exc$EN) rg_exc <= `BSV_ASSIGNMENT_DELAY rg_exc$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= `BSV_ASSIGNMENT_DELAY rg_ld_val$D_IN;
    if (rg_pa$EN) rg_pa <= `BSV_ASSIGNMENT_DELAY rg_pa$D_IN;
    if (rg_req$EN) rg_req <= `BSV_ASSIGNMENT_DELAY rg_req$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_exc = 1'h0;
    rg_exc_code = 4'hA;
    rg_fsm_flush_state = 1'h0;
    rg_fsm_main_state = 3'h2;
    rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    rg_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_req = 208'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_valid = 1'h0;
    verbosity = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_idle && rg_valid &&
	  NOT_verbosity_1_ULT_2_2___d33)
	begin
	  v__h2692 = $stime;
	  #0;
	end
    v__h2686 = v__h2692 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_idle && rg_valid &&
	  NOT_verbosity_1_ULT_2_2___d33)
	$write("%0d: %m.fa_cpu_response:", v__h2686);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_idle && rg_valid &&
	  NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_exc)
	$display(" exc_code: %0d", rg_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_idle && rg_valid &&
	  NOT_verbosity_1_ULT_2_2___d33 &&
	  !rg_exc)
	$display(" ld_val %0h", rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33)
	begin
	  v__h3655 = $stime;
	  #0;
	end
    v__h3649 = v__h3655 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33)
	$write("%0d: %m.rl_fsm_main_PA:\n    ", v__h3649);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd2)
	$write("MMU_Cache_Req{");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] != 2'd2)
	$write("MMU_Cache_Req{");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] != 2'd2 &&
	  rg_req[207:206] != 2'd0 &&
	  rg_req[207:206] != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] != 2'd2)
	$write(" f3 %3b", rg_req[205:203]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd2)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd2)
	$write(" f3 %3b", rg_req[205:203]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd2)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b00010)
	$write("LR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b00011)
	$write("SC");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b0)
	$write("ADD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b00001)
	$write("SWAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b00100)
	$write("XOR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b01100)
	$write("AND");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b01000)
	$write("OR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b10000)
	$write("MIN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b10100)
	$write("MAX");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b11000)
	$write("MINU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] != 5'b00010 &&
	  rg_req[74:70] != 5'b00011 &&
	  rg_req[74:70] != 5'b0 &&
	  rg_req[74:70] != 5'b00001 &&
	  rg_req[74:70] != 5'b00100 &&
	  rg_req[74:70] != 5'b01100 &&
	  rg_req[74:70] != 5'b01000 &&
	  rg_req[74:70] != 5'b10000 &&
	  rg_req[74:70] != 5'b10100 &&
	  rg_req[74:70] != 5'b11000)
	$write("MAXU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] == 2'd2)
	$write(" aqrl %2b", rg_req[69:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  rg_req[207:206] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33)
	$write(" va %0h", rg_req[202:139]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  (rg_req[207:206] == 2'd2 && rg_req[74:70] != 5'b00010 ||
	   rg_req[207:206] == 2'd1))
	$write(" st_val %0h", rg_req[138:75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33 &&
	  (rg_req[207:206] != 2'd2 || rg_req[74:70] == 5'b00010) &&
	  rg_req[207:206] != 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33)
	$write(" priv %0d sstatus_SUM %0d mstatus_MXR %0d satp %0h",
	       rg_req[67:66],
	       rg_req[65],
	       rg_req[64],
	       rg_req[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_2_2___d33)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] == 2'd0)
	$write("VM_Xlate_Result{");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0)
	$write("VM_Xlate_Result{");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] == 2'd1)
	$write("VM_XLATE_TLB_MISS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0 &&
	  tlb$mv_vm_xlate[200:199] != 2'd1)
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0 &&
	  tlb$mv_vm_xlate[200:199] != 2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0 &&
	  tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[134:131] == 4'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0 &&
	  tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[134:131] == 4'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0 &&
	  tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[134:131] == 4'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0 &&
	  tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[134:131] == 4'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0 &&
	  tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[134:131] == 4'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0 &&
	  tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[134:131] == 4'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0 &&
	  tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[134:131] == 4'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0 &&
	  tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[134:131] == 4'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0 &&
	  tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[134:131] == 4'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0 &&
	  tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[134:131] == 4'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0 &&
	  tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[134:131] == 4'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0 &&
	  tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[134:131] == 4'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0 &&
	  tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[134:131] == 4'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0 &&
	  tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[134:131] == 4'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0 &&
	  tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[134:131] != 4'd0 &&
	  tlb$mv_vm_xlate[134:131] != 4'd1 &&
	  tlb$mv_vm_xlate[134:131] != 4'd2 &&
	  tlb$mv_vm_xlate[134:131] != 4'd3 &&
	  tlb$mv_vm_xlate[134:131] != 4'd4 &&
	  tlb$mv_vm_xlate[134:131] != 4'd5 &&
	  tlb$mv_vm_xlate[134:131] != 4'd6 &&
	  tlb$mv_vm_xlate[134:131] != 4'd7 &&
	  tlb$mv_vm_xlate[134:131] != 4'd8 &&
	  tlb$mv_vm_xlate[134:131] != 4'd9 &&
	  tlb$mv_vm_xlate[134:131] != 4'd11 &&
	  tlb$mv_vm_xlate[134:131] != 4'd12 &&
	  tlb$mv_vm_xlate[134:131] != 4'd13 &&
	  tlb$mv_vm_xlate[134:131] != 4'd15)
	$write("unknown trap Exc_Code %d", tlb$mv_vm_xlate[134:131]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] == 2'd0)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] == 2'd0)
	$write(" pa:%0h", tlb$mv_vm_xlate[198:135]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] == 2'd0 &&
	  tlb$mv_vm_xlate[130])
	$write(" pte (modified) %0h", tlb$mv_vm_xlate[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] == 2'd0 &&
	  !tlb$mv_vm_xlate[130])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261 &&
	  tlb$mv_vm_xlate[200:199] != 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && NOT_verbosity_1_ULT_3_60___d261)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  tlb$mv_vm_xlate[130] &&
	  verbosity != 3'd0)
	$display("    Writeback updated PTE: pa %0h pte %0h",
		 tlb$mv_vm_xlate[63:0],
		 tlb$mv_vm_xlate[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd0 &&
	  NOT_verbosity_1_ULT_3_60___d261)
	$display("    Cache Miss: waiting for refill ...");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d395)
	begin
	  v__h4916 = $stime;
	  #0;
	end
    v__h4910 = v__h4916 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d395)
	$write("%0d: %m.fa_cpu_response:", v__h4910);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d395)
	$display(" ld_val %0h", cache$mav_request_pa[127:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2)
	begin
	  v__h4754 = $stime;
	  #0;
	end
    v__h4748 = v__h4754 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2)
	$display("%0d: %m.rl_fsm_main_PA: ASSERTION ERROR: Impossible CACHE_WRITE_HIT",
		 v__h4748);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2)
	begin
	  v__h4976 = $stime;
	  #0;
	end
    v__h4970 = v__h4976 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2)
	$write("    ", v__h4970);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d409)
	$write("MMU_Cache_Req{");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d413)
	$write("MMU_Cache_Req{");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d409)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2 &&
	  rg_req[207:206] == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2 &&
	  rg_req[207:206] == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2 &&
	  rg_req[207:206] != 2'd2 &&
	  rg_req[207:206] != 2'd0 &&
	  rg_req[207:206] != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d409)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d413)
	$write(" f3 %3b", rg_req[205:203]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d409)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d413)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d409)
	$write(" f3 %3b", rg_req[205:203]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d413)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d409)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d413)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b00010)
	$write("LR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b00011)
	$write("SC");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b0)
	$write("ADD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b00001)
	$write("SWAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b00100)
	$write("XOR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b01100)
	$write("AND");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b01000)
	$write("OR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b10000)
	$write("MIN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b10100)
	$write("MAX");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2 &&
	  rg_req[207:206] == 2'd2 &&
	  rg_req[74:70] == 5'b11000)
	$write("MINU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map_m_is_mem_addr_tlb_mv_vm_xlate_rg_req_5_ETC___d468)
	$write("MAXU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d413)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d409)
	$write(" aqrl %2b", rg_req[69:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  NOT_tlb_mv_vm_xlate_rg_req_56_BITS_202_TO_139__ETC___d413)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2)
	$write(" va %0h", rg_req[202:139]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2 &&
	  (rg_req[207:206] == 2'd2 && rg_req[74:70] != 5'b00010 ||
	   rg_req[207:206] == 2'd1))
	$write(" st_val %0h", rg_req[138:75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2 &&
	  (rg_req[207:206] != 2'd2 || rg_req[74:70] == 5'b00010) &&
	  rg_req[207:206] != 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2)
	$write(" priv %0d sstatus_SUM %0d mstatus_MXR %0d satp %0h",
	       rg_req[67:66],
	       rg_req[65],
	       rg_req[64],
	       rg_req[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  soc_map$m_is_mem_addr &&
	  cache$mav_request_pa[129:128] == 2'd2)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PA && tlb$mv_vm_xlate[200:199] != 2'd1 &&
	  tlb$mv_vm_xlate[200:199] != 2'd2 &&
	  !soc_map$m_is_mem_addr &&
	  NOT_verbosity_1_ULT_3_60___d261)
	$display("    MMIO started; goto FSM_MAIN_MMIO_WAIT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_cache_WAIT &&
	  NOT_verbosity_1_ULT_2_2___d33)
	begin
	  v__h5308 = $stime;
	  #0;
	end
    v__h5302 = v__h5308 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_cache_WAIT &&
	  NOT_verbosity_1_ULT_2_2___d33)
	$display("%0d: %m.rl_fsm_main_cache_WAIT: awaiting cache refill",
		 v__h5302);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_mmio_WAIT && NOT_verbosity_1_ULT_2_2___d33)
	begin
	  v__h5496 = $stime;
	  #0;
	end
    v__h5490 = v__h5496 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_mmio_WAIT && NOT_verbosity_1_ULT_2_2___d33)
	$display("%d: %m.rl_fsm_main_mmio_WAIT", v__h5490);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PTW_start && NOT_verbosity_1_ULT_2_2___d33)
	begin
	  v__h5751 = $stime;
	  #0;
	end
    v__h5745 = v__h5751 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PTW_start && NOT_verbosity_1_ULT_2_2___d33)
	$write("%0d: %m.rl_fsm_main_PTW_start:\n    ", v__h5745);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PTW_start && NOT_verbosity_1_ULT_2_2___d33)
	$write("PTW_Req { ", "va: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PTW_start && NOT_verbosity_1_ULT_2_2___d33)
	$write("'h%h", rg_req[202:139]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PTW_start && NOT_verbosity_1_ULT_2_2___d33)
	$write(", ", "satp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PTW_start && NOT_verbosity_1_ULT_2_2___d33)
	$write("'h%h", rg_req[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PTW_start && NOT_verbosity_1_ULT_2_2___d33)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0)
	begin
	  v__h2887 = $stime;
	  #0;
	end
    v__h2881 = v__h2887 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0) $display("%0d: %m.ma_req", v__h2881);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0) $write("    Req: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd2)
	$write("MMU_Cache_Req{");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] != 2'd2)
	$write("MMU_Cache_Req{");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] != 2'd2 &&
	  wire_mmu_cache_req$wget[207:206] != 2'd0 &&
	  wire_mmu_cache_req$wget[207:206] != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] != 2'd2)
	$write(" f3 %3b", wire_mmu_cache_req$wget[205:203]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd2)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd2)
	$write(" f3 %3b", wire_mmu_cache_req$wget[205:203]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd2)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd2 &&
	  wire_mmu_cache_req$wget[74:70] == 5'b00010)
	$write("LR");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd2 &&
	  wire_mmu_cache_req$wget[74:70] == 5'b00011)
	$write("SC");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd2 &&
	  wire_mmu_cache_req$wget[74:70] == 5'b0)
	$write("ADD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd2 &&
	  wire_mmu_cache_req$wget[74:70] == 5'b00001)
	$write("SWAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd2 &&
	  wire_mmu_cache_req$wget[74:70] == 5'b00100)
	$write("XOR");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd2 &&
	  wire_mmu_cache_req$wget[74:70] == 5'b01100)
	$write("AND");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd2 &&
	  wire_mmu_cache_req$wget[74:70] == 5'b01000)
	$write("OR");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd2 &&
	  wire_mmu_cache_req$wget[74:70] == 5'b10000)
	$write("MIN");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd2 &&
	  wire_mmu_cache_req$wget[74:70] == 5'b10100)
	$write("MAX");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd2 &&
	  wire_mmu_cache_req$wget[74:70] == 5'b11000)
	$write("MINU");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd2 &&
	  wire_mmu_cache_req$wget[74:70] != 5'b00010 &&
	  wire_mmu_cache_req$wget[74:70] != 5'b00011 &&
	  wire_mmu_cache_req$wget[74:70] != 5'b0 &&
	  wire_mmu_cache_req$wget[74:70] != 5'b00001 &&
	  wire_mmu_cache_req$wget[74:70] != 5'b00100 &&
	  wire_mmu_cache_req$wget[74:70] != 5'b01100 &&
	  wire_mmu_cache_req$wget[74:70] != 5'b01000 &&
	  wire_mmu_cache_req$wget[74:70] != 5'b10000 &&
	  wire_mmu_cache_req$wget[74:70] != 5'b10100 &&
	  wire_mmu_cache_req$wget[74:70] != 5'b11000)
	$write("MAXU");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] == 2'd2)
	$write(" aqrl %2b", wire_mmu_cache_req$wget[69:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  wire_mmu_cache_req$wget[207:206] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0)
	$write(" va %0h", wire_mmu_cache_req$wget[202:139]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  (wire_mmu_cache_req$wget[207:206] == 2'd2 &&
	   wire_mmu_cache_req$wget[74:70] != 5'b00010 ||
	   wire_mmu_cache_req$wget[207:206] == 2'd1))
	$write(" st_val %0h", wire_mmu_cache_req$wget[138:75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0 &&
	  (wire_mmu_cache_req$wget[207:206] != 2'd2 ||
	   wire_mmu_cache_req$wget[74:70] == 5'b00010) &&
	  wire_mmu_cache_req$wget[207:206] != 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0)
	$write(" priv %0d sstatus_SUM %0d mstatus_MXR %0d satp %0h",
	       wire_mmu_cache_req$wget[67:66],
	       wire_mmu_cache_req$wget[65],
	       wire_mmu_cache_req$wget[64],
	       wire_mmu_cache_req$wget[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && verbosity != 3'd0) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PTW_finished &&
	  f_ptw_rsps$D_OUT[131:130] == 2'd0 &&
	  NOT_verbosity_1_ULT_2_2___d33)
	begin
	  v__h6021 = $stime;
	  #0;
	end
    v__h6015 = v__h6021 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PTW_finished &&
	  f_ptw_rsps$D_OUT[131:130] == 2'd0 &&
	  NOT_verbosity_1_ULT_2_2___d33)
	$display("%0d: %m.rl_fsm_main_PTW_finished: ok; retry", v__h6015);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PTW_finished &&
	  f_ptw_rsps$D_OUT[131:130] == 2'd1 &&
	  NOT_verbosity_1_ULT_2_2___d33)
	begin
	  v__h6141 = $stime;
	  #0;
	end
    v__h6135 = v__h6141 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PTW_finished &&
	  f_ptw_rsps$D_OUT[131:130] == 2'd1 &&
	  NOT_verbosity_1_ULT_2_2___d33)
	$display("%0d: %m.rl_fsm_main_PTW_finished: ACCESS FAULT", v__h6135);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PTW_finished &&
	  f_ptw_rsps$D_OUT[131:130] != 2'd0 &&
	  f_ptw_rsps$D_OUT[131:130] != 2'd1 &&
	  NOT_verbosity_1_ULT_2_2___d33)
	begin
	  v__h6270 = $stime;
	  #0;
	end
    v__h6264 = v__h6270 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fsm_main_PTW_finished &&
	  f_ptw_rsps$D_OUT[131:130] != 2'd0 &&
	  f_ptw_rsps$D_OUT[131:130] != 2'd1 &&
	  NOT_verbosity_1_ULT_2_2___d33)
	$display("%0d: %m.rl_fsm_main_PTW_finished: PAGE FAULT", v__h6264);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_flush_start && NOT_verbosity_1_ULT_2_2___d33)
	begin
	  v__h6638 = $stime;
	  #0;
	end
    v__h6632 = v__h6638 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_flush_start && NOT_verbosity_1_ULT_2_2___d33)
	$display("%0d: %m.rl_cache_flush_start", v__h6632);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_flush_finish && NOT_verbosity_1_ULT_2_2___d33)
	begin
	  v__h6779 = $stime;
	  #0;
	end
    v__h6773 = v__h6779 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_flush_finish && NOT_verbosity_1_ULT_2_2___d33)
	$display("%0d: %m.rl_cache_flush_finish", v__h6773);
  end
  // synopsys translate_on
endmodule  // mkI_MMU_Cache

