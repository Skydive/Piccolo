//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_reset                      O     1 const
// imem_valid                     O     1
// imem_is_i32_not_i16            O     1 const
// imem_pc                        O    32 reg
// imem_instr                     O    32
// imem_exc                       O     1
// imem_exc_code                  O     4 reg
// imem_tval                      O    32 reg
// dma_server_awready             O     1 reg
// dma_server_wready              O     1 reg
// dma_server_bvalid              O     1 reg
// dma_server_bid                 O     4 reg
// dma_server_bresp               O     2 reg
// dma_server_arready             O     1 reg
// dma_server_rvalid              O     1 reg
// dma_server_rid                 O     4 reg
// dma_server_rdata               O    32 reg
// dma_server_rresp               O     2 reg
// dma_server_rlast               O     1 reg
// verbosity                      I     2
// CLK                            I     1 clock
// RST_N                          I     1 reset
// imem_req_f3                    I     3
// imem_req_addr                  I    32
// dma_server_awvalid             I     1
// dma_server_awid                I     4 reg
// dma_server_awaddr              I    32 reg
// dma_server_awlen               I     8 reg
// dma_server_awsize              I     3 reg
// dma_server_awburst             I     2 reg
// dma_server_awlock              I     1 reg
// dma_server_awcache             I     4 reg
// dma_server_awprot              I     3 reg
// dma_server_awqos               I     4 reg
// dma_server_awregion            I     4 reg
// dma_server_wvalid              I     1
// dma_server_wdata               I    32 reg
// dma_server_wstrb               I     4 reg
// dma_server_wlast               I     1 reg
// dma_server_bready              I     1
// dma_server_arvalid             I     1
// dma_server_arid                I     4 reg
// dma_server_araddr              I    32 reg
// dma_server_arlen               I     8 reg
// dma_server_arsize              I     3 reg
// dma_server_arburst             I     2 reg
// dma_server_arlock              I     1 reg
// dma_server_arcache             I     4 reg
// dma_server_arprot              I     3 reg
// dma_server_arqos               I     4 reg
// dma_server_arregion            I     4 reg
// dma_server_rready              I     1
// EN_reset                       I     1
// EN_imem_req                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkITCM(verbosity,
	      CLK,
	      RST_N,

	      EN_reset,
	      RDY_reset,

	      imem_req_f3,
	      imem_req_addr,
	      EN_imem_req,

	      imem_valid,

	      imem_is_i32_not_i16,

	      imem_pc,

	      imem_instr,

	      imem_exc,

	      imem_exc_code,

	      imem_tval,

	      dma_server_awvalid,
	      dma_server_awid,
	      dma_server_awaddr,
	      dma_server_awlen,
	      dma_server_awsize,
	      dma_server_awburst,
	      dma_server_awlock,
	      dma_server_awcache,
	      dma_server_awprot,
	      dma_server_awqos,
	      dma_server_awregion,

	      dma_server_awready,

	      dma_server_wvalid,
	      dma_server_wdata,
	      dma_server_wstrb,
	      dma_server_wlast,

	      dma_server_wready,

	      dma_server_bvalid,

	      dma_server_bid,

	      dma_server_bresp,

	      dma_server_bready,

	      dma_server_arvalid,
	      dma_server_arid,
	      dma_server_araddr,
	      dma_server_arlen,
	      dma_server_arsize,
	      dma_server_arburst,
	      dma_server_arlock,
	      dma_server_arcache,
	      dma_server_arprot,
	      dma_server_arqos,
	      dma_server_arregion,

	      dma_server_arready,

	      dma_server_rvalid,

	      dma_server_rid,

	      dma_server_rdata,

	      dma_server_rresp,

	      dma_server_rlast,

	      dma_server_rready);
  input  [1 : 0] verbosity;
  input  CLK;
  input  RST_N;

  // action method reset
  input  EN_reset;
  output RDY_reset;

  // action method imem_req
  input  [2 : 0] imem_req_f3;
  input  [31 : 0] imem_req_addr;
  input  EN_imem_req;

  // value method imem_valid
  output imem_valid;

  // value method imem_is_i32_not_i16
  output imem_is_i32_not_i16;

  // value method imem_pc
  output [31 : 0] imem_pc;

  // value method imem_instr
  output [31 : 0] imem_instr;

  // value method imem_exc
  output imem_exc;

  // value method imem_exc_code
  output [3 : 0] imem_exc_code;

  // value method imem_tval
  output [31 : 0] imem_tval;

  // action method dma_server_m_awvalid
  input  dma_server_awvalid;
  input  [3 : 0] dma_server_awid;
  input  [31 : 0] dma_server_awaddr;
  input  [7 : 0] dma_server_awlen;
  input  [2 : 0] dma_server_awsize;
  input  [1 : 0] dma_server_awburst;
  input  dma_server_awlock;
  input  [3 : 0] dma_server_awcache;
  input  [2 : 0] dma_server_awprot;
  input  [3 : 0] dma_server_awqos;
  input  [3 : 0] dma_server_awregion;

  // value method dma_server_m_awready
  output dma_server_awready;

  // action method dma_server_m_wvalid
  input  dma_server_wvalid;
  input  [31 : 0] dma_server_wdata;
  input  [3 : 0] dma_server_wstrb;
  input  dma_server_wlast;

  // value method dma_server_m_wready
  output dma_server_wready;

  // value method dma_server_m_bvalid
  output dma_server_bvalid;

  // value method dma_server_m_bid
  output [3 : 0] dma_server_bid;

  // value method dma_server_m_bresp
  output [1 : 0] dma_server_bresp;

  // value method dma_server_m_buser

  // action method dma_server_m_bready
  input  dma_server_bready;

  // action method dma_server_m_arvalid
  input  dma_server_arvalid;
  input  [3 : 0] dma_server_arid;
  input  [31 : 0] dma_server_araddr;
  input  [7 : 0] dma_server_arlen;
  input  [2 : 0] dma_server_arsize;
  input  [1 : 0] dma_server_arburst;
  input  dma_server_arlock;
  input  [3 : 0] dma_server_arcache;
  input  [2 : 0] dma_server_arprot;
  input  [3 : 0] dma_server_arqos;
  input  [3 : 0] dma_server_arregion;

  // value method dma_server_m_arready
  output dma_server_arready;

  // value method dma_server_m_rvalid
  output dma_server_rvalid;

  // value method dma_server_m_rid
  output [3 : 0] dma_server_rid;

  // value method dma_server_m_rdata
  output [31 : 0] dma_server_rdata;

  // value method dma_server_m_rresp
  output [1 : 0] dma_server_rresp;

  // value method dma_server_m_rlast
  output dma_server_rlast;

  // value method dma_server_m_ruser

  // action method dma_server_m_rready
  input  dma_server_rready;

  // signals for module outputs
  wire [31 : 0] dma_server_rdata, imem_instr, imem_pc, imem_tval;
  wire [3 : 0] dma_server_bid, dma_server_rid, imem_exc_code;
  wire [1 : 0] dma_server_bresp, dma_server_rresp;
  wire RDY_reset,
       dma_server_arready,
       dma_server_awready,
       dma_server_bvalid,
       dma_server_rlast,
       dma_server_rvalid,
       dma_server_wready,
       imem_exc,
       imem_is_i32_not_i16,
       imem_valid;

  // inlined wires
  wire [34 : 0] w_imem_req$wget;

  // register dma_port_rg_state
  reg [1 : 0] dma_port_rg_state;
  reg [1 : 0] dma_port_rg_state$D_IN;
  wire dma_port_rg_state$EN;

  // register rg_exc
  reg rg_exc;
  wire rg_exc$D_IN, rg_exc$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  wire [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_imem_req
  reg [34 : 0] rg_imem_req;
  wire [34 : 0] rg_imem_req$D_IN;
  wire rg_imem_req$EN;

  // register rg_imem_state
  reg [1 : 0] rg_imem_state;
  wire [1 : 0] rg_imem_state$D_IN;
  wire rg_imem_state$EN;

  // register rg_instr
  reg [31 : 0] rg_instr;
  wire [31 : 0] rg_instr$D_IN;
  wire rg_instr$EN;

  // register rg_pc
  reg [31 : 0] rg_pc;
  wire [31 : 0] rg_pc$D_IN;
  wire rg_pc$EN;

  // register rg_result_valid
  reg rg_result_valid;
  wire rg_result_valid$D_IN, rg_result_valid$EN;

  // ports of submodule dma_port_slave_xactor_f_rd_addr
  wire [64 : 0] dma_port_slave_xactor_f_rd_addr$D_IN,
		dma_port_slave_xactor_f_rd_addr$D_OUT;
  wire dma_port_slave_xactor_f_rd_addr$CLR,
       dma_port_slave_xactor_f_rd_addr$DEQ,
       dma_port_slave_xactor_f_rd_addr$EMPTY_N,
       dma_port_slave_xactor_f_rd_addr$ENQ,
       dma_port_slave_xactor_f_rd_addr$FULL_N;

  // ports of submodule dma_port_slave_xactor_f_rd_data
  wire [38 : 0] dma_port_slave_xactor_f_rd_data$D_IN,
		dma_port_slave_xactor_f_rd_data$D_OUT;
  wire dma_port_slave_xactor_f_rd_data$CLR,
       dma_port_slave_xactor_f_rd_data$DEQ,
       dma_port_slave_xactor_f_rd_data$EMPTY_N,
       dma_port_slave_xactor_f_rd_data$ENQ,
       dma_port_slave_xactor_f_rd_data$FULL_N;

  // ports of submodule dma_port_slave_xactor_f_wr_addr
  wire [64 : 0] dma_port_slave_xactor_f_wr_addr$D_IN,
		dma_port_slave_xactor_f_wr_addr$D_OUT;
  wire dma_port_slave_xactor_f_wr_addr$CLR,
       dma_port_slave_xactor_f_wr_addr$DEQ,
       dma_port_slave_xactor_f_wr_addr$EMPTY_N,
       dma_port_slave_xactor_f_wr_addr$ENQ,
       dma_port_slave_xactor_f_wr_addr$FULL_N;

  // ports of submodule dma_port_slave_xactor_f_wr_data
  wire [36 : 0] dma_port_slave_xactor_f_wr_data$D_IN,
		dma_port_slave_xactor_f_wr_data$D_OUT;
  wire dma_port_slave_xactor_f_wr_data$CLR,
       dma_port_slave_xactor_f_wr_data$DEQ,
       dma_port_slave_xactor_f_wr_data$EMPTY_N,
       dma_port_slave_xactor_f_wr_data$ENQ,
       dma_port_slave_xactor_f_wr_data$FULL_N;

  // ports of submodule dma_port_slave_xactor_f_wr_resp
  wire [5 : 0] dma_port_slave_xactor_f_wr_resp$D_IN,
	       dma_port_slave_xactor_f_wr_resp$D_OUT;
  wire dma_port_slave_xactor_f_wr_resp$CLR,
       dma_port_slave_xactor_f_wr_resp$DEQ,
       dma_port_slave_xactor_f_wr_resp$EMPTY_N,
       dma_port_slave_xactor_f_wr_resp$ENQ,
       dma_port_slave_xactor_f_wr_resp$FULL_N;

  // ports of submodule dma_port_soc_map
  wire [31 : 0] dma_port_soc_map$m_is_IO_addr_addr,
		dma_port_soc_map$m_is_clint_addr_addr,
		dma_port_soc_map$m_is_dtcm_addr_addr,
		dma_port_soc_map$m_is_itcm_addr_addr,
		dma_port_soc_map$m_is_mem_addr_addr,
		dma_port_soc_map$m_is_nmio_addr_addr,
		dma_port_soc_map$m_is_tcm_addr_addr,
		dma_port_soc_map$m_itcm_addr_base;

  // ports of submodule f_mem_rdata
  wire [64 : 0] f_mem_rdata$D_IN;
  wire f_mem_rdata$CLR, f_mem_rdata$DEQ, f_mem_rdata$ENQ;

  // ports of submodule f_mem_req
  wire [34 : 0] f_mem_req$D_IN;
  wire f_mem_req$CLR, f_mem_req$DEQ, f_mem_req$ENQ;

  // ports of submodule itcm
  wire [63 : 0] itcm$DIA, itcm$DIB, itcm$DOA, itcm$DOB;
  wire [31 : 0] itcm$ADDRA, itcm$ADDRB;
  wire [7 : 0] itcm$WEA, itcm$WEB;
  wire itcm$ENA, itcm$ENB;

  // ports of submodule soc_map
  wire [31 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_clint_addr_addr,
		soc_map$m_is_dtcm_addr_addr,
		soc_map$m_is_itcm_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_nmio_addr_addr,
		soc_map$m_is_tcm_addr_addr,
		soc_map$m_itcm_addr_base;
  wire soc_map$m_is_itcm_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_dma_port_rl_bad_rd_addr,
       CAN_FIRE_RL_dma_port_rl_bad_wr_addr,
       CAN_FIRE_RL_dma_port_rl_rd_req,
       CAN_FIRE_RL_dma_port_rl_rd_rsp,
       CAN_FIRE_RL_dma_port_rl_wr_req,
       CAN_FIRE_RL_rl_req,
       CAN_FIRE_RL_rl_tcm_rsp,
       CAN_FIRE_dma_server_m_arvalid,
       CAN_FIRE_dma_server_m_awvalid,
       CAN_FIRE_dma_server_m_bready,
       CAN_FIRE_dma_server_m_rready,
       CAN_FIRE_dma_server_m_wvalid,
       CAN_FIRE_imem_req,
       CAN_FIRE_reset,
       WILL_FIRE_RL_dma_port_rl_bad_rd_addr,
       WILL_FIRE_RL_dma_port_rl_bad_wr_addr,
       WILL_FIRE_RL_dma_port_rl_rd_req,
       WILL_FIRE_RL_dma_port_rl_rd_rsp,
       WILL_FIRE_RL_dma_port_rl_wr_req,
       WILL_FIRE_RL_rl_req,
       WILL_FIRE_RL_rl_tcm_rsp,
       WILL_FIRE_dma_server_m_arvalid,
       WILL_FIRE_dma_server_m_awvalid,
       WILL_FIRE_dma_server_m_bready,
       WILL_FIRE_dma_server_m_rready,
       WILL_FIRE_dma_server_m_wvalid,
       WILL_FIRE_imem_req,
       WILL_FIRE_reset;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_itcm$b_put_3__VAL_1;
  wire [38 : 0] MUX_dma_port_slave_xactor_f_rd_data$enq_1__VAL_1,
		MUX_dma_port_slave_xactor_f_rd_data$enq_1__VAL_2;
  wire [31 : 0] MUX_itcm$b_put_2__VAL_1, MUX_itcm$b_put_2__VAL_2;
  wire [7 : 0] MUX_itcm$b_put_1__VAL_1;
  wire [5 : 0] MUX_dma_port_slave_xactor_f_wr_resp$enq_1__VAL_1,
	       MUX_dma_port_slave_xactor_f_wr_resp$enq_1__VAL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h3481;
  reg [31 : 0] v__h3832;
  reg [31 : 0] v__h2025;
  reg [31 : 0] v__h2326;
  reg [31 : 0] v__h2605;
  reg [31 : 0] v__h2150;
  reg [31 : 0] v__h2917;
  reg [31 : 0] v__h4555;
  reg [31 : 0] v__h4613;
  reg [31 : 0] v__h2599;
  reg [31 : 0] v__h2019;
  reg [31 : 0] v__h2144;
  reg [31 : 0] v__h2320;
  reg [31 : 0] v__h2911;
  reg [31 : 0] v__h3475;
  reg [31 : 0] v__h3826;
  reg [31 : 0] v__h4549;
  reg [31 : 0] v__h4607;
  // synopsys translate_on

  // remaining internal signals
  wire [31 : 0] dma_port_slave_xactor_f_rd_addrD_OUT_BITS_60__ETC__q2,
		dma_port_slave_xactor_f_wr_addrD_OUT_BITS_60__ETC__q1,
		instr__h3434,
		w_imem_reqwget_BITS_34_TO_3_MINUS_soc_mapm_i_ETC__q3,
		word__h2185;
  wire [7 : 0] strb__h2816;
  wire NOT_verbosity_ULE_1_9___d30,
       NOT_w_imem_req_wget__09_BITS_1_TO_0_11_EQ_0b0__ETC___d132;

  // action method reset
  assign RDY_reset = 1'd1 ;
  assign CAN_FIRE_reset = 1'd1 ;
  assign WILL_FIRE_reset = EN_reset ;

  // action method imem_req
  assign CAN_FIRE_imem_req = 1'd1 ;
  assign WILL_FIRE_imem_req = EN_imem_req ;

  // value method imem_valid
  assign imem_valid = rg_imem_state == 2'd1 && rg_result_valid ;

  // value method imem_is_i32_not_i16
  assign imem_is_i32_not_i16 = 1'd1 ;

  // value method imem_pc
  assign imem_pc = rg_imem_req[34:3] ;

  // value method imem_instr
  assign imem_instr = rg_imem_req[5] ? itcm$DOA[63:32] : itcm$DOA[31:0] ;

  // value method imem_exc
  assign imem_exc = rg_imem_state == 2'd1 && rg_exc ;

  // value method imem_exc_code
  assign imem_exc_code = rg_exc_code ;

  // value method imem_tval
  assign imem_tval = rg_imem_req[34:3] ;

  // action method dma_server_m_awvalid
  assign CAN_FIRE_dma_server_m_awvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_awvalid = 1'd1 ;

  // value method dma_server_m_awready
  assign dma_server_awready = dma_port_slave_xactor_f_wr_addr$FULL_N ;

  // action method dma_server_m_wvalid
  assign CAN_FIRE_dma_server_m_wvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_wvalid = 1'd1 ;

  // value method dma_server_m_wready
  assign dma_server_wready = dma_port_slave_xactor_f_wr_data$FULL_N ;

  // value method dma_server_m_bvalid
  assign dma_server_bvalid = dma_port_slave_xactor_f_wr_resp$EMPTY_N ;

  // value method dma_server_m_bid
  assign dma_server_bid = dma_port_slave_xactor_f_wr_resp$D_OUT[5:2] ;

  // value method dma_server_m_bresp
  assign dma_server_bresp = dma_port_slave_xactor_f_wr_resp$D_OUT[1:0] ;

  // action method dma_server_m_bready
  assign CAN_FIRE_dma_server_m_bready = 1'd1 ;
  assign WILL_FIRE_dma_server_m_bready = 1'd1 ;

  // action method dma_server_m_arvalid
  assign CAN_FIRE_dma_server_m_arvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_arvalid = 1'd1 ;

  // value method dma_server_m_arready
  assign dma_server_arready = dma_port_slave_xactor_f_rd_addr$FULL_N ;

  // value method dma_server_m_rvalid
  assign dma_server_rvalid = dma_port_slave_xactor_f_rd_data$EMPTY_N ;

  // value method dma_server_m_rid
  assign dma_server_rid = dma_port_slave_xactor_f_rd_data$D_OUT[38:35] ;

  // value method dma_server_m_rdata
  assign dma_server_rdata = dma_port_slave_xactor_f_rd_data$D_OUT[34:3] ;

  // value method dma_server_m_rresp
  assign dma_server_rresp = dma_port_slave_xactor_f_rd_data$D_OUT[2:1] ;

  // value method dma_server_m_rlast
  assign dma_server_rlast = dma_port_slave_xactor_f_rd_data$D_OUT[0] ;

  // action method dma_server_m_rready
  assign CAN_FIRE_dma_server_m_rready = 1'd1 ;
  assign WILL_FIRE_dma_server_m_rready = 1'd1 ;

  // submodule dma_port_slave_xactor_f_rd_addr
  FIFO2 #(.width(32'd65),
	  .guarded(32'd1)) dma_port_slave_xactor_f_rd_addr(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(dma_port_slave_xactor_f_rd_addr$D_IN),
							   .ENQ(dma_port_slave_xactor_f_rd_addr$ENQ),
							   .DEQ(dma_port_slave_xactor_f_rd_addr$DEQ),
							   .CLR(dma_port_slave_xactor_f_rd_addr$CLR),
							   .D_OUT(dma_port_slave_xactor_f_rd_addr$D_OUT),
							   .FULL_N(dma_port_slave_xactor_f_rd_addr$FULL_N),
							   .EMPTY_N(dma_port_slave_xactor_f_rd_addr$EMPTY_N));

  // submodule dma_port_slave_xactor_f_rd_data
  FIFO2 #(.width(32'd39),
	  .guarded(32'd1)) dma_port_slave_xactor_f_rd_data(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(dma_port_slave_xactor_f_rd_data$D_IN),
							   .ENQ(dma_port_slave_xactor_f_rd_data$ENQ),
							   .DEQ(dma_port_slave_xactor_f_rd_data$DEQ),
							   .CLR(dma_port_slave_xactor_f_rd_data$CLR),
							   .D_OUT(dma_port_slave_xactor_f_rd_data$D_OUT),
							   .FULL_N(dma_port_slave_xactor_f_rd_data$FULL_N),
							   .EMPTY_N(dma_port_slave_xactor_f_rd_data$EMPTY_N));

  // submodule dma_port_slave_xactor_f_wr_addr
  FIFO2 #(.width(32'd65),
	  .guarded(32'd1)) dma_port_slave_xactor_f_wr_addr(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(dma_port_slave_xactor_f_wr_addr$D_IN),
							   .ENQ(dma_port_slave_xactor_f_wr_addr$ENQ),
							   .DEQ(dma_port_slave_xactor_f_wr_addr$DEQ),
							   .CLR(dma_port_slave_xactor_f_wr_addr$CLR),
							   .D_OUT(dma_port_slave_xactor_f_wr_addr$D_OUT),
							   .FULL_N(dma_port_slave_xactor_f_wr_addr$FULL_N),
							   .EMPTY_N(dma_port_slave_xactor_f_wr_addr$EMPTY_N));

  // submodule dma_port_slave_xactor_f_wr_data
  FIFO2 #(.width(32'd37),
	  .guarded(32'd1)) dma_port_slave_xactor_f_wr_data(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(dma_port_slave_xactor_f_wr_data$D_IN),
							   .ENQ(dma_port_slave_xactor_f_wr_data$ENQ),
							   .DEQ(dma_port_slave_xactor_f_wr_data$DEQ),
							   .CLR(dma_port_slave_xactor_f_wr_data$CLR),
							   .D_OUT(dma_port_slave_xactor_f_wr_data$D_OUT),
							   .FULL_N(dma_port_slave_xactor_f_wr_data$FULL_N),
							   .EMPTY_N(dma_port_slave_xactor_f_wr_data$EMPTY_N));

  // submodule dma_port_slave_xactor_f_wr_resp
  FIFO2 #(.width(32'd6),
	  .guarded(32'd1)) dma_port_slave_xactor_f_wr_resp(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(dma_port_slave_xactor_f_wr_resp$D_IN),
							   .ENQ(dma_port_slave_xactor_f_wr_resp$ENQ),
							   .DEQ(dma_port_slave_xactor_f_wr_resp$DEQ),
							   .CLR(dma_port_slave_xactor_f_wr_resp$CLR),
							   .D_OUT(dma_port_slave_xactor_f_wr_resp$D_OUT),
							   .FULL_N(dma_port_slave_xactor_f_wr_resp$FULL_N),
							   .EMPTY_N(dma_port_slave_xactor_f_wr_resp$EMPTY_N));

  // submodule dma_port_soc_map
  mkSoC_Map dma_port_soc_map(.CLK(CLK),
			     .RST_N(RST_N),
			     .m_is_IO_addr_addr(dma_port_soc_map$m_is_IO_addr_addr),
			     .m_is_clint_addr_addr(dma_port_soc_map$m_is_clint_addr_addr),
			     .m_is_dtcm_addr_addr(dma_port_soc_map$m_is_dtcm_addr_addr),
			     .m_is_itcm_addr_addr(dma_port_soc_map$m_is_itcm_addr_addr),
			     .m_is_mem_addr_addr(dma_port_soc_map$m_is_mem_addr_addr),
			     .m_is_nmio_addr_addr(dma_port_soc_map$m_is_nmio_addr_addr),
			     .m_is_tcm_addr_addr(dma_port_soc_map$m_is_tcm_addr_addr),
			     .m_clint_addr_base(),
			     .m_clint_addr_size(),
			     .m_clint_addr_lim(),
			     .m_plic_addr_base(),
			     .m_plic_addr_size(),
			     .m_plic_addr_lim(),
			     .m_uart0_addr_base(),
			     .m_uart0_addr_size(),
			     .m_uart0_addr_lim(),
			     .m_gpio0_addr_base(),
			     .m_gpio0_addr_size(),
			     .m_gpio0_addr_lim(),
			     .m_boot_rom_addr_base(),
			     .m_boot_rom_addr_size(),
			     .m_boot_rom_addr_lim(),
			     .m_mem0_controller_addr_base(),
			     .m_mem0_controller_addr_size(),
			     .m_mem0_controller_addr_lim(),
			     .m_itcm_addr_base(dma_port_soc_map$m_itcm_addr_base),
			     .m_itcm_addr_size(),
			     .m_itcm_addr_lim(),
			     .m_is_itcm_addr(),
			     .m_dtcm_addr_base(),
			     .m_dtcm_addr_size(),
			     .m_dtcm_addr_lim(),
			     .m_is_dtcm_addr(),
			     .m_is_tcm_addr(),
			     .m_is_mem_addr(),
			     .m_is_IO_addr(),
			     .m_is_nmio_addr(),
			     .m_is_clint_addr(),
			     .m_pc_reset_value(),
			     .m_mtvec_reset_value(),
			     .m_nmivec_reset_value());

  // submodule f_mem_rdata
  FIFO1 #(.width(32'd65), .guarded(32'd1)) f_mem_rdata(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_mem_rdata$D_IN),
						       .ENQ(f_mem_rdata$ENQ),
						       .DEQ(f_mem_rdata$DEQ),
						       .CLR(f_mem_rdata$CLR),
						       .D_OUT(),
						       .FULL_N(),
						       .EMPTY_N());

  // submodule f_mem_req
  FIFO1 #(.width(32'd35), .guarded(32'd1)) f_mem_req(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_mem_req$D_IN),
						     .ENQ(f_mem_req$ENQ),
						     .DEQ(f_mem_req$DEQ),
						     .CLR(f_mem_req$CLR),
						     .D_OUT(),
						     .FULL_N(),
						     .EMPTY_N());

  // submodule itcm
  BRAM2BELoad #(.FILENAME("/tmp/e342zni.hex"),
		.PIPELINED(1'd0),
		.ADDR_WIDTH(32'd32),
		.DATA_WIDTH(32'd64),
		.CHUNKSIZE(32'd8),
		.WE_WIDTH(32'd8),
		.MEMSIZE(33'd16384),
		.BINARY(1'd0)) itcm(.CLKA(CLK),
				    .CLKB(CLK),
				    .ADDRA(itcm$ADDRA),
				    .ADDRB(itcm$ADDRB),
				    .DIA(itcm$DIA),
				    .DIB(itcm$DIB),
				    .WEA(itcm$WEA),
				    .WEB(itcm$WEB),
				    .ENA(itcm$ENA),
				    .ENB(itcm$ENB),
				    .DOA(itcm$DOA),
				    .DOB(itcm$DOB));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_clint_addr_addr(soc_map$m_is_clint_addr_addr),
		    .m_is_dtcm_addr_addr(soc_map$m_is_dtcm_addr_addr),
		    .m_is_itcm_addr_addr(soc_map$m_is_itcm_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_nmio_addr_addr(soc_map$m_is_nmio_addr_addr),
		    .m_is_tcm_addr_addr(soc_map$m_is_tcm_addr_addr),
		    .m_clint_addr_base(),
		    .m_clint_addr_size(),
		    .m_clint_addr_lim(),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_gpio0_addr_base(),
		    .m_gpio0_addr_size(),
		    .m_gpio0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_itcm_addr_base(soc_map$m_itcm_addr_base),
		    .m_itcm_addr_size(),
		    .m_itcm_addr_lim(),
		    .m_is_itcm_addr(soc_map$m_is_itcm_addr),
		    .m_dtcm_addr_base(),
		    .m_dtcm_addr_size(),
		    .m_dtcm_addr_lim(),
		    .m_is_dtcm_addr(),
		    .m_is_tcm_addr(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_nmio_addr(),
		    .m_is_clint_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // rule RL_rl_tcm_rsp
  assign CAN_FIRE_RL_rl_tcm_rsp = rg_imem_state == 2'd1 ;
  assign WILL_FIRE_RL_rl_tcm_rsp = CAN_FIRE_RL_rl_tcm_rsp ;

  // rule RL_rl_req
  assign CAN_FIRE_RL_rl_req = EN_imem_req ;
  assign WILL_FIRE_RL_rl_req = EN_imem_req ;

  // rule RL_dma_port_rl_bad_rd_addr
  assign CAN_FIRE_RL_dma_port_rl_bad_rd_addr =
	     dma_port_slave_xactor_f_rd_addr$EMPTY_N &&
	     dma_port_slave_xactor_f_rd_data$FULL_N &&
	     dma_port_rg_state == 2'd0 &&
	     dma_port_slave_xactor_f_rd_addr$D_OUT[31:29] != 3'd0 &&
	     dma_port_slave_xactor_f_rd_addr$D_OUT[31:29] != 3'd4 ;
  assign WILL_FIRE_RL_dma_port_rl_bad_rd_addr =
	     CAN_FIRE_RL_dma_port_rl_bad_rd_addr ;

  // rule RL_dma_port_rl_rd_rsp
  assign CAN_FIRE_RL_dma_port_rl_rd_rsp =
	     dma_port_slave_xactor_f_rd_addr$EMPTY_N &&
	     dma_port_slave_xactor_f_rd_data$FULL_N &&
	     dma_port_rg_state == 2'd1 ;
  assign WILL_FIRE_RL_dma_port_rl_rd_rsp = CAN_FIRE_RL_dma_port_rl_rd_rsp ;

  // rule RL_dma_port_rl_bad_wr_addr
  assign CAN_FIRE_RL_dma_port_rl_bad_wr_addr =
	     dma_port_slave_xactor_f_wr_addr$EMPTY_N &&
	     dma_port_slave_xactor_f_wr_data$EMPTY_N &&
	     dma_port_slave_xactor_f_wr_resp$FULL_N &&
	     dma_port_rg_state == 2'd0 &&
	     dma_port_slave_xactor_f_wr_addr$D_OUT[31:29] != 3'd0 &&
	     dma_port_slave_xactor_f_wr_addr$D_OUT[31:29] != 3'd4 ;
  assign WILL_FIRE_RL_dma_port_rl_bad_wr_addr =
	     CAN_FIRE_RL_dma_port_rl_bad_wr_addr ;

  // rule RL_dma_port_rl_rd_req
  assign CAN_FIRE_RL_dma_port_rl_rd_req =
	     dma_port_slave_xactor_f_rd_addr$EMPTY_N &&
	     dma_port_rg_state == 2'd0 &&
	     (dma_port_slave_xactor_f_rd_addr$D_OUT[31:29] == 3'd0 ||
	      dma_port_slave_xactor_f_rd_addr$D_OUT[31:29] == 3'd4) ;
  assign WILL_FIRE_RL_dma_port_rl_rd_req = CAN_FIRE_RL_dma_port_rl_rd_req ;

  // rule RL_dma_port_rl_wr_req
  assign CAN_FIRE_RL_dma_port_rl_wr_req =
	     dma_port_slave_xactor_f_wr_addr$EMPTY_N &&
	     dma_port_slave_xactor_f_wr_data$EMPTY_N &&
	     dma_port_slave_xactor_f_wr_resp$FULL_N &&
	     dma_port_rg_state == 2'd0 &&
	     (dma_port_slave_xactor_f_wr_addr$D_OUT[31:29] == 3'd0 ||
	      dma_port_slave_xactor_f_wr_addr$D_OUT[31:29] == 3'd4) ;
  assign WILL_FIRE_RL_dma_port_rl_wr_req =
	     CAN_FIRE_RL_dma_port_rl_wr_req &&
	     !WILL_FIRE_RL_dma_port_rl_rd_req ;

  // inputs to muxes for submodule ports
  assign MUX_dma_port_slave_xactor_f_rd_data$enq_1__VAL_1 =
	     { dma_port_slave_xactor_f_rd_addr$D_OUT[64:29], 3'd5 } ;
  assign MUX_dma_port_slave_xactor_f_rd_data$enq_1__VAL_2 =
	     { dma_port_slave_xactor_f_rd_addr$D_OUT[64:61],
	       word__h2185,
	       3'd1 } ;
  assign MUX_dma_port_slave_xactor_f_wr_resp$enq_1__VAL_1 =
	     { dma_port_slave_xactor_f_wr_addr$D_OUT[64:61], 2'd2 } ;
  assign MUX_dma_port_slave_xactor_f_wr_resp$enq_1__VAL_2 =
	     { dma_port_slave_xactor_f_wr_addr$D_OUT[64:61], 2'd0 } ;
  assign MUX_itcm$b_put_1__VAL_1 =
	     (dma_port_slave_xactor_f_wr_addr$D_OUT[31:29] == 3'd0) ?
	       strb__h2816 :
	       { dma_port_slave_xactor_f_wr_data$D_OUT[4:1], 4'd0 } ;
  assign MUX_itcm$b_put_2__VAL_1 =
	     { 3'd0,
	       dma_port_slave_xactor_f_wr_addrD_OUT_BITS_60__ETC__q1[31:3] } ;
  assign MUX_itcm$b_put_2__VAL_2 =
	     { 3'd0,
	       dma_port_slave_xactor_f_rd_addrD_OUT_BITS_60__ETC__q2[31:3] } ;
  assign MUX_itcm$b_put_3__VAL_1 =
	     {2{dma_port_slave_xactor_f_wr_data$D_OUT[36:5]}} ;

  // inlined wires
  assign w_imem_req$wget = { imem_req_addr, imem_req_f3 } ;

  // register dma_port_rg_state
  always@(EN_reset or
	  WILL_FIRE_RL_dma_port_rl_rd_req or WILL_FIRE_RL_dma_port_rl_rd_rsp)
  case (1'b1)
    EN_reset: dma_port_rg_state$D_IN = 2'd0;
    WILL_FIRE_RL_dma_port_rl_rd_req: dma_port_rg_state$D_IN = 2'd1;
    WILL_FIRE_RL_dma_port_rl_rd_rsp: dma_port_rg_state$D_IN = 2'd0;
    default: dma_port_rg_state$D_IN = 2'b10 /* unspecified value */ ;
  endcase
  assign dma_port_rg_state$EN =
	     WILL_FIRE_RL_dma_port_rl_rd_rsp || EN_reset ||
	     WILL_FIRE_RL_dma_port_rl_rd_req ;

  // register rg_exc
  assign rg_exc$D_IN =
	     NOT_w_imem_req_wget__09_BITS_1_TO_0_11_EQ_0b0__ETC___d132 ||
	     !soc_map$m_is_itcm_addr ;
  assign rg_exc$EN = EN_imem_req ;

  // register rg_exc_code
  assign rg_exc_code$D_IN =
	     NOT_w_imem_req_wget__09_BITS_1_TO_0_11_EQ_0b0__ETC___d132 ?
	       4'd0 :
	       4'd1 ;
  assign rg_exc_code$EN =
	     EN_imem_req &&
	     (NOT_w_imem_req_wget__09_BITS_1_TO_0_11_EQ_0b0__ETC___d132 ||
	      !soc_map$m_is_itcm_addr) ;

  // register rg_imem_req
  assign rg_imem_req$D_IN = w_imem_req$wget ;
  assign rg_imem_req$EN = EN_imem_req ;

  // register rg_imem_state
  assign rg_imem_state$D_IN = EN_reset ? 2'd0 : 2'd1 ;
  assign rg_imem_state$EN = EN_reset || EN_imem_req ;

  // register rg_instr
  assign rg_instr$D_IN = 32'h0 ;
  assign rg_instr$EN = 1'b0 ;

  // register rg_pc
  assign rg_pc$D_IN = 32'h0 ;
  assign rg_pc$EN = 1'b0 ;

  // register rg_result_valid
  assign rg_result_valid$D_IN = !EN_reset ;
  assign rg_result_valid$EN = EN_reset || EN_imem_req ;

  // submodule dma_port_slave_xactor_f_rd_addr
  assign dma_port_slave_xactor_f_rd_addr$D_IN =
	     { dma_server_arid,
	       dma_server_araddr,
	       dma_server_arlen,
	       dma_server_arsize,
	       dma_server_arburst,
	       dma_server_arlock,
	       dma_server_arcache,
	       dma_server_arprot,
	       dma_server_arqos,
	       dma_server_arregion } ;
  assign dma_port_slave_xactor_f_rd_addr$ENQ =
	     dma_server_arvalid && dma_port_slave_xactor_f_rd_addr$FULL_N ;
  assign dma_port_slave_xactor_f_rd_addr$DEQ =
	     WILL_FIRE_RL_dma_port_rl_rd_rsp ||
	     WILL_FIRE_RL_dma_port_rl_bad_rd_addr ;
  assign dma_port_slave_xactor_f_rd_addr$CLR = EN_reset ;

  // submodule dma_port_slave_xactor_f_rd_data
  assign dma_port_slave_xactor_f_rd_data$D_IN =
	     WILL_FIRE_RL_dma_port_rl_bad_rd_addr ?
	       MUX_dma_port_slave_xactor_f_rd_data$enq_1__VAL_1 :
	       MUX_dma_port_slave_xactor_f_rd_data$enq_1__VAL_2 ;
  assign dma_port_slave_xactor_f_rd_data$ENQ =
	     WILL_FIRE_RL_dma_port_rl_bad_rd_addr ||
	     WILL_FIRE_RL_dma_port_rl_rd_rsp ;
  assign dma_port_slave_xactor_f_rd_data$DEQ =
	     dma_server_rready && dma_port_slave_xactor_f_rd_data$EMPTY_N ;
  assign dma_port_slave_xactor_f_rd_data$CLR = EN_reset ;

  // submodule dma_port_slave_xactor_f_wr_addr
  assign dma_port_slave_xactor_f_wr_addr$D_IN =
	     { dma_server_awid,
	       dma_server_awaddr,
	       dma_server_awlen,
	       dma_server_awsize,
	       dma_server_awburst,
	       dma_server_awlock,
	       dma_server_awcache,
	       dma_server_awprot,
	       dma_server_awqos,
	       dma_server_awregion } ;
  assign dma_port_slave_xactor_f_wr_addr$ENQ =
	     dma_server_awvalid && dma_port_slave_xactor_f_wr_addr$FULL_N ;
  assign dma_port_slave_xactor_f_wr_addr$DEQ =
	     WILL_FIRE_RL_dma_port_rl_wr_req ||
	     WILL_FIRE_RL_dma_port_rl_bad_wr_addr ;
  assign dma_port_slave_xactor_f_wr_addr$CLR = EN_reset ;

  // submodule dma_port_slave_xactor_f_wr_data
  assign dma_port_slave_xactor_f_wr_data$D_IN =
	     { dma_server_wdata, dma_server_wstrb, dma_server_wlast } ;
  assign dma_port_slave_xactor_f_wr_data$ENQ =
	     dma_server_wvalid && dma_port_slave_xactor_f_wr_data$FULL_N ;
  assign dma_port_slave_xactor_f_wr_data$DEQ =
	     WILL_FIRE_RL_dma_port_rl_wr_req ||
	     WILL_FIRE_RL_dma_port_rl_bad_wr_addr ;
  assign dma_port_slave_xactor_f_wr_data$CLR = EN_reset ;

  // submodule dma_port_slave_xactor_f_wr_resp
  assign dma_port_slave_xactor_f_wr_resp$D_IN =
	     WILL_FIRE_RL_dma_port_rl_bad_wr_addr ?
	       MUX_dma_port_slave_xactor_f_wr_resp$enq_1__VAL_1 :
	       MUX_dma_port_slave_xactor_f_wr_resp$enq_1__VAL_2 ;
  assign dma_port_slave_xactor_f_wr_resp$ENQ =
	     WILL_FIRE_RL_dma_port_rl_bad_wr_addr ||
	     WILL_FIRE_RL_dma_port_rl_wr_req ;
  assign dma_port_slave_xactor_f_wr_resp$DEQ =
	     dma_server_bready && dma_port_slave_xactor_f_wr_resp$EMPTY_N ;
  assign dma_port_slave_xactor_f_wr_resp$CLR = EN_reset ;

  // submodule dma_port_soc_map
  assign dma_port_soc_map$m_is_IO_addr_addr = 32'h0 ;
  assign dma_port_soc_map$m_is_clint_addr_addr = 32'h0 ;
  assign dma_port_soc_map$m_is_dtcm_addr_addr = 32'h0 ;
  assign dma_port_soc_map$m_is_itcm_addr_addr = 32'h0 ;
  assign dma_port_soc_map$m_is_mem_addr_addr = 32'h0 ;
  assign dma_port_soc_map$m_is_nmio_addr_addr = 32'h0 ;
  assign dma_port_soc_map$m_is_tcm_addr_addr = 32'h0 ;

  // submodule f_mem_rdata
  assign f_mem_rdata$D_IN = 65'h0 ;
  assign f_mem_rdata$ENQ = 1'b0 ;
  assign f_mem_rdata$DEQ = 1'b0 ;
  assign f_mem_rdata$CLR = 1'b0 ;

  // submodule f_mem_req
  assign f_mem_req$D_IN = 35'h0 ;
  assign f_mem_req$ENQ = 1'b0 ;
  assign f_mem_req$DEQ = 1'b0 ;
  assign f_mem_req$CLR = 1'b0 ;

  // submodule itcm
  assign itcm$ADDRA =
	     { 3'd0,
	       w_imem_reqwget_BITS_34_TO_3_MINUS_soc_mapm_i_ETC__q3[31:3] } ;
  assign itcm$ADDRB =
	     WILL_FIRE_RL_dma_port_rl_wr_req ?
	       MUX_itcm$b_put_2__VAL_1 :
	       MUX_itcm$b_put_2__VAL_2 ;
  assign itcm$DIA = 64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign itcm$DIB =
	     WILL_FIRE_RL_dma_port_rl_wr_req ?
	       MUX_itcm$b_put_3__VAL_1 :
	       64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign itcm$WEA = 8'd0 ;
  assign itcm$WEB =
	     WILL_FIRE_RL_dma_port_rl_wr_req ?
	       MUX_itcm$b_put_1__VAL_1 :
	       8'd0 ;
  assign itcm$ENA =
	     EN_imem_req &&
	     (w_imem_req$wget[1:0] == 2'b0 ||
	      w_imem_req$wget[1:0] == 2'b01 && !w_imem_req$wget[3] ||
	      w_imem_req$wget[1:0] == 2'b10 && w_imem_req$wget[4:3] == 2'b0 ||
	      w_imem_req$wget[1:0] == 2'b11 &&
	      w_imem_req$wget[5:3] == 3'b0) &&
	     soc_map$m_is_itcm_addr ;
  assign itcm$ENB =
	     WILL_FIRE_RL_dma_port_rl_wr_req ||
	     WILL_FIRE_RL_dma_port_rl_rd_req ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 32'h0 ;
  assign soc_map$m_is_clint_addr_addr = 32'h0 ;
  assign soc_map$m_is_dtcm_addr_addr = 32'h0 ;
  assign soc_map$m_is_itcm_addr_addr = w_imem_req$wget[34:3] ;
  assign soc_map$m_is_mem_addr_addr = 32'h0 ;
  assign soc_map$m_is_nmio_addr_addr = 32'h0 ;
  assign soc_map$m_is_tcm_addr_addr = 32'h0 ;

  // remaining internal signals
  assign NOT_verbosity_ULE_1_9___d30 = verbosity > 2'd1 ;
  assign NOT_w_imem_req_wget__09_BITS_1_TO_0_11_EQ_0b0__ETC___d132 =
	     w_imem_req$wget[1:0] != 2'b0 &&
	     (w_imem_req$wget[1:0] != 2'b01 || w_imem_req$wget[3]) &&
	     (w_imem_req$wget[1:0] != 2'b10 ||
	      w_imem_req$wget[4:3] != 2'b0) &&
	     (w_imem_req$wget[1:0] != 2'b11 || w_imem_req$wget[5:3] != 3'b0) ;
  assign dma_port_slave_xactor_f_rd_addrD_OUT_BITS_60__ETC__q2 =
	     dma_port_slave_xactor_f_rd_addr$D_OUT[60:29] -
	     dma_port_soc_map$m_itcm_addr_base ;
  assign dma_port_slave_xactor_f_wr_addrD_OUT_BITS_60__ETC__q1 =
	     dma_port_slave_xactor_f_wr_addr$D_OUT[60:29] -
	     dma_port_soc_map$m_itcm_addr_base ;
  assign instr__h3434 = imem_instr ;
  assign strb__h2816 = { 4'd0, dma_port_slave_xactor_f_wr_data$D_OUT[4:1] } ;
  assign w_imem_reqwget_BITS_34_TO_3_MINUS_soc_mapm_i_ETC__q3 =
	     w_imem_req$wget[34:3] - soc_map$m_itcm_addr_base ;
  assign word__h2185 =
	     (dma_port_slave_xactor_f_rd_addr$D_OUT[31:29] == 3'd0) ?
	       itcm$DOB[31:0] :
	       itcm$DOB[63:32] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        dma_port_rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_exc <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_imem_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_result_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (dma_port_rg_state$EN)
	  dma_port_rg_state <= `BSV_ASSIGNMENT_DELAY dma_port_rg_state$D_IN;
	if (rg_exc$EN) rg_exc <= `BSV_ASSIGNMENT_DELAY rg_exc$D_IN;
	if (rg_imem_state$EN)
	  rg_imem_state <= `BSV_ASSIGNMENT_DELAY rg_imem_state$D_IN;
	if (rg_result_valid$EN)
	  rg_result_valid <= `BSV_ASSIGNMENT_DELAY rg_result_valid$D_IN;
      end
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_imem_req$EN) rg_imem_req <= `BSV_ASSIGNMENT_DELAY rg_imem_req$D_IN;
    if (rg_instr$EN) rg_instr <= `BSV_ASSIGNMENT_DELAY rg_instr$D_IN;
    if (rg_pc$EN) rg_pc <= `BSV_ASSIGNMENT_DELAY rg_pc$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dma_port_rg_state = 2'h2;
    rg_exc = 1'h0;
    rg_exc_code = 4'hA;
    rg_imem_req = 35'h2AAAAAAAA;
    rg_imem_state = 2'h2;
    rg_instr = 32'hAAAAAAAA;
    rg_pc = 32'hAAAAAAAA;
    rg_result_valid = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity != 2'd0)
	begin
	  v__h3481 = $stime;
	  #0;
	end
    v__h3475 = v__h3481 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity != 2'd0)
	$display("%0d: %m.rl_tcm_rsp: pc %08h data %08h",
		 v__h3475,
		 rg_imem_req[34:3],
		 instr__h3434);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_imem_req && NOT_verbosity_ULE_1_9___d30)
	begin
	  v__h3832 = $stime;
	  #0;
	end
    v__h3826 = v__h3832 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_imem_req && NOT_verbosity_ULE_1_9___d30)
	$display("%0d: %m.rl_req: pc 0x%08h",
		 v__h3826,
		 w_imem_req$wget[34:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_rd_addr && verbosity != 2'd0)
	begin
	  v__h2025 = $stime;
	  #0;
	end
    v__h2019 = v__h2025 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_rd_addr && verbosity != 2'd0)
	$display("%0d: %m.rl_bad_rd_addr 0x%0h",
		 v__h2019,
		 dma_port_slave_xactor_f_rd_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_rd_rsp && NOT_verbosity_ULE_1_9___d30)
	begin
	  v__h2326 = $stime;
	  #0;
	end
    v__h2320 = v__h2326 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_rd_rsp && NOT_verbosity_ULE_1_9___d30)
	$display("%0d: %m.rl_rd_rsp: addr 0x%0h => data 0x%0h",
		 v__h2320,
		 dma_port_slave_xactor_f_rd_addr$D_OUT[60:29],
		 word__h2185);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	begin
	  v__h2605 = $stime;
	  #0;
	end
    v__h2599 = v__h2605 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$display("%0d: %m.rl_bad_wr_addr", v__h2599);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_data$D_OUT[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_data$D_OUT[4:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0 &&
	  dma_port_slave_xactor_f_wr_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0 &&
	  !dma_port_slave_xactor_f_wr_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("    => ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", 2'b10);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_rd_req && NOT_verbosity_ULE_1_9___d30)
	begin
	  v__h2150 = $stime;
	  #0;
	end
    v__h2144 = v__h2150 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_rd_req && NOT_verbosity_ULE_1_9___d30)
	$display("%0d: %m.rl_rd_req: addr 0x%0h",
		 v__h2144,
		 dma_port_slave_xactor_f_rd_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	begin
	  v__h2917 = $stime;
	  #0;
	end
    v__h2911 = v__h2917 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$display("%0d: %m.rl_wr_req", v__h2911);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("'h%h", dma_port_slave_xactor_f_wr_data$D_OUT[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("'h%h", dma_port_slave_xactor_f_wr_data$D_OUT[4:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30 &&
	  dma_port_slave_xactor_f_wr_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30 &&
	  !dma_port_slave_xactor_f_wr_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_9___d30)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_reset && NOT_verbosity_ULE_1_9___d30)
	begin
	  v__h4555 = $stime;
	  #0;
	end
    v__h4549 = v__h4555 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_reset && NOT_verbosity_ULE_1_9___d30)
	$display("%0d: %m.reset", v__h4549);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_reset && NOT_verbosity_ULE_1_9___d30)
	begin
	  v__h4613 = $stime;
	  #0;
	end
    v__h4607 = v__h4613 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_reset && NOT_verbosity_ULE_1_9___d30)
	$display("%0d: %m.reset", v__h4607);
  end
  // synopsys translate_on
endmodule  // mkITCM

