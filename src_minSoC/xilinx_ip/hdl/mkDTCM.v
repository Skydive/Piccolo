//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_reset                      O     1 const
// dmem_valid                     O     1
// dmem_word64                    O    64
// dmem_st_amo_val                O    64 const
// dmem_exc                       O     1
// dmem_exc_code                  O     4
// nmio_master_awvalid            O     1 reg
// nmio_master_awid               O     4 reg
// nmio_master_awaddr             O    32 reg
// nmio_master_awlen              O     8 reg
// nmio_master_awsize             O     3 reg
// nmio_master_awburst            O     2 reg
// nmio_master_awlock             O     1 reg
// nmio_master_awcache            O     4 reg
// nmio_master_awprot             O     3 reg
// nmio_master_awqos              O     4 reg
// nmio_master_awregion           O     4 reg
// nmio_master_wvalid             O     1 reg
// nmio_master_wdata              O    32 reg
// nmio_master_wstrb              O     4 reg
// nmio_master_wlast              O     1 reg
// nmio_master_bready             O     1 reg
// nmio_master_arvalid            O     1 reg
// nmio_master_arid               O     4 reg
// nmio_master_araddr             O    32 reg
// nmio_master_arlen              O     8 reg
// nmio_master_arsize             O     3 reg
// nmio_master_arburst            O     2 reg
// nmio_master_arlock             O     1 reg
// nmio_master_arcache            O     4 reg
// nmio_master_arprot             O     3 reg
// nmio_master_arqos              O     4 reg
// nmio_master_arregion           O     4 reg
// nmio_master_rready             O     1 reg
// mem_master_HADDR               O    32 reg
// mem_master_HBURST              O     3 const
// mem_master_HMASTLOCK           O     1 const
// mem_master_HPROT               O     4 const
// mem_master_HSIZE               O     3 reg
// mem_master_HTRANS              O     2 reg
// mem_master_HWDATA              O    32 reg
// mem_master_HWRITE              O     1 reg
// dma_server_awready             O     1 reg
// dma_server_wready              O     1 reg
// dma_server_bvalid              O     1 reg
// dma_server_bid                 O     4 reg
// dma_server_bresp               O     2 reg
// dma_server_arready             O     1 reg
// dma_server_rvalid              O     1 reg
// dma_server_rid                 O     4 reg
// dma_server_rdata               O    32 reg
// dma_server_rresp               O     2 reg
// dma_server_rlast               O     1 reg
// RDY_set_watch_tohost           O     1 const
// mv_tohost_value                O    64 reg
// RDY_mv_tohost_value            O     1 const
// verbosity                      I     2
// CLK                            I     1 clock
// RST_N                          I     1 reset
// dmem_req_op                    I     2
// dmem_req_f3                    I     3
// dmem_req_amo_funct7            I     7
// dmem_req_addr                  I    32
// dmem_req_store_value           I    64
// nmio_master_awready            I     1
// nmio_master_wready             I     1
// nmio_master_bvalid             I     1
// nmio_master_bid                I     4 reg
// nmio_master_bresp              I     2 reg
// nmio_master_arready            I     1
// nmio_master_rvalid             I     1
// nmio_master_rid                I     4 reg
// nmio_master_rdata              I    32 reg
// nmio_master_rresp              I     2 reg
// nmio_master_rlast              I     1 reg
// mem_master_HRDATA              I    32
// mem_master_HREADY              I     1
// mem_master_HRESP               I     1
// dma_server_awvalid             I     1
// dma_server_awid                I     4 reg
// dma_server_awaddr              I    32 reg
// dma_server_awlen               I     8 reg
// dma_server_awsize              I     3 reg
// dma_server_awburst             I     2 reg
// dma_server_awlock              I     1 reg
// dma_server_awcache             I     4 reg
// dma_server_awprot              I     3 reg
// dma_server_awqos               I     4 reg
// dma_server_awregion            I     4 reg
// dma_server_wvalid              I     1
// dma_server_wdata               I    32 reg
// dma_server_wstrb               I     4 reg
// dma_server_wlast               I     1 reg
// dma_server_bready              I     1
// dma_server_arvalid             I     1
// dma_server_arid                I     4 reg
// dma_server_araddr              I    32 reg
// dma_server_arlen               I     8 reg
// dma_server_arsize              I     3 reg
// dma_server_arburst             I     2 reg
// dma_server_arlock              I     1 reg
// dma_server_arcache             I     4 reg
// dma_server_arprot              I     3 reg
// dma_server_arqos               I     4 reg
// dma_server_arregion            I     4 reg
// dma_server_rready              I     1
// set_watch_tohost_watch_tohost  I     1 reg
// set_watch_tohost_tohost_addr   I    64 reg
// EN_reset                       I     1
// EN_dmem_req                    I     1
// EN_set_watch_tohost            I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDTCM(verbosity,
	      CLK,
	      RST_N,

	      EN_reset,
	      RDY_reset,

	      dmem_req_op,
	      dmem_req_f3,
	      dmem_req_amo_funct7,
	      dmem_req_addr,
	      dmem_req_store_value,
	      EN_dmem_req,

	      dmem_valid,

	      dmem_word64,

	      dmem_st_amo_val,

	      dmem_exc,

	      dmem_exc_code,

	      nmio_master_awvalid,

	      nmio_master_awid,

	      nmio_master_awaddr,

	      nmio_master_awlen,

	      nmio_master_awsize,

	      nmio_master_awburst,

	      nmio_master_awlock,

	      nmio_master_awcache,

	      nmio_master_awprot,

	      nmio_master_awqos,

	      nmio_master_awregion,

	      nmio_master_awready,

	      nmio_master_wvalid,

	      nmio_master_wdata,

	      nmio_master_wstrb,

	      nmio_master_wlast,

	      nmio_master_wready,

	      nmio_master_bvalid,
	      nmio_master_bid,
	      nmio_master_bresp,

	      nmio_master_bready,

	      nmio_master_arvalid,

	      nmio_master_arid,

	      nmio_master_araddr,

	      nmio_master_arlen,

	      nmio_master_arsize,

	      nmio_master_arburst,

	      nmio_master_arlock,

	      nmio_master_arcache,

	      nmio_master_arprot,

	      nmio_master_arqos,

	      nmio_master_arregion,

	      nmio_master_arready,

	      nmio_master_rvalid,
	      nmio_master_rid,
	      nmio_master_rdata,
	      nmio_master_rresp,
	      nmio_master_rlast,

	      nmio_master_rready,

	      mem_master_HADDR,

	      mem_master_HBURST,

	      mem_master_HMASTLOCK,

	      mem_master_HPROT,

	      mem_master_HSIZE,

	      mem_master_HTRANS,

	      mem_master_HWDATA,

	      mem_master_HWRITE,

	      mem_master_HRDATA,

	      mem_master_HREADY,

	      mem_master_HRESP,

	      dma_server_awvalid,
	      dma_server_awid,
	      dma_server_awaddr,
	      dma_server_awlen,
	      dma_server_awsize,
	      dma_server_awburst,
	      dma_server_awlock,
	      dma_server_awcache,
	      dma_server_awprot,
	      dma_server_awqos,
	      dma_server_awregion,

	      dma_server_awready,

	      dma_server_wvalid,
	      dma_server_wdata,
	      dma_server_wstrb,
	      dma_server_wlast,

	      dma_server_wready,

	      dma_server_bvalid,

	      dma_server_bid,

	      dma_server_bresp,

	      dma_server_bready,

	      dma_server_arvalid,
	      dma_server_arid,
	      dma_server_araddr,
	      dma_server_arlen,
	      dma_server_arsize,
	      dma_server_arburst,
	      dma_server_arlock,
	      dma_server_arcache,
	      dma_server_arprot,
	      dma_server_arqos,
	      dma_server_arregion,

	      dma_server_arready,

	      dma_server_rvalid,

	      dma_server_rid,

	      dma_server_rdata,

	      dma_server_rresp,

	      dma_server_rlast,

	      dma_server_rready,

	      set_watch_tohost_watch_tohost,
	      set_watch_tohost_tohost_addr,
	      EN_set_watch_tohost,
	      RDY_set_watch_tohost,

	      mv_tohost_value,
	      RDY_mv_tohost_value);
  input  [1 : 0] verbosity;
  input  CLK;
  input  RST_N;

  // action method reset
  input  EN_reset;
  output RDY_reset;

  // action method dmem_req
  input  [1 : 0] dmem_req_op;
  input  [2 : 0] dmem_req_f3;
  input  [6 : 0] dmem_req_amo_funct7;
  input  [31 : 0] dmem_req_addr;
  input  [63 : 0] dmem_req_store_value;
  input  EN_dmem_req;

  // value method dmem_valid
  output dmem_valid;

  // value method dmem_word64
  output [63 : 0] dmem_word64;

  // value method dmem_st_amo_val
  output [63 : 0] dmem_st_amo_val;

  // value method dmem_exc
  output dmem_exc;

  // value method dmem_exc_code
  output [3 : 0] dmem_exc_code;

  // value method nmio_master_m_awvalid
  output nmio_master_awvalid;

  // value method nmio_master_m_awid
  output [3 : 0] nmio_master_awid;

  // value method nmio_master_m_awaddr
  output [31 : 0] nmio_master_awaddr;

  // value method nmio_master_m_awlen
  output [7 : 0] nmio_master_awlen;

  // value method nmio_master_m_awsize
  output [2 : 0] nmio_master_awsize;

  // value method nmio_master_m_awburst
  output [1 : 0] nmio_master_awburst;

  // value method nmio_master_m_awlock
  output nmio_master_awlock;

  // value method nmio_master_m_awcache
  output [3 : 0] nmio_master_awcache;

  // value method nmio_master_m_awprot
  output [2 : 0] nmio_master_awprot;

  // value method nmio_master_m_awqos
  output [3 : 0] nmio_master_awqos;

  // value method nmio_master_m_awregion
  output [3 : 0] nmio_master_awregion;

  // value method nmio_master_m_awuser

  // action method nmio_master_m_awready
  input  nmio_master_awready;

  // value method nmio_master_m_wvalid
  output nmio_master_wvalid;

  // value method nmio_master_m_wdata
  output [31 : 0] nmio_master_wdata;

  // value method nmio_master_m_wstrb
  output [3 : 0] nmio_master_wstrb;

  // value method nmio_master_m_wlast
  output nmio_master_wlast;

  // value method nmio_master_m_wuser

  // action method nmio_master_m_wready
  input  nmio_master_wready;

  // action method nmio_master_m_bvalid
  input  nmio_master_bvalid;
  input  [3 : 0] nmio_master_bid;
  input  [1 : 0] nmio_master_bresp;

  // value method nmio_master_m_bready
  output nmio_master_bready;

  // value method nmio_master_m_arvalid
  output nmio_master_arvalid;

  // value method nmio_master_m_arid
  output [3 : 0] nmio_master_arid;

  // value method nmio_master_m_araddr
  output [31 : 0] nmio_master_araddr;

  // value method nmio_master_m_arlen
  output [7 : 0] nmio_master_arlen;

  // value method nmio_master_m_arsize
  output [2 : 0] nmio_master_arsize;

  // value method nmio_master_m_arburst
  output [1 : 0] nmio_master_arburst;

  // value method nmio_master_m_arlock
  output nmio_master_arlock;

  // value method nmio_master_m_arcache
  output [3 : 0] nmio_master_arcache;

  // value method nmio_master_m_arprot
  output [2 : 0] nmio_master_arprot;

  // value method nmio_master_m_arqos
  output [3 : 0] nmio_master_arqos;

  // value method nmio_master_m_arregion
  output [3 : 0] nmio_master_arregion;

  // value method nmio_master_m_aruser

  // action method nmio_master_m_arready
  input  nmio_master_arready;

  // action method nmio_master_m_rvalid
  input  nmio_master_rvalid;
  input  [3 : 0] nmio_master_rid;
  input  [31 : 0] nmio_master_rdata;
  input  [1 : 0] nmio_master_rresp;
  input  nmio_master_rlast;

  // value method nmio_master_m_rready
  output nmio_master_rready;

  // value method mem_master_haddr
  output [31 : 0] mem_master_HADDR;

  // value method mem_master_hburst
  output [2 : 0] mem_master_HBURST;

  // value method mem_master_hmastlock
  output mem_master_HMASTLOCK;

  // value method mem_master_hprot
  output [3 : 0] mem_master_HPROT;

  // value method mem_master_hsize
  output [2 : 0] mem_master_HSIZE;

  // value method mem_master_htrans
  output [1 : 0] mem_master_HTRANS;

  // value method mem_master_hwdata
  output [31 : 0] mem_master_HWDATA;

  // value method mem_master_hwrite
  output mem_master_HWRITE;

  // action method mem_master_hrdata
  input  [31 : 0] mem_master_HRDATA;

  // action method mem_master_hready
  input  mem_master_HREADY;

  // action method mem_master_hresp
  input  mem_master_HRESP;

  // action method dma_server_m_awvalid
  input  dma_server_awvalid;
  input  [3 : 0] dma_server_awid;
  input  [31 : 0] dma_server_awaddr;
  input  [7 : 0] dma_server_awlen;
  input  [2 : 0] dma_server_awsize;
  input  [1 : 0] dma_server_awburst;
  input  dma_server_awlock;
  input  [3 : 0] dma_server_awcache;
  input  [2 : 0] dma_server_awprot;
  input  [3 : 0] dma_server_awqos;
  input  [3 : 0] dma_server_awregion;

  // value method dma_server_m_awready
  output dma_server_awready;

  // action method dma_server_m_wvalid
  input  dma_server_wvalid;
  input  [31 : 0] dma_server_wdata;
  input  [3 : 0] dma_server_wstrb;
  input  dma_server_wlast;

  // value method dma_server_m_wready
  output dma_server_wready;

  // value method dma_server_m_bvalid
  output dma_server_bvalid;

  // value method dma_server_m_bid
  output [3 : 0] dma_server_bid;

  // value method dma_server_m_bresp
  output [1 : 0] dma_server_bresp;

  // value method dma_server_m_buser

  // action method dma_server_m_bready
  input  dma_server_bready;

  // action method dma_server_m_arvalid
  input  dma_server_arvalid;
  input  [3 : 0] dma_server_arid;
  input  [31 : 0] dma_server_araddr;
  input  [7 : 0] dma_server_arlen;
  input  [2 : 0] dma_server_arsize;
  input  [1 : 0] dma_server_arburst;
  input  dma_server_arlock;
  input  [3 : 0] dma_server_arcache;
  input  [2 : 0] dma_server_arprot;
  input  [3 : 0] dma_server_arqos;
  input  [3 : 0] dma_server_arregion;

  // value method dma_server_m_arready
  output dma_server_arready;

  // value method dma_server_m_rvalid
  output dma_server_rvalid;

  // value method dma_server_m_rid
  output [3 : 0] dma_server_rid;

  // value method dma_server_m_rdata
  output [31 : 0] dma_server_rdata;

  // value method dma_server_m_rresp
  output [1 : 0] dma_server_rresp;

  // value method dma_server_m_rlast
  output dma_server_rlast;

  // value method dma_server_m_ruser

  // action method dma_server_m_rready
  input  dma_server_rready;

  // action method set_watch_tohost
  input  set_watch_tohost_watch_tohost;
  input  [63 : 0] set_watch_tohost_tohost_addr;
  input  EN_set_watch_tohost;
  output RDY_set_watch_tohost;

  // value method mv_tohost_value
  output [63 : 0] mv_tohost_value;
  output RDY_mv_tohost_value;

  // signals for module outputs
  wire [63 : 0] dmem_st_amo_val, dmem_word64, mv_tohost_value;
  wire [31 : 0] dma_server_rdata,
		mem_master_HADDR,
		mem_master_HWDATA,
		nmio_master_araddr,
		nmio_master_awaddr,
		nmio_master_wdata;
  wire [7 : 0] nmio_master_arlen, nmio_master_awlen;
  wire [3 : 0] dma_server_bid,
	       dma_server_rid,
	       dmem_exc_code,
	       mem_master_HPROT,
	       nmio_master_arcache,
	       nmio_master_arid,
	       nmio_master_arqos,
	       nmio_master_arregion,
	       nmio_master_awcache,
	       nmio_master_awid,
	       nmio_master_awqos,
	       nmio_master_awregion,
	       nmio_master_wstrb;
  wire [2 : 0] mem_master_HBURST,
	       mem_master_HSIZE,
	       nmio_master_arprot,
	       nmio_master_arsize,
	       nmio_master_awprot,
	       nmio_master_awsize;
  wire [1 : 0] dma_server_bresp,
	       dma_server_rresp,
	       mem_master_HTRANS,
	       nmio_master_arburst,
	       nmio_master_awburst;
  wire RDY_mv_tohost_value,
       RDY_reset,
       RDY_set_watch_tohost,
       dma_server_arready,
       dma_server_awready,
       dma_server_bvalid,
       dma_server_rlast,
       dma_server_rvalid,
       dma_server_wready,
       dmem_exc,
       dmem_valid,
       mem_master_HMASTLOCK,
       mem_master_HWRITE,
       nmio_master_arlock,
       nmio_master_arvalid,
       nmio_master_awlock,
       nmio_master_awvalid,
       nmio_master_bready,
       nmio_master_rready,
       nmio_master_wlast,
       nmio_master_wvalid;

  // inlined wires
  wire [107 : 0] w_dmem_req$wget;
  wire dw_exc$wget, dw_valid$wget, dw_valid$whas;

  // register dma_port_rg_state
  reg [1 : 0] dma_port_rg_state;
  reg [1 : 0] dma_port_rg_state$D_IN;
  wire dma_port_rg_state$EN;

  // register fabric_adapter_rg_haddr
  reg [31 : 0] fabric_adapter_rg_haddr;
  wire [31 : 0] fabric_adapter_rg_haddr$D_IN;
  wire fabric_adapter_rg_haddr$EN;

  // register fabric_adapter_rg_hsize
  reg [2 : 0] fabric_adapter_rg_hsize;
  wire [2 : 0] fabric_adapter_rg_hsize$D_IN;
  wire fabric_adapter_rg_hsize$EN;

  // register fabric_adapter_rg_htrans
  reg [1 : 0] fabric_adapter_rg_htrans;
  wire [1 : 0] fabric_adapter_rg_htrans$D_IN;
  wire fabric_adapter_rg_htrans$EN;

  // register fabric_adapter_rg_hwdata
  reg [31 : 0] fabric_adapter_rg_hwdata;
  wire [31 : 0] fabric_adapter_rg_hwdata$D_IN;
  wire fabric_adapter_rg_hwdata$EN;

  // register fabric_adapter_rg_hwrite
  reg fabric_adapter_rg_hwrite;
  wire fabric_adapter_rg_hwrite$D_IN, fabric_adapter_rg_hwrite$EN;

  // register fabric_adapter_rg_state
  reg [1 : 0] fabric_adapter_rg_state;
  reg [1 : 0] fabric_adapter_rg_state$D_IN;
  wire fabric_adapter_rg_state$EN;

  // register mmio_rg_err
  reg mmio_rg_err;
  wire mmio_rg_err$D_IN, mmio_rg_err$EN;

  // register mmio_rg_final_st_val
  reg [63 : 0] mmio_rg_final_st_val;
  wire [63 : 0] mmio_rg_final_st_val$D_IN;
  wire mmio_rg_final_st_val$EN;

  // register mmio_rg_ld_val
  reg [63 : 0] mmio_rg_ld_val;
  wire [63 : 0] mmio_rg_ld_val$D_IN;
  wire mmio_rg_ld_val$EN;

  // register mmio_rg_mmio_state
  reg [1 : 0] mmio_rg_mmio_state;
  reg [1 : 0] mmio_rg_mmio_state$D_IN;
  wire mmio_rg_mmio_state$EN;

  // register nmio_fabric_adapter_rg_rd_beat
  reg [7 : 0] nmio_fabric_adapter_rg_rd_beat;
  wire [7 : 0] nmio_fabric_adapter_rg_rd_beat$D_IN;
  wire nmio_fabric_adapter_rg_rd_beat$EN;

  // register nmio_fabric_adapter_rg_rd_client_id
  reg nmio_fabric_adapter_rg_rd_client_id;
  wire nmio_fabric_adapter_rg_rd_client_id$D_IN,
       nmio_fabric_adapter_rg_rd_client_id$EN;

  // register nmio_fabric_adapter_rg_rd_data_lower32
  reg [31 : 0] nmio_fabric_adapter_rg_rd_data_lower32;
  wire [31 : 0] nmio_fabric_adapter_rg_rd_data_lower32$D_IN;
  wire nmio_fabric_adapter_rg_rd_data_lower32$EN;

  // register nmio_fabric_adapter_rg_rd_data_lower32_ok
  reg nmio_fabric_adapter_rg_rd_data_lower32_ok;
  wire nmio_fabric_adapter_rg_rd_data_lower32_ok$D_IN,
       nmio_fabric_adapter_rg_rd_data_lower32_ok$EN;

  // register nmio_fabric_adapter_rg_wr_beat
  reg [7 : 0] nmio_fabric_adapter_rg_wr_beat;
  wire [7 : 0] nmio_fabric_adapter_rg_wr_beat$D_IN;
  wire nmio_fabric_adapter_rg_wr_beat$EN;

  // register nmio_fabric_adapter_rg_wr_rsps_pending
  reg nmio_fabric_adapter_rg_wr_rsps_pending;
  wire nmio_fabric_adapter_rg_wr_rsps_pending$D_IN,
       nmio_fabric_adapter_rg_wr_rsps_pending$EN;

  // register nmio_fabric_adapter_rg_write_error
  reg nmio_fabric_adapter_rg_write_error;
  wire nmio_fabric_adapter_rg_write_error$D_IN,
       nmio_fabric_adapter_rg_write_error$EN;

  // register rg_dmem_state
  reg [1 : 0] rg_dmem_state;
  reg [1 : 0] rg_dmem_state$D_IN;
  wire rg_dmem_state$EN;

  // register rg_exc
  reg rg_exc;
  wire rg_exc$D_IN, rg_exc$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  wire [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_lrsc_pa
  reg [31 : 0] rg_lrsc_pa;
  wire [31 : 0] rg_lrsc_pa$D_IN;
  wire rg_lrsc_pa$EN;

  // register rg_lrsc_size
  reg [1 : 0] rg_lrsc_size;
  wire [1 : 0] rg_lrsc_size$D_IN;
  wire rg_lrsc_size$EN;

  // register rg_lrsc_valid
  reg rg_lrsc_valid;
  wire rg_lrsc_valid$D_IN, rg_lrsc_valid$EN;

  // register rg_lrsc_word64
  reg [1 : 0] rg_lrsc_word64;
  wire [1 : 0] rg_lrsc_word64$D_IN;
  wire rg_lrsc_word64$EN;

  // register rg_req
  reg [107 : 0] rg_req;
  wire [107 : 0] rg_req$D_IN;
  wire rg_req$EN;

  // register rg_result_valid
  reg rg_result_valid;
  wire rg_result_valid$D_IN, rg_result_valid$EN;

  // register rg_tohost_addr
  reg [63 : 0] rg_tohost_addr;
  wire [63 : 0] rg_tohost_addr$D_IN;
  wire rg_tohost_addr$EN;

  // register rg_tohost_value
  reg [63 : 0] rg_tohost_value;
  wire [63 : 0] rg_tohost_value$D_IN;
  wire rg_tohost_value$EN;

  // register rg_watch_tohost
  reg rg_watch_tohost;
  wire rg_watch_tohost$D_IN, rg_watch_tohost$EN;

  // ports of submodule dma_port_slave_xactor_f_rd_addr
  wire [64 : 0] dma_port_slave_xactor_f_rd_addr$D_IN,
		dma_port_slave_xactor_f_rd_addr$D_OUT;
  wire dma_port_slave_xactor_f_rd_addr$CLR,
       dma_port_slave_xactor_f_rd_addr$DEQ,
       dma_port_slave_xactor_f_rd_addr$EMPTY_N,
       dma_port_slave_xactor_f_rd_addr$ENQ,
       dma_port_slave_xactor_f_rd_addr$FULL_N;

  // ports of submodule dma_port_slave_xactor_f_rd_data
  wire [38 : 0] dma_port_slave_xactor_f_rd_data$D_IN,
		dma_port_slave_xactor_f_rd_data$D_OUT;
  wire dma_port_slave_xactor_f_rd_data$CLR,
       dma_port_slave_xactor_f_rd_data$DEQ,
       dma_port_slave_xactor_f_rd_data$EMPTY_N,
       dma_port_slave_xactor_f_rd_data$ENQ,
       dma_port_slave_xactor_f_rd_data$FULL_N;

  // ports of submodule dma_port_slave_xactor_f_wr_addr
  wire [64 : 0] dma_port_slave_xactor_f_wr_addr$D_IN,
		dma_port_slave_xactor_f_wr_addr$D_OUT;
  wire dma_port_slave_xactor_f_wr_addr$CLR,
       dma_port_slave_xactor_f_wr_addr$DEQ,
       dma_port_slave_xactor_f_wr_addr$EMPTY_N,
       dma_port_slave_xactor_f_wr_addr$ENQ,
       dma_port_slave_xactor_f_wr_addr$FULL_N;

  // ports of submodule dma_port_slave_xactor_f_wr_data
  wire [36 : 0] dma_port_slave_xactor_f_wr_data$D_IN,
		dma_port_slave_xactor_f_wr_data$D_OUT;
  wire dma_port_slave_xactor_f_wr_data$CLR,
       dma_port_slave_xactor_f_wr_data$DEQ,
       dma_port_slave_xactor_f_wr_data$EMPTY_N,
       dma_port_slave_xactor_f_wr_data$ENQ,
       dma_port_slave_xactor_f_wr_data$FULL_N;

  // ports of submodule dma_port_slave_xactor_f_wr_resp
  wire [5 : 0] dma_port_slave_xactor_f_wr_resp$D_IN,
	       dma_port_slave_xactor_f_wr_resp$D_OUT;
  wire dma_port_slave_xactor_f_wr_resp$CLR,
       dma_port_slave_xactor_f_wr_resp$DEQ,
       dma_port_slave_xactor_f_wr_resp$EMPTY_N,
       dma_port_slave_xactor_f_wr_resp$ENQ,
       dma_port_slave_xactor_f_wr_resp$FULL_N;

  // ports of submodule dma_port_soc_map
  wire [31 : 0] dma_port_soc_map$m_is_IO_addr_addr,
		dma_port_soc_map$m_is_clint_addr_addr,
		dma_port_soc_map$m_is_dtcm_addr_addr,
		dma_port_soc_map$m_is_itcm_addr_addr,
		dma_port_soc_map$m_is_mem_addr_addr,
		dma_port_soc_map$m_is_nmio_addr_addr,
		dma_port_soc_map$m_is_tcm_addr_addr,
		dma_port_soc_map$m_itcm_addr_base;

  // ports of submodule dtcm
  reg [63 : 0] dtcm$DIB;
  reg [11 : 0] dtcm$ADDRB;
  reg [7 : 0] dtcm$WEB;
  wire [63 : 0] dtcm$DIA, dtcm$DOA, dtcm$DOB;
  wire [11 : 0] dtcm$ADDRA;
  wire [7 : 0] dtcm$WEA;
  wire dtcm$ENA, dtcm$ENB;

  // ports of submodule f_is_mem_req
  wire f_is_mem_req$CLR,
       f_is_mem_req$DEQ,
       f_is_mem_req$D_IN,
       f_is_mem_req$D_OUT,
       f_is_mem_req$EMPTY_N,
       f_is_mem_req$ENQ,
       f_is_mem_req$FULL_N;

  // ports of submodule f_mem_rdata
  wire [64 : 0] f_mem_rdata$D_IN, f_mem_rdata$D_OUT;
  wire f_mem_rdata$CLR,
       f_mem_rdata$DEQ,
       f_mem_rdata$EMPTY_N,
       f_mem_rdata$ENQ,
       f_mem_rdata$FULL_N;

  // ports of submodule f_mem_req
  reg [34 : 0] f_mem_req$D_IN;
  wire [34 : 0] f_mem_req$D_OUT;
  wire f_mem_req$CLR,
       f_mem_req$DEQ,
       f_mem_req$EMPTY_N,
       f_mem_req$ENQ,
       f_mem_req$FULL_N;

  // ports of submodule f_mem_wdata
  wire [63 : 0] f_mem_wdata$D_IN, f_mem_wdata$D_OUT;
  wire f_mem_wdata$CLR,
       f_mem_wdata$DEQ,
       f_mem_wdata$EMPTY_N,
       f_mem_wdata$ENQ,
       f_mem_wdata$FULL_N;

  // ports of submodule f_nmio_req
  reg [34 : 0] f_nmio_req$D_IN;
  wire [34 : 0] f_nmio_req$D_OUT;
  wire f_nmio_req$CLR,
       f_nmio_req$DEQ,
       f_nmio_req$EMPTY_N,
       f_nmio_req$ENQ,
       f_nmio_req$FULL_N;

  // ports of submodule nmio_fabric_adapter_f_rd_rsp_control
  wire [10 : 0] nmio_fabric_adapter_f_rd_rsp_control$D_IN,
		nmio_fabric_adapter_f_rd_rsp_control$D_OUT;
  wire nmio_fabric_adapter_f_rd_rsp_control$CLR,
       nmio_fabric_adapter_f_rd_rsp_control$DEQ,
       nmio_fabric_adapter_f_rd_rsp_control$EMPTY_N,
       nmio_fabric_adapter_f_rd_rsp_control$ENQ,
       nmio_fabric_adapter_f_rd_rsp_control$FULL_N;

  // ports of submodule nmio_fabric_adapter_f_wr_data_control
  wire [13 : 0] nmio_fabric_adapter_f_wr_data_control$D_IN,
		nmio_fabric_adapter_f_wr_data_control$D_OUT;
  wire nmio_fabric_adapter_f_wr_data_control$CLR,
       nmio_fabric_adapter_f_wr_data_control$DEQ,
       nmio_fabric_adapter_f_wr_data_control$EMPTY_N,
       nmio_fabric_adapter_f_wr_data_control$ENQ,
       nmio_fabric_adapter_f_wr_data_control$FULL_N;

  // ports of submodule nmio_fabric_adapter_master_xactor_f_rd_addr
  wire [64 : 0] nmio_fabric_adapter_master_xactor_f_rd_addr$D_IN,
		nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT;
  wire nmio_fabric_adapter_master_xactor_f_rd_addr$CLR,
       nmio_fabric_adapter_master_xactor_f_rd_addr$DEQ,
       nmio_fabric_adapter_master_xactor_f_rd_addr$EMPTY_N,
       nmio_fabric_adapter_master_xactor_f_rd_addr$ENQ,
       nmio_fabric_adapter_master_xactor_f_rd_addr$FULL_N;

  // ports of submodule nmio_fabric_adapter_master_xactor_f_rd_data
  wire [38 : 0] nmio_fabric_adapter_master_xactor_f_rd_data$D_IN,
		nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT;
  wire nmio_fabric_adapter_master_xactor_f_rd_data$CLR,
       nmio_fabric_adapter_master_xactor_f_rd_data$DEQ,
       nmio_fabric_adapter_master_xactor_f_rd_data$EMPTY_N,
       nmio_fabric_adapter_master_xactor_f_rd_data$ENQ,
       nmio_fabric_adapter_master_xactor_f_rd_data$FULL_N;

  // ports of submodule nmio_fabric_adapter_master_xactor_f_wr_addr
  wire [64 : 0] nmio_fabric_adapter_master_xactor_f_wr_addr$D_IN,
		nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT;
  wire nmio_fabric_adapter_master_xactor_f_wr_addr$CLR,
       nmio_fabric_adapter_master_xactor_f_wr_addr$DEQ,
       nmio_fabric_adapter_master_xactor_f_wr_addr$EMPTY_N,
       nmio_fabric_adapter_master_xactor_f_wr_addr$ENQ,
       nmio_fabric_adapter_master_xactor_f_wr_addr$FULL_N;

  // ports of submodule nmio_fabric_adapter_master_xactor_f_wr_data
  wire [36 : 0] nmio_fabric_adapter_master_xactor_f_wr_data$D_IN,
		nmio_fabric_adapter_master_xactor_f_wr_data$D_OUT;
  wire nmio_fabric_adapter_master_xactor_f_wr_data$CLR,
       nmio_fabric_adapter_master_xactor_f_wr_data$DEQ,
       nmio_fabric_adapter_master_xactor_f_wr_data$EMPTY_N,
       nmio_fabric_adapter_master_xactor_f_wr_data$ENQ,
       nmio_fabric_adapter_master_xactor_f_wr_data$FULL_N;

  // ports of submodule nmio_fabric_adapter_master_xactor_f_wr_resp
  wire [5 : 0] nmio_fabric_adapter_master_xactor_f_wr_resp$D_IN,
	       nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT;
  wire nmio_fabric_adapter_master_xactor_f_wr_resp$CLR,
       nmio_fabric_adapter_master_xactor_f_wr_resp$DEQ,
       nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N,
       nmio_fabric_adapter_master_xactor_f_wr_resp$ENQ,
       nmio_fabric_adapter_master_xactor_f_wr_resp$FULL_N;

  // ports of submodule soc_map
  wire [31 : 0] soc_map$m_dtcm_addr_base,
		soc_map$m_is_IO_addr_addr,
		soc_map$m_is_clint_addr_addr,
		soc_map$m_is_dtcm_addr_addr,
		soc_map$m_is_itcm_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_nmio_addr_addr,
		soc_map$m_is_tcm_addr_addr;
  wire soc_map$m_is_dtcm_addr, soc_map$m_is_itcm_addr, soc_map$m_is_nmio_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_dma_port_rl_bad_rd_addr,
       CAN_FIRE_RL_dma_port_rl_bad_wr_addr,
       CAN_FIRE_RL_dma_port_rl_rd_req,
       CAN_FIRE_RL_dma_port_rl_rd_rsp,
       CAN_FIRE_RL_dma_port_rl_wr_req,
       CAN_FIRE_RL_fabric_adapter_rl_complete_nseq_req,
       CAN_FIRE_RL_fabric_adapter_rl_nseq_req,
       CAN_FIRE_RL_fabric_adapter_rl_read_response,
       CAN_FIRE_RL_fabric_adapter_rl_write_response,
       CAN_FIRE_RL_mmio_rl_AMO_SC,
       CAN_FIRE_RL_mmio_rl_read_req,
       CAN_FIRE_RL_mmio_rl_read_rsp,
       CAN_FIRE_RL_mmio_rl_write_req,
       CAN_FIRE_RL_nmio_fabric_adapter_rl_read_data,
       CAN_FIRE_RL_nmio_fabric_adapter_rl_single_read_req,
       CAN_FIRE_RL_nmio_fabric_adapter_rl_single_write_req,
       CAN_FIRE_RL_nmio_fabric_adapter_rl_write_data,
       CAN_FIRE_RL_nmio_fabric_adapter_rl_write_rsp,
       CAN_FIRE_RL_rl_amo_rsp,
       CAN_FIRE_RL_rl_mmio_rsp,
       CAN_FIRE_RL_rl_req,
       CAN_FIRE_RL_rl_tcm_rsp,
       CAN_FIRE___me_check_14,
       CAN_FIRE___me_check_17,
       CAN_FIRE___me_check_4,
       CAN_FIRE___me_check_7,
       CAN_FIRE_dma_server_m_arvalid,
       CAN_FIRE_dma_server_m_awvalid,
       CAN_FIRE_dma_server_m_bready,
       CAN_FIRE_dma_server_m_rready,
       CAN_FIRE_dma_server_m_wvalid,
       CAN_FIRE_dmem_req,
       CAN_FIRE_mem_master_hrdata,
       CAN_FIRE_mem_master_hready,
       CAN_FIRE_mem_master_hresp,
       CAN_FIRE_nmio_master_m_arready,
       CAN_FIRE_nmio_master_m_awready,
       CAN_FIRE_nmio_master_m_bvalid,
       CAN_FIRE_nmio_master_m_rvalid,
       CAN_FIRE_nmio_master_m_wready,
       CAN_FIRE_reset,
       CAN_FIRE_set_watch_tohost,
       WILL_FIRE_RL_dma_port_rl_bad_rd_addr,
       WILL_FIRE_RL_dma_port_rl_bad_wr_addr,
       WILL_FIRE_RL_dma_port_rl_rd_req,
       WILL_FIRE_RL_dma_port_rl_rd_rsp,
       WILL_FIRE_RL_dma_port_rl_wr_req,
       WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req,
       WILL_FIRE_RL_fabric_adapter_rl_nseq_req,
       WILL_FIRE_RL_fabric_adapter_rl_read_response,
       WILL_FIRE_RL_fabric_adapter_rl_write_response,
       WILL_FIRE_RL_mmio_rl_AMO_SC,
       WILL_FIRE_RL_mmio_rl_read_req,
       WILL_FIRE_RL_mmio_rl_read_rsp,
       WILL_FIRE_RL_mmio_rl_write_req,
       WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data,
       WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req,
       WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req,
       WILL_FIRE_RL_nmio_fabric_adapter_rl_write_data,
       WILL_FIRE_RL_nmio_fabric_adapter_rl_write_rsp,
       WILL_FIRE_RL_rl_amo_rsp,
       WILL_FIRE_RL_rl_mmio_rsp,
       WILL_FIRE_RL_rl_req,
       WILL_FIRE_RL_rl_tcm_rsp,
       WILL_FIRE___me_check_14,
       WILL_FIRE___me_check_17,
       WILL_FIRE___me_check_4,
       WILL_FIRE___me_check_7,
       WILL_FIRE_dma_server_m_arvalid,
       WILL_FIRE_dma_server_m_awvalid,
       WILL_FIRE_dma_server_m_bready,
       WILL_FIRE_dma_server_m_rready,
       WILL_FIRE_dma_server_m_wvalid,
       WILL_FIRE_dmem_req,
       WILL_FIRE_mem_master_hrdata,
       WILL_FIRE_mem_master_hready,
       WILL_FIRE_mem_master_hresp,
       WILL_FIRE_nmio_master_m_arready,
       WILL_FIRE_nmio_master_m_awready,
       WILL_FIRE_nmio_master_m_bvalid,
       WILL_FIRE_nmio_master_m_rvalid,
       WILL_FIRE_nmio_master_m_wready,
       WILL_FIRE_reset,
       WILL_FIRE_set_watch_tohost;

  // inputs to muxes for submodule ports
  wire [64 : 0] MUX_f_mem_rdata$enq_1__VAL_1, MUX_f_mem_rdata$enq_1__VAL_2;
  wire [63 : 0] MUX_dtcm$b_put_3__VAL_3,
		MUX_f_mem_wdata$enq_1__VAL_1,
		MUX_f_mem_wdata$enq_1__VAL_2,
		MUX_mmio_rg_ld_val$write_1__VAL_1;
  wire [38 : 0] MUX_dma_port_slave_xactor_f_rd_data$enq_1__VAL_1,
		MUX_dma_port_slave_xactor_f_rd_data$enq_1__VAL_2;
  wire [34 : 0] MUX_f_mem_req$enq_1__VAL_1, MUX_f_mem_req$enq_1__VAL_2;
  wire [7 : 0] MUX_dtcm$b_put_1__VAL_3,
	       MUX_nmio_fabric_adapter_rg_rd_beat$write_1__VAL_2;
  wire [5 : 0] MUX_dma_port_slave_xactor_f_wr_resp$enq_1__VAL_1,
	       MUX_dma_port_slave_xactor_f_wr_resp$enq_1__VAL_2;
  wire [3 : 0] MUX_dw_exc_code$wset_1__VAL_2;
  wire [1 : 0] MUX_fabric_adapter_rg_state$write_1__VAL_1,
	       MUX_rg_dmem_state$write_1__VAL_2,
	       MUX_rg_lrsc_word64$write_1__VAL_2;
  wire MUX_dtcm$b_put_1__SEL_1,
       MUX_dtcm$b_put_1__SEL_2,
       MUX_f_mem_rdata$enq_1__SEL_1,
       MUX_f_mem_req$enq_1__SEL_1,
       MUX_f_mem_req$enq_1__SEL_2,
       MUX_f_mem_req$enq_1__SEL_3,
       MUX_f_mem_wdata$enq_1__SEL_1,
       MUX_f_nmio_req$enq_1__SEL_1,
       MUX_f_nmio_req$enq_1__SEL_2,
       MUX_f_nmio_req$enq_1__SEL_3,
       MUX_fabric_adapter_rg_state$write_1__SEL_2,
       MUX_mmio_rg_err$write_1__SEL_1,
       MUX_mmio_rg_ld_val$write_1__SEL_1,
       MUX_nmio_fabric_adapter_rg_wr_rsps_pending$write_1__SEL_1,
       MUX_rg_lrsc_valid$write_1__SEL_1,
       MUX_rg_lrsc_valid$write_1__VAL_2,
       MUX_rg_lrsc_word64$write_1__SEL_1,
       MUX_rg_result_valid$write_1__VAL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h11253;
  reg [31 : 0] v__h11412;
  reg [31 : 0] v__h11644;
  reg [31 : 0] v__h14753;
  reg [31 : 0] v__h15146;
  reg [31 : 0] v__h15442;
  reg [31 : 0] v__h1898;
  reg [31 : 0] v__h4014;
  reg [31 : 0] v__h5528;
  reg [31 : 0] v__h5822;
  reg [31 : 0] v__h6284;
  reg [31 : 0] v__h6335;
  reg [31 : 0] v__h6187;
  reg [31 : 0] v__h7350;
  reg [31 : 0] v__h7990;
  reg [31 : 0] v__h8256;
  reg [31 : 0] v__h8282;
  reg [31 : 0] v__h2149;
  reg [31 : 0] v__h3579;
  reg [31 : 0] v__h15688;
  reg [31 : 0] v__h15917;
  reg [31 : 0] v__h19490;
  reg [31 : 0] v__h7090;
  reg [31 : 0] v__h8487;
  reg [31 : 0] v__h8622;
  reg [31 : 0] v__h9962;
  reg [31 : 0] v__h10269;
  reg [31 : 0] v__h10548;
  reg [31 : 0] v__h10093;
  reg [31 : 0] v__h10864;
  reg [31 : 0] v__h18617;
  reg [31 : 0] v__h18698;
  reg [31 : 0] v__h1892;
  reg [31 : 0] v__h2143;
  reg [31 : 0] v__h3573;
  reg [31 : 0] v__h4008;
  reg [31 : 0] v__h5522;
  reg [31 : 0] v__h5816;
  reg [31 : 0] v__h6181;
  reg [31 : 0] v__h6278;
  reg [31 : 0] v__h6329;
  reg [31 : 0] v__h7084;
  reg [31 : 0] v__h7344;
  reg [31 : 0] v__h7984;
  reg [31 : 0] v__h8250;
  reg [31 : 0] v__h8276;
  reg [31 : 0] v__h8481;
  reg [31 : 0] v__h8616;
  reg [31 : 0] v__h9956;
  reg [31 : 0] v__h10087;
  reg [31 : 0] v__h10263;
  reg [31 : 0] v__h10542;
  reg [31 : 0] v__h10858;
  reg [31 : 0] v__h11247;
  reg [31 : 0] v__h11406;
  reg [31 : 0] v__h11638;
  reg [31 : 0] v__h14747;
  reg [31 : 0] v__h15140;
  reg [31 : 0] v__h15436;
  reg [31 : 0] v__h15682;
  reg [31 : 0] v__h15911;
  reg [31 : 0] v__h18611;
  reg [31 : 0] v__h18692;
  reg [31 : 0] v__h19484;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_rg_req_BITS_73_TO_71_0x0_result2583_0x4_r_ETC__q18,
	       CASE_rg_req_BITS_73_TO_71_0x0_result2650_0x4_r_ETC__q19,
	       IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d631,
	       IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d653,
	       IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d614,
	       IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d644,
	       _theResult_____2__h12795,
	       _theResult_____2__h3022,
	       _theResult___snd__h13412,
	       _theResult___snd__h13471,
	       _theResult___snd__h16656,
	       _theResult___snd__h16715,
	       mask__h2532,
	       ram_out__h10978,
	       ram_st_value__h13167,
	       ram_st_value__h16415,
	       y__h2763;
  reg [7 : 0] _theResult___fst__h13411,
	      _theResult___fst__h13470,
	      _theResult___fst__h13503,
	      _theResult___fst__h16655,
	      _theResult___fst__h16714,
	      _theResult___fst__h16747,
	      byte_en__h13166,
	      byte_en__h16414,
	      strb__h6724;
  reg CASE_rg_req_BITS_104_TO_103_0b0_ld_val_bits262_ETC__q16;
  wire [64 : 0] IF_nmio_fabric_adapter_rg_rd_beat_60_BIT_0_61__ETC___d187;
  wire [63 : 0] IF_rg_req_0_BITS_104_TO_103_9_EQ_0b10_1_THEN_S_ETC___d103,
		IF_rg_req_0_BITS_104_TO_103_9_EQ_0b10_1_THEN_S_ETC___d677,
		_theResult____h15028,
		_theResult___fst__h5355,
		_theResult___fst__h6792,
		_theResult___fst__h6877,
		_theResult___snd__h13416,
		_theResult___snd__h13420,
		_theResult___snd__h13424,
		_theResult___snd__h13428,
		_theResult___snd__h13475,
		_theResult___snd__h13479,
		_theResult___snd__h13504,
		_theResult___snd__h13508,
		_theResult___snd__h13515,
		_theResult___snd__h16660,
		_theResult___snd__h16664,
		_theResult___snd__h16668,
		_theResult___snd__h16672,
		_theResult___snd__h16719,
		_theResult___snd__h16723,
		_theResult___snd__h16748,
		_theResult___snd__h16752,
		data1__h2488,
		data___1__h5414,
		data___1__h8413,
		data___2__h5360,
		data__h3631,
		data__h5131,
		data__h5332,
		data__h6729,
		data__h8350,
		final_ld_val__h2903,
		final_st_val__h12819,
		final_st_val__h12909,
		final_st_val__h12987,
		final_st_val__h12991,
		final_st_val__h12995,
		final_st_val__h12999,
		final_st_val__h13004,
		final_st_val__h13010,
		final_st_val__h13015,
		final_st_val__h2904,
		final_st_val__h3046,
		final_st_val__h3136,
		final_st_val__h3214,
		final_st_val__h3218,
		final_st_val__h3222,
		final_st_val__h3226,
		final_st_val__h3231,
		final_st_val__h3237,
		final_st_val__h3242,
		ld_val__h2380,
		ld_val_bits__h2262,
		result__h11848,
		result__h11879,
		result__h11907,
		result__h11935,
		result__h11963,
		result__h11991,
		result__h12019,
		result__h12047,
		result__h12092,
		result__h12120,
		result__h12148,
		result__h12176,
		result__h12204,
		result__h12232,
		result__h12260,
		result__h12288,
		result__h12333,
		result__h12361,
		result__h12389,
		result__h12417,
		result__h12458,
		result__h12486,
		result__h12514,
		result__h12542,
		result__h12583,
		result__h12611,
		result__h12650,
		result__h12678,
		result__h2751,
		result__h2823,
		rsp_data__h8373,
		st_value__h13164,
		test_num__h15669,
		v__h11529,
		v__h11600,
		w1___1__h12878,
		w1___1__h3105,
		w1__h12788,
		w1__h3015,
		w2___1__h3106,
		w2__h3017,
		wdata___1__h8188,
		word64__h15093,
		x__h15613,
		x__h8157,
		y_avValue_fst__h5306;
  wire [31 : 0] dma_port_slave_xactor_f_rd_addrD_OUT_BITS_60__ETC__q22,
		dma_port_slave_xactor_f_wr_addrD_OUT_BITS_60__ETC__q21,
		dtcmDOA_BITS_31_TO_0__q3,
		dtcmDOA_BITS_63_TO_32__q11,
		ld_val_bits262_BITS_31_TO_0__q15,
		ram_out0978_BITS_31_TO_0__q20,
		rg_req_0_BITS_102_TO_71_8_MINUS_soc_map_m_dtcm_ETC___d708,
		rg_req_BITS_38_TO_7__q17,
		w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901,
		word__h10128,
		word_addr__h17865;
  wire [15 : 0] dtcmDOA_BITS_15_TO_0__q2,
		dtcmDOA_BITS_31_TO_16__q6,
		dtcmDOA_BITS_47_TO_32__q10,
		dtcmDOA_BITS_63_TO_48__q13;
  wire [7 : 0] _theResult___fst__h13514,
	       _theResult___fst__h16758,
	       _theResult___snd_fst__h6910,
	       _theResult___snd_fst__h6992,
	       dtcmDOA_BITS_15_TO_8__q4,
	       dtcmDOA_BITS_23_TO_16__q5,
	       dtcmDOA_BITS_31_TO_24__q7,
	       dtcmDOA_BITS_39_TO_32__q9,
	       dtcmDOA_BITS_47_TO_40__q8,
	       dtcmDOA_BITS_55_TO_48__q12,
	       dtcmDOA_BITS_63_TO_56__q14,
	       dtcmDOA_BITS_7_TO_0__q1,
	       fabric_len__h5900,
	       num_beats__h5899,
	       strb___1__h6826,
	       strb__h10759,
	       strb__h6725,
	       strb__h6731,
	       x__h6687;
  wire [5 : 0] shamt_bits__h2914;
  wire [2 : 0] IF_f_mem_req_first__43_BITS_1_TO_0_53_EQ_0b11__ETC___d356,
	       fabric_size__h5785,
	       x__h5957;
  wire IF_f_is_mem_req_i_notEmpty_AND_f_is_mem_req_fi_ETC___d6,
       IF_nmio_fabric_adapter_f_rd_rsp_control_first__ETC___d200,
       NOT_rg_req_0_BITS_107_TO_106_1_EQ_2_5_6_OR_NOT_ETC___d705,
       NOT_soc_map_m_is_itcm_addr_w_dmem_req_wget__06_ETC___d900,
       NOT_soc_map_m_is_itcm_addr_w_dmem_req_wget__06_ETC___d974,
       NOT_soc_map_m_is_itcm_addr_w_dmem_req_wget__06_ETC___d985,
       NOT_verbosity_ULE_1_56___d457,
       NOT_verbosity_ULT_2_44___d145,
       NOT_w_dmem_req_wget__06_BITS_104_TO_103_09_EQ__ETC___d830,
       _dfoo1,
       f_mem_rdata_first__4_BIT_64_5_AND_NOT_rg_req_0_ETC___d139,
       f_mem_rdata_first__4_BIT_64_5_AND_NOT_rg_req_0_ETC___d91,
       f_mem_rdata_first__4_BIT_64_5_AND_NOT_rg_req_0_ETC___d94,
       nmio_fabric_adapter_master_xactor_f_rd_data_i__ETC___d166,
       nmio_fabric_adapter_rg_wr_beat_62_EQ_nmio_fabr_ETC___d268,
       rg_lrsc_pa_24_EQ_rg_req_0_BITS_102_TO_71_8___d525,
       rg_req_0_BITS_107_TO_106_1_EQ_0_7_OR_rg_req_0__ETC___d44,
       rg_req_0_BITS_107_TO_106_1_EQ_2_5_AND_rg_req_0_ETC___d529,
       rg_req_0_BITS_107_TO_106_1_EQ_2_5_AND_rg_req_0_ETC___d774,
       rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_NOT_rg_lr_ETC___d541,
       rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_rg_lrsc_v_ETC___d533,
       rg_watch_tohost_39_AND_w_dmem_req_wget__06_BIT_ETC___d850,
       soc_map_m_is_dtcm_addr_w_dmem_req_wget__06_BIT_ETC___d968,
       w_dmem_req_wget__06_BITS_104_TO_103_09_EQ_0b0__ETC___d891,
       w_dmem_req_whas__05_AND_soc_map_m_is_itcm_addr_ETC___d836;

  // action method reset
  assign RDY_reset = 1'd1 ;
  assign CAN_FIRE_reset = 1'd1 ;
  assign WILL_FIRE_reset = EN_reset ;

  // action method dmem_req
  assign CAN_FIRE_dmem_req = 1'd1 ;
  assign WILL_FIRE_dmem_req = EN_dmem_req ;

  // value method dmem_valid
  assign dmem_valid = dw_valid$whas && dw_valid$wget ;

  // value method dmem_word64
  assign dmem_word64 =
	     WILL_FIRE_RL_rl_tcm_rsp ? _theResult____h15028 : mmio_rg_ld_val ;

  // value method dmem_st_amo_val
  assign dmem_st_amo_val = 64'h0 ;

  // value method dmem_exc
  assign dmem_exc = dw_valid$whas && dw_exc$wget ;

  // value method dmem_exc_code
  assign dmem_exc_code =
	     WILL_FIRE_RL_rl_tcm_rsp ?
	       rg_exc_code :
	       MUX_dw_exc_code$wset_1__VAL_2 ;

  // value method nmio_master_m_awvalid
  assign nmio_master_awvalid =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$EMPTY_N ;

  // value method nmio_master_m_awid
  assign nmio_master_awid =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[64:61] ;

  // value method nmio_master_m_awaddr
  assign nmio_master_awaddr =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[60:29] ;

  // value method nmio_master_m_awlen
  assign nmio_master_awlen =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[28:21] ;

  // value method nmio_master_m_awsize
  assign nmio_master_awsize =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[20:18] ;

  // value method nmio_master_m_awburst
  assign nmio_master_awburst =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[17:16] ;

  // value method nmio_master_m_awlock
  assign nmio_master_awlock =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[15] ;

  // value method nmio_master_m_awcache
  assign nmio_master_awcache =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[14:11] ;

  // value method nmio_master_m_awprot
  assign nmio_master_awprot =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[10:8] ;

  // value method nmio_master_m_awqos
  assign nmio_master_awqos =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[7:4] ;

  // value method nmio_master_m_awregion
  assign nmio_master_awregion =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT[3:0] ;

  // action method nmio_master_m_awready
  assign CAN_FIRE_nmio_master_m_awready = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_awready = 1'd1 ;

  // value method nmio_master_m_wvalid
  assign nmio_master_wvalid =
	     nmio_fabric_adapter_master_xactor_f_wr_data$EMPTY_N ;

  // value method nmio_master_m_wdata
  assign nmio_master_wdata =
	     nmio_fabric_adapter_master_xactor_f_wr_data$D_OUT[36:5] ;

  // value method nmio_master_m_wstrb
  assign nmio_master_wstrb =
	     nmio_fabric_adapter_master_xactor_f_wr_data$D_OUT[4:1] ;

  // value method nmio_master_m_wlast
  assign nmio_master_wlast =
	     nmio_fabric_adapter_master_xactor_f_wr_data$D_OUT[0] ;

  // action method nmio_master_m_wready
  assign CAN_FIRE_nmio_master_m_wready = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_wready = 1'd1 ;

  // action method nmio_master_m_bvalid
  assign CAN_FIRE_nmio_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_bvalid = 1'd1 ;

  // value method nmio_master_m_bready
  assign nmio_master_bready =
	     nmio_fabric_adapter_master_xactor_f_wr_resp$FULL_N ;

  // value method nmio_master_m_arvalid
  assign nmio_master_arvalid =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$EMPTY_N ;

  // value method nmio_master_m_arid
  assign nmio_master_arid =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[64:61] ;

  // value method nmio_master_m_araddr
  assign nmio_master_araddr =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[60:29] ;

  // value method nmio_master_m_arlen
  assign nmio_master_arlen =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[28:21] ;

  // value method nmio_master_m_arsize
  assign nmio_master_arsize =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[20:18] ;

  // value method nmio_master_m_arburst
  assign nmio_master_arburst =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[17:16] ;

  // value method nmio_master_m_arlock
  assign nmio_master_arlock =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[15] ;

  // value method nmio_master_m_arcache
  assign nmio_master_arcache =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[14:11] ;

  // value method nmio_master_m_arprot
  assign nmio_master_arprot =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[10:8] ;

  // value method nmio_master_m_arqos
  assign nmio_master_arqos =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[7:4] ;

  // value method nmio_master_m_arregion
  assign nmio_master_arregion =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT[3:0] ;

  // action method nmio_master_m_arready
  assign CAN_FIRE_nmio_master_m_arready = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_arready = 1'd1 ;

  // action method nmio_master_m_rvalid
  assign CAN_FIRE_nmio_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_nmio_master_m_rvalid = 1'd1 ;

  // value method nmio_master_m_rready
  assign nmio_master_rready =
	     nmio_fabric_adapter_master_xactor_f_rd_data$FULL_N ;

  // value method mem_master_haddr
  assign mem_master_HADDR = fabric_adapter_rg_haddr ;

  // value method mem_master_hburst
  assign mem_master_HBURST = 3'd1 ;

  // value method mem_master_hmastlock
  assign mem_master_HMASTLOCK = 1'd0 ;

  // value method mem_master_hprot
  assign mem_master_HPROT = 4'd12 ;

  // value method mem_master_hsize
  assign mem_master_HSIZE = fabric_adapter_rg_hsize ;

  // value method mem_master_htrans
  assign mem_master_HTRANS = fabric_adapter_rg_htrans ;

  // value method mem_master_hwdata
  assign mem_master_HWDATA = fabric_adapter_rg_hwdata ;

  // value method mem_master_hwrite
  assign mem_master_HWRITE = fabric_adapter_rg_hwrite ;

  // action method mem_master_hrdata
  assign CAN_FIRE_mem_master_hrdata = 1'd1 ;
  assign WILL_FIRE_mem_master_hrdata = 1'd1 ;

  // action method mem_master_hready
  assign CAN_FIRE_mem_master_hready = 1'd1 ;
  assign WILL_FIRE_mem_master_hready = 1'd1 ;

  // action method mem_master_hresp
  assign CAN_FIRE_mem_master_hresp = 1'd1 ;
  assign WILL_FIRE_mem_master_hresp = 1'd1 ;

  // action method dma_server_m_awvalid
  assign CAN_FIRE_dma_server_m_awvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_awvalid = 1'd1 ;

  // value method dma_server_m_awready
  assign dma_server_awready = dma_port_slave_xactor_f_wr_addr$FULL_N ;

  // action method dma_server_m_wvalid
  assign CAN_FIRE_dma_server_m_wvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_wvalid = 1'd1 ;

  // value method dma_server_m_wready
  assign dma_server_wready = dma_port_slave_xactor_f_wr_data$FULL_N ;

  // value method dma_server_m_bvalid
  assign dma_server_bvalid = dma_port_slave_xactor_f_wr_resp$EMPTY_N ;

  // value method dma_server_m_bid
  assign dma_server_bid = dma_port_slave_xactor_f_wr_resp$D_OUT[5:2] ;

  // value method dma_server_m_bresp
  assign dma_server_bresp = dma_port_slave_xactor_f_wr_resp$D_OUT[1:0] ;

  // action method dma_server_m_bready
  assign CAN_FIRE_dma_server_m_bready = 1'd1 ;
  assign WILL_FIRE_dma_server_m_bready = 1'd1 ;

  // action method dma_server_m_arvalid
  assign CAN_FIRE_dma_server_m_arvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_arvalid = 1'd1 ;

  // value method dma_server_m_arready
  assign dma_server_arready = dma_port_slave_xactor_f_rd_addr$FULL_N ;

  // value method dma_server_m_rvalid
  assign dma_server_rvalid = dma_port_slave_xactor_f_rd_data$EMPTY_N ;

  // value method dma_server_m_rid
  assign dma_server_rid = dma_port_slave_xactor_f_rd_data$D_OUT[38:35] ;

  // value method dma_server_m_rdata
  assign dma_server_rdata = dma_port_slave_xactor_f_rd_data$D_OUT[34:3] ;

  // value method dma_server_m_rresp
  assign dma_server_rresp = dma_port_slave_xactor_f_rd_data$D_OUT[2:1] ;

  // value method dma_server_m_rlast
  assign dma_server_rlast = dma_port_slave_xactor_f_rd_data$D_OUT[0] ;

  // action method dma_server_m_rready
  assign CAN_FIRE_dma_server_m_rready = 1'd1 ;
  assign WILL_FIRE_dma_server_m_rready = 1'd1 ;

  // action method set_watch_tohost
  assign RDY_set_watch_tohost = 1'd1 ;
  assign CAN_FIRE_set_watch_tohost = 1'd1 ;
  assign WILL_FIRE_set_watch_tohost = EN_set_watch_tohost ;

  // value method mv_tohost_value
  assign mv_tohost_value = rg_tohost_value ;
  assign RDY_mv_tohost_value = 1'd1 ;

  // submodule dma_port_slave_xactor_f_rd_addr
  FIFO2 #(.width(32'd65),
	  .guarded(32'd1)) dma_port_slave_xactor_f_rd_addr(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(dma_port_slave_xactor_f_rd_addr$D_IN),
							   .ENQ(dma_port_slave_xactor_f_rd_addr$ENQ),
							   .DEQ(dma_port_slave_xactor_f_rd_addr$DEQ),
							   .CLR(dma_port_slave_xactor_f_rd_addr$CLR),
							   .D_OUT(dma_port_slave_xactor_f_rd_addr$D_OUT),
							   .FULL_N(dma_port_slave_xactor_f_rd_addr$FULL_N),
							   .EMPTY_N(dma_port_slave_xactor_f_rd_addr$EMPTY_N));

  // submodule dma_port_slave_xactor_f_rd_data
  FIFO2 #(.width(32'd39),
	  .guarded(32'd1)) dma_port_slave_xactor_f_rd_data(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(dma_port_slave_xactor_f_rd_data$D_IN),
							   .ENQ(dma_port_slave_xactor_f_rd_data$ENQ),
							   .DEQ(dma_port_slave_xactor_f_rd_data$DEQ),
							   .CLR(dma_port_slave_xactor_f_rd_data$CLR),
							   .D_OUT(dma_port_slave_xactor_f_rd_data$D_OUT),
							   .FULL_N(dma_port_slave_xactor_f_rd_data$FULL_N),
							   .EMPTY_N(dma_port_slave_xactor_f_rd_data$EMPTY_N));

  // submodule dma_port_slave_xactor_f_wr_addr
  FIFO2 #(.width(32'd65),
	  .guarded(32'd1)) dma_port_slave_xactor_f_wr_addr(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(dma_port_slave_xactor_f_wr_addr$D_IN),
							   .ENQ(dma_port_slave_xactor_f_wr_addr$ENQ),
							   .DEQ(dma_port_slave_xactor_f_wr_addr$DEQ),
							   .CLR(dma_port_slave_xactor_f_wr_addr$CLR),
							   .D_OUT(dma_port_slave_xactor_f_wr_addr$D_OUT),
							   .FULL_N(dma_port_slave_xactor_f_wr_addr$FULL_N),
							   .EMPTY_N(dma_port_slave_xactor_f_wr_addr$EMPTY_N));

  // submodule dma_port_slave_xactor_f_wr_data
  FIFO2 #(.width(32'd37),
	  .guarded(32'd1)) dma_port_slave_xactor_f_wr_data(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(dma_port_slave_xactor_f_wr_data$D_IN),
							   .ENQ(dma_port_slave_xactor_f_wr_data$ENQ),
							   .DEQ(dma_port_slave_xactor_f_wr_data$DEQ),
							   .CLR(dma_port_slave_xactor_f_wr_data$CLR),
							   .D_OUT(dma_port_slave_xactor_f_wr_data$D_OUT),
							   .FULL_N(dma_port_slave_xactor_f_wr_data$FULL_N),
							   .EMPTY_N(dma_port_slave_xactor_f_wr_data$EMPTY_N));

  // submodule dma_port_slave_xactor_f_wr_resp
  FIFO2 #(.width(32'd6),
	  .guarded(32'd1)) dma_port_slave_xactor_f_wr_resp(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(dma_port_slave_xactor_f_wr_resp$D_IN),
							   .ENQ(dma_port_slave_xactor_f_wr_resp$ENQ),
							   .DEQ(dma_port_slave_xactor_f_wr_resp$DEQ),
							   .CLR(dma_port_slave_xactor_f_wr_resp$CLR),
							   .D_OUT(dma_port_slave_xactor_f_wr_resp$D_OUT),
							   .FULL_N(dma_port_slave_xactor_f_wr_resp$FULL_N),
							   .EMPTY_N(dma_port_slave_xactor_f_wr_resp$EMPTY_N));

  // submodule dma_port_soc_map
  mkSoC_Map dma_port_soc_map(.CLK(CLK),
			     .RST_N(RST_N),
			     .m_is_IO_addr_addr(dma_port_soc_map$m_is_IO_addr_addr),
			     .m_is_clint_addr_addr(dma_port_soc_map$m_is_clint_addr_addr),
			     .m_is_dtcm_addr_addr(dma_port_soc_map$m_is_dtcm_addr_addr),
			     .m_is_itcm_addr_addr(dma_port_soc_map$m_is_itcm_addr_addr),
			     .m_is_mem_addr_addr(dma_port_soc_map$m_is_mem_addr_addr),
			     .m_is_nmio_addr_addr(dma_port_soc_map$m_is_nmio_addr_addr),
			     .m_is_tcm_addr_addr(dma_port_soc_map$m_is_tcm_addr_addr),
			     .m_clint_addr_base(),
			     .m_clint_addr_size(),
			     .m_clint_addr_lim(),
			     .m_plic_addr_base(),
			     .m_plic_addr_size(),
			     .m_plic_addr_lim(),
			     .m_uart0_addr_base(),
			     .m_uart0_addr_size(),
			     .m_uart0_addr_lim(),
			     .m_gpio0_addr_base(),
			     .m_gpio0_addr_size(),
			     .m_gpio0_addr_lim(),
			     .m_boot_rom_addr_base(),
			     .m_boot_rom_addr_size(),
			     .m_boot_rom_addr_lim(),
			     .m_mem0_controller_addr_base(),
			     .m_mem0_controller_addr_size(),
			     .m_mem0_controller_addr_lim(),
			     .m_itcm_addr_base(dma_port_soc_map$m_itcm_addr_base),
			     .m_itcm_addr_size(),
			     .m_itcm_addr_lim(),
			     .m_is_itcm_addr(),
			     .m_dtcm_addr_base(),
			     .m_dtcm_addr_size(),
			     .m_dtcm_addr_lim(),
			     .m_is_dtcm_addr(),
			     .m_is_tcm_addr(),
			     .m_is_mem_addr(),
			     .m_is_IO_addr(),
			     .m_is_nmio_addr(),
			     .m_is_clint_addr(),
			     .m_pc_reset_value(),
			     .m_mtvec_reset_value(),
			     .m_nmivec_reset_value());

  // submodule dtcm
  BRAM2BELoad #(.FILENAME("/tmp/e342znd.hex"),
		.PIPELINED(1'd0),
		.ADDR_WIDTH(32'd12),
		.DATA_WIDTH(32'd64),
		.CHUNKSIZE(32'd8),
		.WE_WIDTH(32'd8),
		.MEMSIZE(13'd4096),
		.BINARY(1'd0)) dtcm(.CLKA(CLK),
				    .CLKB(CLK),
				    .ADDRA(dtcm$ADDRA),
				    .ADDRB(dtcm$ADDRB),
				    .DIA(dtcm$DIA),
				    .DIB(dtcm$DIB),
				    .WEA(dtcm$WEA),
				    .WEB(dtcm$WEB),
				    .ENA(dtcm$ENA),
				    .ENB(dtcm$ENB),
				    .DOA(dtcm$DOA),
				    .DOB(dtcm$DOB));

  // submodule f_is_mem_req
  FIFO1 #(.width(32'd1), .guarded(32'd1)) f_is_mem_req(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_is_mem_req$D_IN),
						       .ENQ(f_is_mem_req$ENQ),
						       .DEQ(f_is_mem_req$DEQ),
						       .CLR(f_is_mem_req$CLR),
						       .D_OUT(f_is_mem_req$D_OUT),
						       .FULL_N(f_is_mem_req$FULL_N),
						       .EMPTY_N(f_is_mem_req$EMPTY_N));

  // submodule f_mem_rdata
  FIFO1 #(.width(32'd65), .guarded(32'd1)) f_mem_rdata(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_mem_rdata$D_IN),
						       .ENQ(f_mem_rdata$ENQ),
						       .DEQ(f_mem_rdata$DEQ),
						       .CLR(f_mem_rdata$CLR),
						       .D_OUT(f_mem_rdata$D_OUT),
						       .FULL_N(f_mem_rdata$FULL_N),
						       .EMPTY_N(f_mem_rdata$EMPTY_N));

  // submodule f_mem_req
  FIFO1 #(.width(32'd35), .guarded(32'd1)) f_mem_req(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_mem_req$D_IN),
						     .ENQ(f_mem_req$ENQ),
						     .DEQ(f_mem_req$DEQ),
						     .CLR(f_mem_req$CLR),
						     .D_OUT(f_mem_req$D_OUT),
						     .FULL_N(f_mem_req$FULL_N),
						     .EMPTY_N(f_mem_req$EMPTY_N));

  // submodule f_mem_wdata
  FIFO1 #(.width(32'd64), .guarded(32'd1)) f_mem_wdata(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_mem_wdata$D_IN),
						       .ENQ(f_mem_wdata$ENQ),
						       .DEQ(f_mem_wdata$DEQ),
						       .CLR(f_mem_wdata$CLR),
						       .D_OUT(f_mem_wdata$D_OUT),
						       .FULL_N(f_mem_wdata$FULL_N),
						       .EMPTY_N(f_mem_wdata$EMPTY_N));

  // submodule f_nmio_req
  FIFO1 #(.width(32'd35), .guarded(32'd1)) f_nmio_req(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_nmio_req$D_IN),
						      .ENQ(f_nmio_req$ENQ),
						      .DEQ(f_nmio_req$DEQ),
						      .CLR(f_nmio_req$CLR),
						      .D_OUT(f_nmio_req$D_OUT),
						      .FULL_N(f_nmio_req$FULL_N),
						      .EMPTY_N(f_nmio_req$EMPTY_N));

  // submodule nmio_fabric_adapter_f_rd_rsp_control
  FIFO2 #(.width(32'd11),
	  .guarded(32'd1)) nmio_fabric_adapter_f_rd_rsp_control(.RST(RST_N),
								.CLK(CLK),
								.D_IN(nmio_fabric_adapter_f_rd_rsp_control$D_IN),
								.ENQ(nmio_fabric_adapter_f_rd_rsp_control$ENQ),
								.DEQ(nmio_fabric_adapter_f_rd_rsp_control$DEQ),
								.CLR(nmio_fabric_adapter_f_rd_rsp_control$CLR),
								.D_OUT(nmio_fabric_adapter_f_rd_rsp_control$D_OUT),
								.FULL_N(nmio_fabric_adapter_f_rd_rsp_control$FULL_N),
								.EMPTY_N(nmio_fabric_adapter_f_rd_rsp_control$EMPTY_N));

  // submodule nmio_fabric_adapter_f_wr_data_control
  FIFO2 #(.width(32'd14),
	  .guarded(32'd1)) nmio_fabric_adapter_f_wr_data_control(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(nmio_fabric_adapter_f_wr_data_control$D_IN),
								 .ENQ(nmio_fabric_adapter_f_wr_data_control$ENQ),
								 .DEQ(nmio_fabric_adapter_f_wr_data_control$DEQ),
								 .CLR(nmio_fabric_adapter_f_wr_data_control$CLR),
								 .D_OUT(nmio_fabric_adapter_f_wr_data_control$D_OUT),
								 .FULL_N(nmio_fabric_adapter_f_wr_data_control$FULL_N),
								 .EMPTY_N(nmio_fabric_adapter_f_wr_data_control$EMPTY_N));

  // submodule nmio_fabric_adapter_master_xactor_f_rd_addr
  FIFO2 #(.width(32'd65),
	  .guarded(32'd1)) nmio_fabric_adapter_master_xactor_f_rd_addr(.RST(RST_N),
								       .CLK(CLK),
								       .D_IN(nmio_fabric_adapter_master_xactor_f_rd_addr$D_IN),
								       .ENQ(nmio_fabric_adapter_master_xactor_f_rd_addr$ENQ),
								       .DEQ(nmio_fabric_adapter_master_xactor_f_rd_addr$DEQ),
								       .CLR(nmio_fabric_adapter_master_xactor_f_rd_addr$CLR),
								       .D_OUT(nmio_fabric_adapter_master_xactor_f_rd_addr$D_OUT),
								       .FULL_N(nmio_fabric_adapter_master_xactor_f_rd_addr$FULL_N),
								       .EMPTY_N(nmio_fabric_adapter_master_xactor_f_rd_addr$EMPTY_N));

  // submodule nmio_fabric_adapter_master_xactor_f_rd_data
  FIFO2 #(.width(32'd39),
	  .guarded(32'd1)) nmio_fabric_adapter_master_xactor_f_rd_data(.RST(RST_N),
								       .CLK(CLK),
								       .D_IN(nmio_fabric_adapter_master_xactor_f_rd_data$D_IN),
								       .ENQ(nmio_fabric_adapter_master_xactor_f_rd_data$ENQ),
								       .DEQ(nmio_fabric_adapter_master_xactor_f_rd_data$DEQ),
								       .CLR(nmio_fabric_adapter_master_xactor_f_rd_data$CLR),
								       .D_OUT(nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT),
								       .FULL_N(nmio_fabric_adapter_master_xactor_f_rd_data$FULL_N),
								       .EMPTY_N(nmio_fabric_adapter_master_xactor_f_rd_data$EMPTY_N));

  // submodule nmio_fabric_adapter_master_xactor_f_wr_addr
  FIFO2 #(.width(32'd65),
	  .guarded(32'd1)) nmio_fabric_adapter_master_xactor_f_wr_addr(.RST(RST_N),
								       .CLK(CLK),
								       .D_IN(nmio_fabric_adapter_master_xactor_f_wr_addr$D_IN),
								       .ENQ(nmio_fabric_adapter_master_xactor_f_wr_addr$ENQ),
								       .DEQ(nmio_fabric_adapter_master_xactor_f_wr_addr$DEQ),
								       .CLR(nmio_fabric_adapter_master_xactor_f_wr_addr$CLR),
								       .D_OUT(nmio_fabric_adapter_master_xactor_f_wr_addr$D_OUT),
								       .FULL_N(nmio_fabric_adapter_master_xactor_f_wr_addr$FULL_N),
								       .EMPTY_N(nmio_fabric_adapter_master_xactor_f_wr_addr$EMPTY_N));

  // submodule nmio_fabric_adapter_master_xactor_f_wr_data
  FIFO2 #(.width(32'd37),
	  .guarded(32'd1)) nmio_fabric_adapter_master_xactor_f_wr_data(.RST(RST_N),
								       .CLK(CLK),
								       .D_IN(nmio_fabric_adapter_master_xactor_f_wr_data$D_IN),
								       .ENQ(nmio_fabric_adapter_master_xactor_f_wr_data$ENQ),
								       .DEQ(nmio_fabric_adapter_master_xactor_f_wr_data$DEQ),
								       .CLR(nmio_fabric_adapter_master_xactor_f_wr_data$CLR),
								       .D_OUT(nmio_fabric_adapter_master_xactor_f_wr_data$D_OUT),
								       .FULL_N(nmio_fabric_adapter_master_xactor_f_wr_data$FULL_N),
								       .EMPTY_N(nmio_fabric_adapter_master_xactor_f_wr_data$EMPTY_N));

  // submodule nmio_fabric_adapter_master_xactor_f_wr_resp
  FIFO2 #(.width(32'd6),
	  .guarded(32'd1)) nmio_fabric_adapter_master_xactor_f_wr_resp(.RST(RST_N),
								       .CLK(CLK),
								       .D_IN(nmio_fabric_adapter_master_xactor_f_wr_resp$D_IN),
								       .ENQ(nmio_fabric_adapter_master_xactor_f_wr_resp$ENQ),
								       .DEQ(nmio_fabric_adapter_master_xactor_f_wr_resp$DEQ),
								       .CLR(nmio_fabric_adapter_master_xactor_f_wr_resp$CLR),
								       .D_OUT(nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT),
								       .FULL_N(nmio_fabric_adapter_master_xactor_f_wr_resp$FULL_N),
								       .EMPTY_N(nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_clint_addr_addr(soc_map$m_is_clint_addr_addr),
		    .m_is_dtcm_addr_addr(soc_map$m_is_dtcm_addr_addr),
		    .m_is_itcm_addr_addr(soc_map$m_is_itcm_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_nmio_addr_addr(soc_map$m_is_nmio_addr_addr),
		    .m_is_tcm_addr_addr(soc_map$m_is_tcm_addr_addr),
		    .m_clint_addr_base(),
		    .m_clint_addr_size(),
		    .m_clint_addr_lim(),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_gpio0_addr_base(),
		    .m_gpio0_addr_size(),
		    .m_gpio0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_itcm_addr_base(),
		    .m_itcm_addr_size(),
		    .m_itcm_addr_lim(),
		    .m_is_itcm_addr(soc_map$m_is_itcm_addr),
		    .m_dtcm_addr_base(soc_map$m_dtcm_addr_base),
		    .m_dtcm_addr_size(),
		    .m_dtcm_addr_lim(),
		    .m_is_dtcm_addr(soc_map$m_is_dtcm_addr),
		    .m_is_tcm_addr(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_nmio_addr(soc_map$m_is_nmio_addr),
		    .m_is_clint_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // rule RL_rl_amo_rsp
  assign CAN_FIRE_RL_rl_amo_rsp = rg_dmem_state == 2'd3 ;
  assign WILL_FIRE_RL_rl_amo_rsp = CAN_FIRE_RL_rl_amo_rsp ;

  // rule RL_rl_tcm_rsp
  assign CAN_FIRE_RL_rl_tcm_rsp = rg_dmem_state == 2'd1 ;
  assign WILL_FIRE_RL_rl_tcm_rsp = CAN_FIRE_RL_rl_tcm_rsp ;

  // rule RL_rl_mmio_rsp
  assign CAN_FIRE_RL_rl_mmio_rsp =
	     mmio_rg_mmio_state == 2'd0 && f_is_mem_req$EMPTY_N &&
	     rg_dmem_state == 2'd2 ;
  assign WILL_FIRE_RL_rl_mmio_rsp = CAN_FIRE_RL_rl_mmio_rsp ;

  // rule RL_mmio_rl_read_req
  assign CAN_FIRE_RL_mmio_rl_read_req =
	     f_is_mem_req$EMPTY_N &&
	     IF_f_is_mem_req_i_notEmpty_AND_f_is_mem_req_fi_ETC___d6 &&
	     mmio_rg_mmio_state == 2'd1 &&
	     rg_req[107:106] != 2'd1 &&
	     (rg_req[107:106] != 2'd2 || rg_req[6:2] != 5'b00011) ;
  assign WILL_FIRE_RL_mmio_rl_read_req = CAN_FIRE_RL_mmio_rl_read_req ;

  // rule RL_mmio_rl_AMO_SC
  assign CAN_FIRE_RL_mmio_rl_AMO_SC =
	     mmio_rg_mmio_state == 2'd1 && rg_req[107:106] == 2'd2 &&
	     rg_req[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_mmio_rl_AMO_SC = CAN_FIRE_RL_mmio_rl_AMO_SC ;

  // rule RL_nmio_fabric_adapter_rl_read_data
  assign CAN_FIRE_RL_nmio_fabric_adapter_rl_read_data =
	     nmio_fabric_adapter_f_rd_rsp_control$EMPTY_N &&
	     nmio_fabric_adapter_master_xactor_f_rd_data_i__ETC___d166 &&
	     nmio_fabric_adapter_rg_rd_beat <
	     nmio_fabric_adapter_f_rd_rsp_control$D_OUT[7:0] ;
  assign WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_read_data ;

  // rule RL_nmio_fabric_adapter_rl_single_read_req
  assign CAN_FIRE_RL_nmio_fabric_adapter_rl_single_read_req =
	     f_nmio_req$EMPTY_N &&
	     nmio_fabric_adapter_master_xactor_f_rd_addr$FULL_N &&
	     nmio_fabric_adapter_f_rd_rsp_control$FULL_N &&
	     f_nmio_req$D_OUT[34] &&
	     !nmio_fabric_adapter_rg_wr_rsps_pending ;
  assign WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_single_read_req ;

  // rule RL_nmio_fabric_adapter_rl_write_rsp
  assign CAN_FIRE_RL_nmio_fabric_adapter_rl_write_rsp =
	     nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N ;
  assign WILL_FIRE_RL_nmio_fabric_adapter_rl_write_rsp =
	     nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N ;

  // rule RL_nmio_fabric_adapter_rl_single_write_req
  assign CAN_FIRE_RL_nmio_fabric_adapter_rl_single_write_req =
	     f_nmio_req$EMPTY_N &&
	     nmio_fabric_adapter_master_xactor_f_wr_addr$FULL_N &&
	     nmio_fabric_adapter_f_wr_data_control$FULL_N &&
	     !f_nmio_req$D_OUT[34] &&
	     !nmio_fabric_adapter_rg_wr_rsps_pending ;
  assign WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	     !nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N ;

  // rule RL_fabric_adapter_rl_nseq_req
  assign CAN_FIRE_RL_fabric_adapter_rl_nseq_req =
	     f_mem_req$EMPTY_N && mem_master_HREADY &&
	     (f_mem_req$D_OUT[34] || f_mem_wdata$EMPTY_N) &&
	     fabric_adapter_rg_state == 2'd0 ;
  assign WILL_FIRE_RL_fabric_adapter_rl_nseq_req =
	     CAN_FIRE_RL_fabric_adapter_rl_nseq_req ;

  // rule RL_fabric_adapter_rl_complete_nseq_req
  assign CAN_FIRE_RL_fabric_adapter_rl_complete_nseq_req =
	     f_mem_req$EMPTY_N && mem_master_HREADY &&
	     fabric_adapter_rg_state == 2'd1 ;
  assign WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req =
	     CAN_FIRE_RL_fabric_adapter_rl_complete_nseq_req ;

  // rule RL_mmio_rl_read_rsp
  assign CAN_FIRE_RL_mmio_rl_read_rsp =
	     f_mem_rdata$EMPTY_N &&
	     (!f_mem_rdata$D_OUT[64] ||
	      rg_req_0_BITS_107_TO_106_1_EQ_0_7_OR_rg_req_0__ETC___d44) &&
	     mmio_rg_mmio_state == 2'd2 ;
  assign WILL_FIRE_RL_mmio_rl_read_rsp = CAN_FIRE_RL_mmio_rl_read_rsp ;

  // rule RL_mmio_rl_write_req
  assign CAN_FIRE_RL_mmio_rl_write_req =
	     f_is_mem_req$EMPTY_N && f_mem_wdata$FULL_N &&
	     IF_f_is_mem_req_i_notEmpty_AND_f_is_mem_req_fi_ETC___d6 &&
	     mmio_rg_mmio_state == 2'd1 &&
	     rg_req[107:106] == 2'd1 ;
  assign WILL_FIRE_RL_mmio_rl_write_req = CAN_FIRE_RL_mmio_rl_write_req ;

  // rule RL_rl_req
  assign CAN_FIRE_RL_rl_req =
	     w_dmem_req_whas__05_AND_soc_map_m_is_itcm_addr_ETC___d836 &&
	     rg_dmem_state != 2'd3 ;
  assign WILL_FIRE_RL_rl_req = CAN_FIRE_RL_rl_req ;

  // rule RL_nmio_fabric_adapter_rl_write_data
  assign CAN_FIRE_RL_nmio_fabric_adapter_rl_write_data =
	     nmio_fabric_adapter_f_wr_data_control$EMPTY_N &&
	     nmio_fabric_adapter_master_xactor_f_wr_data$FULL_N &&
	     f_mem_wdata$EMPTY_N &&
	     nmio_fabric_adapter_rg_wr_beat <
	     nmio_fabric_adapter_f_wr_data_control$D_OUT[7:0] ;
  assign WILL_FIRE_RL_nmio_fabric_adapter_rl_write_data =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_write_data ;

  // rule RL_fabric_adapter_rl_read_response
  assign CAN_FIRE_RL_fabric_adapter_rl_read_response =
	     f_mem_rdata$FULL_N && f_mem_req$EMPTY_N && mem_master_HREADY &&
	     fabric_adapter_rg_state == 2'd3 ;
  assign WILL_FIRE_RL_fabric_adapter_rl_read_response =
	     CAN_FIRE_RL_fabric_adapter_rl_read_response ;

  // rule __me_check_4
  assign CAN_FIRE___me_check_4 = 1'b1 ;
  assign WILL_FIRE___me_check_4 = 1'b1 ;

  // rule RL_fabric_adapter_rl_write_response
  assign CAN_FIRE_RL_fabric_adapter_rl_write_response =
	     f_mem_wdata$EMPTY_N && f_mem_req$EMPTY_N && mem_master_HREADY &&
	     fabric_adapter_rg_state == 2'd2 ;
  assign WILL_FIRE_RL_fabric_adapter_rl_write_response =
	     CAN_FIRE_RL_fabric_adapter_rl_write_response ;

  // rule __me_check_7
  assign CAN_FIRE___me_check_7 = 1'b1 ;
  assign WILL_FIRE___me_check_7 = 1'b1 ;

  // rule RL_dma_port_rl_bad_rd_addr
  assign CAN_FIRE_RL_dma_port_rl_bad_rd_addr =
	     dma_port_slave_xactor_f_rd_addr$EMPTY_N &&
	     dma_port_slave_xactor_f_rd_data$FULL_N &&
	     dma_port_rg_state == 2'd0 &&
	     dma_port_slave_xactor_f_rd_addr$D_OUT[31:29] != 3'd0 &&
	     dma_port_slave_xactor_f_rd_addr$D_OUT[31:29] != 3'd4 ;
  assign WILL_FIRE_RL_dma_port_rl_bad_rd_addr =
	     CAN_FIRE_RL_dma_port_rl_bad_rd_addr ;

  // rule RL_dma_port_rl_rd_rsp
  assign CAN_FIRE_RL_dma_port_rl_rd_rsp =
	     dma_port_slave_xactor_f_rd_addr$EMPTY_N &&
	     dma_port_slave_xactor_f_rd_data$FULL_N &&
	     dma_port_rg_state == 2'd1 ;
  assign WILL_FIRE_RL_dma_port_rl_rd_rsp = CAN_FIRE_RL_dma_port_rl_rd_rsp ;

  // rule RL_dma_port_rl_bad_wr_addr
  assign CAN_FIRE_RL_dma_port_rl_bad_wr_addr =
	     dma_port_slave_xactor_f_wr_addr$EMPTY_N &&
	     dma_port_slave_xactor_f_wr_data$EMPTY_N &&
	     dma_port_slave_xactor_f_wr_resp$FULL_N &&
	     dma_port_rg_state == 2'd0 &&
	     dma_port_slave_xactor_f_wr_addr$D_OUT[31:29] != 3'd0 &&
	     dma_port_slave_xactor_f_wr_addr$D_OUT[31:29] != 3'd4 ;
  assign WILL_FIRE_RL_dma_port_rl_bad_wr_addr =
	     CAN_FIRE_RL_dma_port_rl_bad_wr_addr ;

  // rule RL_dma_port_rl_rd_req
  assign CAN_FIRE_RL_dma_port_rl_rd_req =
	     dma_port_slave_xactor_f_rd_addr$EMPTY_N &&
	     dma_port_rg_state == 2'd0 &&
	     (dma_port_slave_xactor_f_rd_addr$D_OUT[31:29] == 3'd0 ||
	      dma_port_slave_xactor_f_rd_addr$D_OUT[31:29] == 3'd4) ;
  assign WILL_FIRE_RL_dma_port_rl_rd_req = CAN_FIRE_RL_dma_port_rl_rd_req ;

  // rule __me_check_14
  assign CAN_FIRE___me_check_14 = 1'b1 ;
  assign WILL_FIRE___me_check_14 = 1'b1 ;

  // rule RL_dma_port_rl_wr_req
  assign CAN_FIRE_RL_dma_port_rl_wr_req =
	     dma_port_slave_xactor_f_wr_addr$EMPTY_N &&
	     dma_port_slave_xactor_f_wr_data$EMPTY_N &&
	     dma_port_slave_xactor_f_wr_resp$FULL_N &&
	     dma_port_rg_state == 2'd0 &&
	     (dma_port_slave_xactor_f_wr_addr$D_OUT[31:29] == 3'd0 ||
	      dma_port_slave_xactor_f_wr_addr$D_OUT[31:29] == 3'd4) ;
  assign WILL_FIRE_RL_dma_port_rl_wr_req =
	     CAN_FIRE_RL_dma_port_rl_wr_req &&
	     !WILL_FIRE_RL_dma_port_rl_rd_req ;

  // rule __me_check_17
  assign CAN_FIRE___me_check_17 = 1'b1 ;
  assign WILL_FIRE___me_check_17 = 1'b1 ;

  // inputs to muxes for submodule ports
  assign MUX_dtcm$b_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_amo_rsp &&
	     rg_req_0_BITS_107_TO_106_1_EQ_2_5_AND_rg_req_0_ETC___d774 ;
  assign MUX_dtcm$b_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_req && !soc_map$m_is_itcm_addr &&
	     w_dmem_req_wget__06_BITS_104_TO_103_09_EQ_0b0__ETC___d891 &&
	     soc_map$m_is_dtcm_addr &&
	     w_dmem_req$wget[107:106] == 2'd1 ;
  assign MUX_f_mem_rdata$enq_1__SEL_1 =
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data &&
	     (nmio_fabric_adapter_f_rd_rsp_control$D_OUT[10:9] != 2'b11 ||
	      nmio_fabric_adapter_rg_rd_beat[0]) ;
  assign MUX_f_mem_req$enq_1__SEL_1 =
	     WILL_FIRE_RL_mmio_rl_write_req && f_is_mem_req$D_OUT ;
  assign MUX_f_mem_req$enq_1__SEL_2 =
	     WILL_FIRE_RL_mmio_rl_read_req && f_is_mem_req$D_OUT ;
  assign MUX_f_mem_req$enq_1__SEL_3 =
	     WILL_FIRE_RL_mmio_rl_read_rsp &&
	     f_mem_rdata_first__4_BIT_64_5_AND_NOT_rg_req_0_ETC___d91 ;
  assign MUX_f_mem_wdata$enq_1__SEL_1 =
	     WILL_FIRE_RL_mmio_rl_read_rsp && f_mem_rdata$D_OUT[64] &&
	     rg_req[107:106] != 2'd0 &&
	     (rg_req[107:106] != 2'd2 || rg_req[6:2] != 5'b00010) ;
  assign MUX_f_nmio_req$enq_1__SEL_1 =
	     WILL_FIRE_RL_mmio_rl_write_req && !f_is_mem_req$D_OUT ;
  assign MUX_f_nmio_req$enq_1__SEL_2 =
	     WILL_FIRE_RL_mmio_rl_read_req && !f_is_mem_req$D_OUT ;
  assign MUX_f_nmio_req$enq_1__SEL_3 =
	     WILL_FIRE_RL_mmio_rl_read_rsp &&
	     f_mem_rdata_first__4_BIT_64_5_AND_NOT_rg_req_0_ETC___d94 ;
  assign MUX_fabric_adapter_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_fabric_adapter_rl_write_response ||
	     WILL_FIRE_RL_fabric_adapter_rl_read_response ;
  assign MUX_mmio_rg_err$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_req && !soc_map$m_is_itcm_addr &&
	     w_dmem_req_wget__06_BITS_104_TO_103_09_EQ_0b0__ETC___d891 &&
	     !soc_map$m_is_dtcm_addr ;
  assign MUX_mmio_rg_ld_val$write_1__SEL_1 =
	     WILL_FIRE_RL_mmio_rl_read_rsp && f_mem_rdata$D_OUT[64] ;
  assign MUX_nmio_fabric_adapter_rg_wr_rsps_pending$write_1__SEL_1 =
	     nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	     nmio_fabric_adapter_rg_wr_rsps_pending ;
  assign MUX_rg_lrsc_valid$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_req && !soc_map$m_is_itcm_addr &&
	     w_dmem_req_wget__06_BITS_104_TO_103_09_EQ_0b0__ETC___d891 &&
	     soc_map_m_is_dtcm_addr_w_dmem_req_wget__06_BIT_ETC___d968 ;
  assign MUX_rg_lrsc_word64$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_req &&
	     NOT_soc_map_m_is_itcm_addr_w_dmem_req_wget__06_ETC___d985 ;
  assign MUX_dma_port_slave_xactor_f_rd_data$enq_1__VAL_1 =
	     { dma_port_slave_xactor_f_rd_addr$D_OUT[64:29], 3'd5 } ;
  assign MUX_dma_port_slave_xactor_f_rd_data$enq_1__VAL_2 =
	     { dma_port_slave_xactor_f_rd_addr$D_OUT[64:61],
	       word__h10128,
	       3'd1 } ;
  assign MUX_dma_port_slave_xactor_f_wr_resp$enq_1__VAL_1 =
	     { dma_port_slave_xactor_f_wr_addr$D_OUT[64:61], 2'd2 } ;
  assign MUX_dma_port_slave_xactor_f_wr_resp$enq_1__VAL_2 =
	     { dma_port_slave_xactor_f_wr_addr$D_OUT[64:61], 2'd0 } ;
  assign MUX_dtcm$b_put_1__VAL_3 =
	     (dma_port_slave_xactor_f_wr_addr$D_OUT[31:29] == 3'd0) ?
	       strb__h10759 :
	       { dma_port_slave_xactor_f_wr_data$D_OUT[4:1], 4'd0 } ;
  assign MUX_dtcm$b_put_3__VAL_3 =
	     {2{dma_port_slave_xactor_f_wr_data$D_OUT[36:5]}} ;
  assign MUX_dw_exc_code$wset_1__VAL_2 =
	     (rg_req[107:106] == 2'd0 ||
	      rg_req[107:106] == 2'd2 && rg_req[6:2] == 5'b00010) ?
	       4'd5 :
	       4'd7 ;
  assign MUX_f_mem_rdata$enq_1__VAL_1 =
	     (nmio_fabric_adapter_f_rd_rsp_control$D_OUT[10:9] == 2'b11) ?
	       IF_nmio_fabric_adapter_rg_rd_beat_60_BIT_0_61__ETC___d187 :
	       { nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT[2:1] ==
		 2'b0,
		 _theResult___fst__h5355 } ;
  assign MUX_f_mem_rdata$enq_1__VAL_2 =
	     { !mem_master_HRESP, rsp_data__h8373 } ;
  assign MUX_f_mem_req$enq_1__VAL_1 =
	     { 1'd0, rg_req[102:71], rg_req[104:103] } ;
  assign MUX_f_mem_req$enq_1__VAL_2 =
	     { 1'd1, rg_req[102:71], rg_req[104:103] } ;
  assign MUX_f_mem_wdata$enq_1__VAL_1 =
	     final_st_val__h2904 << shamt_bits__h2914 ;
  assign MUX_f_mem_wdata$enq_1__VAL_2 = data__h3631 << shamt_bits__h2914 ;
  assign MUX_fabric_adapter_rg_state$write_1__VAL_1 =
	     f_mem_req$D_OUT[34] ? 2'd3 : 2'd2 ;
  assign MUX_mmio_rg_ld_val$write_1__VAL_1 =
	     (rg_req[107:106] == 2'd0 ||
	      rg_req[107:106] == 2'd2 && rg_req[6:2] == 5'b00010) ?
	       ld_val__h2380 :
	       final_ld_val__h2903 ;
  assign MUX_nmio_fabric_adapter_rg_rd_beat$write_1__VAL_2 =
	     nmio_fabric_adapter_rg_rd_beat + 8'd1 ;
  assign MUX_rg_dmem_state$write_1__VAL_2 =
	     (soc_map$m_is_itcm_addr ||
	      NOT_w_dmem_req_wget__06_BITS_104_TO_103_09_EQ__ETC___d830) ?
	       2'd1 :
	       (soc_map$m_is_dtcm_addr ?
		  ((w_dmem_req$wget[107:106] == 2'd2) ? 2'd3 : 2'd1) :
		  2'd2) ;
  assign MUX_rg_lrsc_valid$write_1__VAL_2 =
	     rg_req[107:106] != 2'd2 || rg_req[6:2] == 5'b00010 ||
	     !rg_req_0_BITS_107_TO_106_1_EQ_2_5_AND_rg_req_0_ETC___d529 ;
  assign MUX_rg_lrsc_word64$write_1__VAL_2 =
	     { rg_req[107:106] == 2'd2 && rg_req[6:2] == 5'b00011,
	       !rg_lrsc_valid ||
	       !rg_lrsc_pa_24_EQ_rg_req_0_BITS_102_TO_71_8___d525 } ;
  assign MUX_rg_result_valid$write_1__VAL_2 =
	     soc_map$m_is_itcm_addr ||
	     NOT_w_dmem_req_wget__06_BITS_104_TO_103_09_EQ__ETC___d830 ||
	     soc_map$m_is_dtcm_addr ;

  // inlined wires
  assign dw_valid$wget = !WILL_FIRE_RL_rl_tcm_rsp || rg_result_valid ;
  assign dw_valid$whas = WILL_FIRE_RL_rl_tcm_rsp || WILL_FIRE_RL_rl_mmio_rsp ;
  assign dw_exc$wget = WILL_FIRE_RL_rl_tcm_rsp ? rg_exc : mmio_rg_err ;
  assign w_dmem_req$wget =
	     { dmem_req_op,
	       dmem_req_f3,
	       dmem_req_addr,
	       dmem_req_store_value,
	       dmem_req_amo_funct7 } ;

  // register dma_port_rg_state
  always@(EN_reset or
	  WILL_FIRE_RL_dma_port_rl_rd_req or WILL_FIRE_RL_dma_port_rl_rd_rsp)
  case (1'b1)
    EN_reset: dma_port_rg_state$D_IN = 2'd0;
    WILL_FIRE_RL_dma_port_rl_rd_req: dma_port_rg_state$D_IN = 2'd1;
    WILL_FIRE_RL_dma_port_rl_rd_rsp: dma_port_rg_state$D_IN = 2'd0;
    default: dma_port_rg_state$D_IN = 2'b10 /* unspecified value */ ;
  endcase
  assign dma_port_rg_state$EN =
	     WILL_FIRE_RL_dma_port_rl_rd_rsp || EN_reset ||
	     WILL_FIRE_RL_dma_port_rl_rd_req ;

  // register fabric_adapter_rg_haddr
  assign fabric_adapter_rg_haddr$D_IN = f_mem_req$D_OUT[33:2] ;
  assign fabric_adapter_rg_haddr$EN = CAN_FIRE_RL_fabric_adapter_rl_nseq_req ;

  // register fabric_adapter_rg_hsize
  assign fabric_adapter_rg_hsize$D_IN =
	     IF_f_mem_req_first__43_BITS_1_TO_0_53_EQ_0b11__ETC___d356 ;
  assign fabric_adapter_rg_hsize$EN = CAN_FIRE_RL_fabric_adapter_rl_nseq_req ;

  // register fabric_adapter_rg_htrans
  assign fabric_adapter_rg_htrans$D_IN =
	     WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req ? 2'd0 : 2'd2 ;
  assign fabric_adapter_rg_htrans$EN =
	     WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req ||
	     WILL_FIRE_RL_fabric_adapter_rl_nseq_req ;

  // register fabric_adapter_rg_hwdata
  assign fabric_adapter_rg_hwdata$D_IN = x__h8157[31:0] ;
  assign fabric_adapter_rg_hwdata$EN =
	     WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req &&
	     !f_mem_req$D_OUT[34] &&
	     f_mem_wdata$EMPTY_N ;

  // register fabric_adapter_rg_hwrite
  assign fabric_adapter_rg_hwrite$D_IN =
	     !f_mem_req$D_OUT[34] && f_mem_wdata$EMPTY_N ;
  assign fabric_adapter_rg_hwrite$EN =
	     CAN_FIRE_RL_fabric_adapter_rl_nseq_req ;

  // register fabric_adapter_rg_state
  always@(WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req or
	  MUX_fabric_adapter_rg_state$write_1__VAL_1 or
	  MUX_fabric_adapter_rg_state$write_1__SEL_2 or
	  WILL_FIRE_RL_fabric_adapter_rl_nseq_req)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req:
	  fabric_adapter_rg_state$D_IN =
	      MUX_fabric_adapter_rg_state$write_1__VAL_1;
      MUX_fabric_adapter_rg_state$write_1__SEL_2:
	  fabric_adapter_rg_state$D_IN = 2'd0;
      WILL_FIRE_RL_fabric_adapter_rl_nseq_req:
	  fabric_adapter_rg_state$D_IN = 2'd1;
      default: fabric_adapter_rg_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign fabric_adapter_rg_state$EN =
	     WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req ||
	     WILL_FIRE_RL_fabric_adapter_rl_write_response ||
	     WILL_FIRE_RL_fabric_adapter_rl_read_response ||
	     WILL_FIRE_RL_fabric_adapter_rl_nseq_req ;

  // register mmio_rg_err
  assign mmio_rg_err$D_IN = !MUX_mmio_rg_err$write_1__SEL_1 ;
  assign mmio_rg_err$EN =
	     WILL_FIRE_RL_mmio_rl_read_rsp && !f_mem_rdata$D_OUT[64] ||
	     WILL_FIRE_RL_rl_req && !soc_map$m_is_itcm_addr &&
	     w_dmem_req_wget__06_BITS_104_TO_103_09_EQ_0b0__ETC___d891 &&
	     !soc_map$m_is_dtcm_addr ;

  // register mmio_rg_final_st_val
  assign mmio_rg_final_st_val$D_IN =
	     MUX_f_mem_wdata$enq_1__SEL_1 ?
	       final_st_val__h2904 :
	       rg_req[70:7] ;
  assign mmio_rg_final_st_val$EN =
	     WILL_FIRE_RL_mmio_rl_read_rsp && f_mem_rdata$D_OUT[64] &&
	     rg_req[107:106] != 2'd0 &&
	     (rg_req[107:106] != 2'd2 || rg_req[6:2] != 5'b00010) ||
	     WILL_FIRE_RL_mmio_rl_write_req ;

  // register mmio_rg_ld_val
  assign mmio_rg_ld_val$D_IN =
	     MUX_mmio_rg_ld_val$write_1__SEL_1 ?
	       MUX_mmio_rg_ld_val$write_1__VAL_1 :
	       64'd1 ;
  assign mmio_rg_ld_val$EN =
	     WILL_FIRE_RL_mmio_rl_read_rsp && f_mem_rdata$D_OUT[64] ||
	     WILL_FIRE_RL_mmio_rl_AMO_SC ;

  // register mmio_rg_mmio_state
  always@(MUX_mmio_rg_err$write_1__SEL_1 or
	  WILL_FIRE_RL_mmio_rl_write_req or
	  WILL_FIRE_RL_mmio_rl_read_rsp or
	  WILL_FIRE_RL_mmio_rl_AMO_SC or WILL_FIRE_RL_mmio_rl_read_req)
  case (1'b1)
    MUX_mmio_rg_err$write_1__SEL_1: mmio_rg_mmio_state$D_IN = 2'd1;
    WILL_FIRE_RL_mmio_rl_write_req || WILL_FIRE_RL_mmio_rl_read_rsp ||
    WILL_FIRE_RL_mmio_rl_AMO_SC:
	mmio_rg_mmio_state$D_IN = 2'd0;
    WILL_FIRE_RL_mmio_rl_read_req: mmio_rg_mmio_state$D_IN = 2'd2;
    default: mmio_rg_mmio_state$D_IN = 2'b10 /* unspecified value */ ;
  endcase
  assign mmio_rg_mmio_state$EN =
	     WILL_FIRE_RL_rl_req && !soc_map$m_is_itcm_addr &&
	     w_dmem_req_wget__06_BITS_104_TO_103_09_EQ_0b0__ETC___d891 &&
	     !soc_map$m_is_dtcm_addr ||
	     WILL_FIRE_RL_mmio_rl_AMO_SC ||
	     WILL_FIRE_RL_mmio_rl_write_req ||
	     WILL_FIRE_RL_mmio_rl_read_rsp ||
	     WILL_FIRE_RL_mmio_rl_read_req ;

  // register nmio_fabric_adapter_rg_rd_beat
  assign nmio_fabric_adapter_rg_rd_beat$D_IN =
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req ?
	       8'd0 :
	       MUX_nmio_fabric_adapter_rg_rd_beat$write_1__VAL_2 ;
  assign nmio_fabric_adapter_rg_rd_beat$EN =
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data ||
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req ;

  // register nmio_fabric_adapter_rg_rd_client_id
  assign nmio_fabric_adapter_rg_rd_client_id$D_IN = 1'd1 ;
  assign nmio_fabric_adapter_rg_rd_client_id$EN =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_single_read_req ;

  // register nmio_fabric_adapter_rg_rd_data_lower32
  assign nmio_fabric_adapter_rg_rd_data_lower32$D_IN =
	     nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT[34:3] ;
  assign nmio_fabric_adapter_rg_rd_data_lower32$EN =
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data &&
	     nmio_fabric_adapter_f_rd_rsp_control$D_OUT[10:9] == 2'b11 &&
	     !nmio_fabric_adapter_rg_rd_beat[0] ;

  // register nmio_fabric_adapter_rg_rd_data_lower32_ok
  assign nmio_fabric_adapter_rg_rd_data_lower32_ok$D_IN =
	     nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign nmio_fabric_adapter_rg_rd_data_lower32_ok$EN =
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data &&
	     nmio_fabric_adapter_f_rd_rsp_control$D_OUT[10:9] == 2'b11 &&
	     !nmio_fabric_adapter_rg_rd_beat[0] ;

  // register nmio_fabric_adapter_rg_wr_beat
  assign nmio_fabric_adapter_rg_wr_beat$D_IN =
	     nmio_fabric_adapter_rg_wr_beat_62_EQ_nmio_fabr_ETC___d268 ?
	       8'd0 :
	       x__h6687 ;
  assign nmio_fabric_adapter_rg_wr_beat$EN =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_write_data ;

  // register nmio_fabric_adapter_rg_wr_rsps_pending
  assign nmio_fabric_adapter_rg_wr_rsps_pending$D_IN =
	     !MUX_nmio_fabric_adapter_rg_wr_rsps_pending$write_1__SEL_1 ;
  assign nmio_fabric_adapter_rg_wr_rsps_pending$EN =
	     nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	     nmio_fabric_adapter_rg_wr_rsps_pending ||
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req ;

  // register nmio_fabric_adapter_rg_write_error
  assign nmio_fabric_adapter_rg_write_error$D_IN = 1'd1 ;
  assign nmio_fabric_adapter_rg_write_error$EN =
	     nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	     (nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] !=
	      2'b0 ||
	      !nmio_fabric_adapter_rg_wr_rsps_pending) ;

  // register rg_dmem_state
  always@(EN_reset or
	  WILL_FIRE_RL_rl_req or
	  MUX_rg_dmem_state$write_1__VAL_2 or WILL_FIRE_RL_rl_amo_rsp)
  case (1'b1)
    EN_reset: rg_dmem_state$D_IN = 2'd0;
    WILL_FIRE_RL_rl_req:
	rg_dmem_state$D_IN = MUX_rg_dmem_state$write_1__VAL_2;
    WILL_FIRE_RL_rl_amo_rsp: rg_dmem_state$D_IN = 2'd1;
    default: rg_dmem_state$D_IN = 2'b10 /* unspecified value */ ;
  endcase
  assign rg_dmem_state$EN =
	     WILL_FIRE_RL_rl_req || EN_reset || WILL_FIRE_RL_rl_amo_rsp ;

  // register rg_exc
  assign rg_exc$D_IN =
	     soc_map$m_is_itcm_addr ||
	     NOT_w_dmem_req_wget__06_BITS_104_TO_103_09_EQ__ETC___d830 ;
  assign rg_exc$EN = CAN_FIRE_RL_rl_req ;

  // register rg_exc_code
  assign rg_exc_code$D_IN =
	     w_dmem_req_wget__06_BITS_104_TO_103_09_EQ_0b0__ETC___d891 ?
	       ((w_dmem_req$wget[107:106] == 2'd0 ||
		 w_dmem_req$wget[107:106] == 2'd2 &&
		 w_dmem_req$wget[6:2] == 5'b00010) ?
		  4'd5 :
		  4'd7) :
	       ((w_dmem_req$wget[107:106] == 2'd0 ||
		 w_dmem_req$wget[107:106] == 2'd2 &&
		 w_dmem_req$wget[6:2] == 5'b00010) ?
		  4'd4 :
		  4'd6) ;
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_req &&
	     (soc_map$m_is_itcm_addr ||
	      NOT_w_dmem_req_wget__06_BITS_104_TO_103_09_EQ__ETC___d830) ;

  // register rg_lrsc_pa
  assign rg_lrsc_pa$D_IN = rg_req[102:71] ;
  assign rg_lrsc_pa$EN =
	     WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	     rg_req[6:2] == 5'b00010 ;

  // register rg_lrsc_size
  assign rg_lrsc_size$D_IN = rg_req[104:103] ;
  assign rg_lrsc_size$EN =
	     WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	     rg_req[6:2] == 5'b00010 ;

  // register rg_lrsc_valid
  assign rg_lrsc_valid$D_IN =
	     !MUX_rg_lrsc_valid$write_1__SEL_1 &&
	     MUX_rg_lrsc_valid$write_1__VAL_2 ;
  assign rg_lrsc_valid$EN =
	     WILL_FIRE_RL_rl_req && !soc_map$m_is_itcm_addr &&
	     w_dmem_req_wget__06_BITS_104_TO_103_09_EQ_0b0__ETC___d891 &&
	     soc_map_m_is_dtcm_addr_w_dmem_req_wget__06_BIT_ETC___d968 ||
	     WILL_FIRE_RL_rl_amo_rsp && _dfoo1 ;

  // register rg_lrsc_word64
  assign rg_lrsc_word64$D_IN =
	     MUX_rg_lrsc_word64$write_1__SEL_1 ?
	       2'd0 :
	       MUX_rg_lrsc_word64$write_1__VAL_2 ;
  assign rg_lrsc_word64$EN =
	     WILL_FIRE_RL_rl_req &&
	     NOT_soc_map_m_is_itcm_addr_w_dmem_req_wget__06_ETC___d985 ||
	     WILL_FIRE_RL_rl_amo_rsp ;

  // register rg_req
  assign rg_req$D_IN = w_dmem_req$wget ;
  assign rg_req$EN = CAN_FIRE_RL_rl_req ;

  // register rg_result_valid
  assign rg_result_valid$D_IN =
	     !EN_reset && MUX_rg_result_valid$write_1__VAL_2 ;
  assign rg_result_valid$EN = WILL_FIRE_RL_rl_req || EN_reset ;

  // register rg_tohost_addr
  assign rg_tohost_addr$D_IN = set_watch_tohost_tohost_addr ;
  assign rg_tohost_addr$EN = EN_set_watch_tohost ;

  // register rg_tohost_value
  assign rg_tohost_value$D_IN = EN_reset ? 64'd0 : w_dmem_req$wget[70:7] ;
  assign rg_tohost_value$EN =
	     WILL_FIRE_RL_rl_req &&
	     rg_watch_tohost_39_AND_w_dmem_req_wget__06_BIT_ETC___d850 ||
	     EN_reset ;

  // register rg_watch_tohost
  assign rg_watch_tohost$D_IN = set_watch_tohost_watch_tohost ;
  assign rg_watch_tohost$EN = EN_set_watch_tohost ;

  // submodule dma_port_slave_xactor_f_rd_addr
  assign dma_port_slave_xactor_f_rd_addr$D_IN =
	     { dma_server_arid,
	       dma_server_araddr,
	       dma_server_arlen,
	       dma_server_arsize,
	       dma_server_arburst,
	       dma_server_arlock,
	       dma_server_arcache,
	       dma_server_arprot,
	       dma_server_arqos,
	       dma_server_arregion } ;
  assign dma_port_slave_xactor_f_rd_addr$ENQ =
	     dma_server_arvalid && dma_port_slave_xactor_f_rd_addr$FULL_N ;
  assign dma_port_slave_xactor_f_rd_addr$DEQ =
	     WILL_FIRE_RL_dma_port_rl_rd_rsp ||
	     WILL_FIRE_RL_dma_port_rl_bad_rd_addr ;
  assign dma_port_slave_xactor_f_rd_addr$CLR = EN_reset ;

  // submodule dma_port_slave_xactor_f_rd_data
  assign dma_port_slave_xactor_f_rd_data$D_IN =
	     WILL_FIRE_RL_dma_port_rl_bad_rd_addr ?
	       MUX_dma_port_slave_xactor_f_rd_data$enq_1__VAL_1 :
	       MUX_dma_port_slave_xactor_f_rd_data$enq_1__VAL_2 ;
  assign dma_port_slave_xactor_f_rd_data$ENQ =
	     WILL_FIRE_RL_dma_port_rl_bad_rd_addr ||
	     WILL_FIRE_RL_dma_port_rl_rd_rsp ;
  assign dma_port_slave_xactor_f_rd_data$DEQ =
	     dma_server_rready && dma_port_slave_xactor_f_rd_data$EMPTY_N ;
  assign dma_port_slave_xactor_f_rd_data$CLR = EN_reset ;

  // submodule dma_port_slave_xactor_f_wr_addr
  assign dma_port_slave_xactor_f_wr_addr$D_IN =
	     { dma_server_awid,
	       dma_server_awaddr,
	       dma_server_awlen,
	       dma_server_awsize,
	       dma_server_awburst,
	       dma_server_awlock,
	       dma_server_awcache,
	       dma_server_awprot,
	       dma_server_awqos,
	       dma_server_awregion } ;
  assign dma_port_slave_xactor_f_wr_addr$ENQ =
	     dma_server_awvalid && dma_port_slave_xactor_f_wr_addr$FULL_N ;
  assign dma_port_slave_xactor_f_wr_addr$DEQ =
	     WILL_FIRE_RL_dma_port_rl_wr_req ||
	     WILL_FIRE_RL_dma_port_rl_bad_wr_addr ;
  assign dma_port_slave_xactor_f_wr_addr$CLR = EN_reset ;

  // submodule dma_port_slave_xactor_f_wr_data
  assign dma_port_slave_xactor_f_wr_data$D_IN =
	     { dma_server_wdata, dma_server_wstrb, dma_server_wlast } ;
  assign dma_port_slave_xactor_f_wr_data$ENQ =
	     dma_server_wvalid && dma_port_slave_xactor_f_wr_data$FULL_N ;
  assign dma_port_slave_xactor_f_wr_data$DEQ =
	     WILL_FIRE_RL_dma_port_rl_wr_req ||
	     WILL_FIRE_RL_dma_port_rl_bad_wr_addr ;
  assign dma_port_slave_xactor_f_wr_data$CLR = EN_reset ;

  // submodule dma_port_slave_xactor_f_wr_resp
  assign dma_port_slave_xactor_f_wr_resp$D_IN =
	     WILL_FIRE_RL_dma_port_rl_bad_wr_addr ?
	       MUX_dma_port_slave_xactor_f_wr_resp$enq_1__VAL_1 :
	       MUX_dma_port_slave_xactor_f_wr_resp$enq_1__VAL_2 ;
  assign dma_port_slave_xactor_f_wr_resp$ENQ =
	     WILL_FIRE_RL_dma_port_rl_bad_wr_addr ||
	     WILL_FIRE_RL_dma_port_rl_wr_req ;
  assign dma_port_slave_xactor_f_wr_resp$DEQ =
	     dma_server_bready && dma_port_slave_xactor_f_wr_resp$EMPTY_N ;
  assign dma_port_slave_xactor_f_wr_resp$CLR = EN_reset ;

  // submodule dma_port_soc_map
  assign dma_port_soc_map$m_is_IO_addr_addr = 32'h0 ;
  assign dma_port_soc_map$m_is_clint_addr_addr = 32'h0 ;
  assign dma_port_soc_map$m_is_dtcm_addr_addr = 32'h0 ;
  assign dma_port_soc_map$m_is_itcm_addr_addr = 32'h0 ;
  assign dma_port_soc_map$m_is_mem_addr_addr = 32'h0 ;
  assign dma_port_soc_map$m_is_nmio_addr_addr = 32'h0 ;
  assign dma_port_soc_map$m_is_tcm_addr_addr = 32'h0 ;

  // submodule dtcm
  assign dtcm$ADDRA =
	     w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901[14:3] ;
  always@(MUX_dtcm$b_put_1__SEL_1 or
	  rg_req_0_BITS_102_TO_71_8_MINUS_soc_map_m_dtcm_ETC___d708 or
	  MUX_dtcm$b_put_1__SEL_2 or
	  w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901 or
	  WILL_FIRE_RL_dma_port_rl_wr_req or
	  dma_port_slave_xactor_f_wr_addrD_OUT_BITS_60__ETC__q21 or
	  WILL_FIRE_RL_dma_port_rl_rd_req or
	  dma_port_slave_xactor_f_rd_addrD_OUT_BITS_60__ETC__q22)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dtcm$b_put_1__SEL_1:
	  dtcm$ADDRB =
	      rg_req_0_BITS_102_TO_71_8_MINUS_soc_map_m_dtcm_ETC___d708[14:3];
      MUX_dtcm$b_put_1__SEL_2:
	  dtcm$ADDRB =
	      w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901[14:3];
      WILL_FIRE_RL_dma_port_rl_wr_req:
	  dtcm$ADDRB =
	      dma_port_slave_xactor_f_wr_addrD_OUT_BITS_60__ETC__q21[14:3];
      WILL_FIRE_RL_dma_port_rl_rd_req:
	  dtcm$ADDRB =
	      dma_port_slave_xactor_f_rd_addrD_OUT_BITS_60__ETC__q22[14:3];
      default: dtcm$ADDRB = 12'b101010101010 /* unspecified value */ ;
    endcase
  end
  assign dtcm$DIA = 64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  always@(MUX_dtcm$b_put_1__SEL_1 or
	  ram_st_value__h13167 or
	  MUX_dtcm$b_put_1__SEL_2 or
	  ram_st_value__h16415 or
	  WILL_FIRE_RL_dma_port_rl_wr_req or
	  MUX_dtcm$b_put_3__VAL_3 or WILL_FIRE_RL_dma_port_rl_rd_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dtcm$b_put_1__SEL_1: dtcm$DIB = ram_st_value__h13167;
      MUX_dtcm$b_put_1__SEL_2: dtcm$DIB = ram_st_value__h16415;
      WILL_FIRE_RL_dma_port_rl_wr_req: dtcm$DIB = MUX_dtcm$b_put_3__VAL_3;
      WILL_FIRE_RL_dma_port_rl_rd_req:
	  dtcm$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: dtcm$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dtcm$WEA = 8'd0 ;
  always@(MUX_dtcm$b_put_1__SEL_1 or
	  byte_en__h13166 or
	  MUX_dtcm$b_put_1__SEL_2 or
	  byte_en__h16414 or
	  WILL_FIRE_RL_dma_port_rl_wr_req or
	  MUX_dtcm$b_put_1__VAL_3 or WILL_FIRE_RL_dma_port_rl_rd_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dtcm$b_put_1__SEL_1: dtcm$WEB = byte_en__h13166;
      MUX_dtcm$b_put_1__SEL_2: dtcm$WEB = byte_en__h16414;
      WILL_FIRE_RL_dma_port_rl_wr_req: dtcm$WEB = MUX_dtcm$b_put_1__VAL_3;
      WILL_FIRE_RL_dma_port_rl_rd_req: dtcm$WEB = 8'd0;
      default: dtcm$WEB = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign dtcm$ENA =
	     WILL_FIRE_RL_rl_req && !soc_map$m_is_itcm_addr &&
	     w_dmem_req_wget__06_BITS_104_TO_103_09_EQ_0b0__ETC___d891 &&
	     soc_map$m_is_dtcm_addr &&
	     w_dmem_req$wget[107:106] != 2'd1 ;
  assign dtcm$ENB =
	     WILL_FIRE_RL_rl_amo_rsp &&
	     rg_req_0_BITS_107_TO_106_1_EQ_2_5_AND_rg_req_0_ETC___d774 ||
	     MUX_dtcm$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dma_port_rl_wr_req ||
	     WILL_FIRE_RL_dma_port_rl_rd_req ;

  // submodule f_is_mem_req
  assign f_is_mem_req$D_IN = !soc_map$m_is_nmio_addr ;
  assign f_is_mem_req$ENQ = MUX_mmio_rg_err$write_1__SEL_1 ;
  assign f_is_mem_req$DEQ = CAN_FIRE_RL_rl_mmio_rsp ;
  assign f_is_mem_req$CLR = 1'b0 ;

  // submodule f_mem_rdata
  assign f_mem_rdata$D_IN =
	     MUX_f_mem_rdata$enq_1__SEL_1 ?
	       MUX_f_mem_rdata$enq_1__VAL_1 :
	       MUX_f_mem_rdata$enq_1__VAL_2 ;
  assign f_mem_rdata$ENQ =
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data &&
	     (nmio_fabric_adapter_f_rd_rsp_control$D_OUT[10:9] != 2'b11 ||
	      nmio_fabric_adapter_rg_rd_beat[0]) ||
	     WILL_FIRE_RL_fabric_adapter_rl_read_response ;
  assign f_mem_rdata$DEQ =
	     f_mem_rdata$EMPTY_N &&
	     (!f_mem_rdata$D_OUT[64] ||
	      rg_req_0_BITS_107_TO_106_1_EQ_0_7_OR_rg_req_0__ETC___d44) &&
	     mmio_rg_mmio_state == 2'd2 ;
  assign f_mem_rdata$CLR = 1'b0 ;

  // submodule f_mem_req
  always@(MUX_f_mem_req$enq_1__SEL_1 or
	  MUX_f_mem_req$enq_1__VAL_1 or
	  MUX_f_mem_req$enq_1__SEL_2 or
	  MUX_f_mem_req$enq_1__VAL_2 or MUX_f_mem_req$enq_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_f_mem_req$enq_1__SEL_1: f_mem_req$D_IN = MUX_f_mem_req$enq_1__VAL_1;
      MUX_f_mem_req$enq_1__SEL_2: f_mem_req$D_IN = MUX_f_mem_req$enq_1__VAL_2;
      MUX_f_mem_req$enq_1__SEL_3: f_mem_req$D_IN = MUX_f_mem_req$enq_1__VAL_1;
      default: f_mem_req$D_IN = 35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_mem_req$ENQ =
	     WILL_FIRE_RL_mmio_rl_write_req && f_is_mem_req$D_OUT ||
	     WILL_FIRE_RL_mmio_rl_read_req && f_is_mem_req$D_OUT ||
	     WILL_FIRE_RL_mmio_rl_read_rsp &&
	     f_mem_rdata_first__4_BIT_64_5_AND_NOT_rg_req_0_ETC___d91 ;
  assign f_mem_req$DEQ =
	     WILL_FIRE_RL_fabric_adapter_rl_write_response ||
	     WILL_FIRE_RL_fabric_adapter_rl_read_response ;
  assign f_mem_req$CLR = 1'b0 ;

  // submodule f_mem_wdata
  assign f_mem_wdata$D_IN =
	     MUX_f_mem_wdata$enq_1__SEL_1 ?
	       MUX_f_mem_wdata$enq_1__VAL_1 :
	       MUX_f_mem_wdata$enq_1__VAL_2 ;
  assign f_mem_wdata$ENQ =
	     WILL_FIRE_RL_mmio_rl_read_rsp && f_mem_rdata$D_OUT[64] &&
	     rg_req[107:106] != 2'd0 &&
	     (rg_req[107:106] != 2'd2 || rg_req[6:2] != 5'b00010) ||
	     WILL_FIRE_RL_mmio_rl_write_req ;
  assign f_mem_wdata$DEQ =
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_write_data &&
	     (nmio_fabric_adapter_f_wr_data_control$D_OUT[12:11] != 2'b11 ||
	      nmio_fabric_adapter_rg_wr_beat[0]) ||
	     WILL_FIRE_RL_fabric_adapter_rl_write_response ;
  assign f_mem_wdata$CLR = 1'b0 ;

  // submodule f_nmio_req
  always@(MUX_f_nmio_req$enq_1__SEL_1 or
	  MUX_f_mem_req$enq_1__VAL_1 or
	  MUX_f_nmio_req$enq_1__SEL_2 or
	  MUX_f_mem_req$enq_1__VAL_2 or MUX_f_nmio_req$enq_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_f_nmio_req$enq_1__SEL_1:
	  f_nmio_req$D_IN = MUX_f_mem_req$enq_1__VAL_1;
      MUX_f_nmio_req$enq_1__SEL_2:
	  f_nmio_req$D_IN = MUX_f_mem_req$enq_1__VAL_2;
      MUX_f_nmio_req$enq_1__SEL_3:
	  f_nmio_req$D_IN = MUX_f_mem_req$enq_1__VAL_1;
      default: f_nmio_req$D_IN = 35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_nmio_req$ENQ =
	     WILL_FIRE_RL_mmio_rl_write_req && !f_is_mem_req$D_OUT ||
	     WILL_FIRE_RL_mmio_rl_read_req && !f_is_mem_req$D_OUT ||
	     WILL_FIRE_RL_mmio_rl_read_rsp &&
	     f_mem_rdata_first__4_BIT_64_5_AND_NOT_rg_req_0_ETC___d94 ;
  assign f_nmio_req$DEQ =
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req ||
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req ;
  assign f_nmio_req$CLR = 1'b0 ;

  // submodule nmio_fabric_adapter_f_rd_rsp_control
  assign nmio_fabric_adapter_f_rd_rsp_control$D_IN =
	     { f_nmio_req$D_OUT[1:0],
	       f_nmio_req$D_OUT[4],
	       num_beats__h5899 } ;
  assign nmio_fabric_adapter_f_rd_rsp_control$ENQ =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_single_read_req ;
  assign nmio_fabric_adapter_f_rd_rsp_control$DEQ =
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data &&
	     nmio_fabric_adapter_rg_rd_beat ==
	     nmio_fabric_adapter_f_rd_rsp_control$D_OUT[7:0] - 8'd1 ;
  assign nmio_fabric_adapter_f_rd_rsp_control$CLR = 1'b0 ;

  // submodule nmio_fabric_adapter_f_wr_data_control
  assign nmio_fabric_adapter_f_wr_data_control$D_IN =
	     { 1'd1,
	       f_nmio_req$D_OUT[1:0],
	       f_nmio_req$D_OUT[4:2],
	       num_beats__h5899 } ;
  assign nmio_fabric_adapter_f_wr_data_control$ENQ =
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req ;
  assign nmio_fabric_adapter_f_wr_data_control$DEQ =
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_write_data &&
	     nmio_fabric_adapter_rg_wr_beat_62_EQ_nmio_fabr_ETC___d268 ;
  assign nmio_fabric_adapter_f_wr_data_control$CLR = 1'b0 ;

  // submodule nmio_fabric_adapter_master_xactor_f_rd_addr
  assign nmio_fabric_adapter_master_xactor_f_rd_addr$D_IN =
	     { 4'd0,
	       f_nmio_req$D_OUT[33:2],
	       fabric_len__h5900,
	       x__h5957,
	       18'd65536 } ;
  assign nmio_fabric_adapter_master_xactor_f_rd_addr$ENQ =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_single_read_req ;
  assign nmio_fabric_adapter_master_xactor_f_rd_addr$DEQ =
	     nmio_fabric_adapter_master_xactor_f_rd_addr$EMPTY_N &&
	     nmio_master_arready ;
  assign nmio_fabric_adapter_master_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule nmio_fabric_adapter_master_xactor_f_rd_data
  assign nmio_fabric_adapter_master_xactor_f_rd_data$D_IN =
	     { nmio_master_rid,
	       nmio_master_rdata,
	       nmio_master_rresp,
	       nmio_master_rlast } ;
  assign nmio_fabric_adapter_master_xactor_f_rd_data$ENQ =
	     nmio_master_rvalid &&
	     nmio_fabric_adapter_master_xactor_f_rd_data$FULL_N ;
  assign nmio_fabric_adapter_master_xactor_f_rd_data$DEQ =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_read_data ;
  assign nmio_fabric_adapter_master_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule nmio_fabric_adapter_master_xactor_f_wr_addr
  assign nmio_fabric_adapter_master_xactor_f_wr_addr$D_IN =
	     { 4'd0,
	       f_nmio_req$D_OUT[33:2],
	       fabric_len__h5900,
	       x__h5957,
	       18'd65536 } ;
  assign nmio_fabric_adapter_master_xactor_f_wr_addr$ENQ =
	     WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req ;
  assign nmio_fabric_adapter_master_xactor_f_wr_addr$DEQ =
	     nmio_fabric_adapter_master_xactor_f_wr_addr$EMPTY_N &&
	     nmio_master_awready ;
  assign nmio_fabric_adapter_master_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule nmio_fabric_adapter_master_xactor_f_wr_data
  assign nmio_fabric_adapter_master_xactor_f_wr_data$D_IN =
	     { data__h6729[31:0],
	       strb__h6731[3:0],
	       nmio_fabric_adapter_rg_wr_beat_62_EQ_nmio_fabr_ETC___d268 } ;
  assign nmio_fabric_adapter_master_xactor_f_wr_data$ENQ =
	     CAN_FIRE_RL_nmio_fabric_adapter_rl_write_data ;
  assign nmio_fabric_adapter_master_xactor_f_wr_data$DEQ =
	     nmio_fabric_adapter_master_xactor_f_wr_data$EMPTY_N &&
	     nmio_master_wready ;
  assign nmio_fabric_adapter_master_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule nmio_fabric_adapter_master_xactor_f_wr_resp
  assign nmio_fabric_adapter_master_xactor_f_wr_resp$D_IN =
	     { nmio_master_bid, nmio_master_bresp } ;
  assign nmio_fabric_adapter_master_xactor_f_wr_resp$ENQ =
	     nmio_master_bvalid &&
	     nmio_fabric_adapter_master_xactor_f_wr_resp$FULL_N ;
  assign nmio_fabric_adapter_master_xactor_f_wr_resp$DEQ =
	     nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N ;
  assign nmio_fabric_adapter_master_xactor_f_wr_resp$CLR = 1'b0 ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 32'h0 ;
  assign soc_map$m_is_clint_addr_addr = 32'h0 ;
  assign soc_map$m_is_dtcm_addr_addr = w_dmem_req$wget[102:71] ;
  assign soc_map$m_is_itcm_addr_addr = w_dmem_req$wget[102:71] ;
  assign soc_map$m_is_mem_addr_addr = 32'h0 ;
  assign soc_map$m_is_nmio_addr_addr = w_dmem_req$wget[102:71] ;
  assign soc_map$m_is_tcm_addr_addr = 32'h0 ;

  // remaining internal signals
  assign IF_f_is_mem_req_i_notEmpty_AND_f_is_mem_req_fi_ETC___d6 =
	     (f_is_mem_req$EMPTY_N && f_is_mem_req$D_OUT) ?
	       f_mem_req$FULL_N :
	       f_nmio_req$FULL_N ;
  assign IF_f_mem_req_first__43_BITS_1_TO_0_53_EQ_0b11__ETC___d356 =
	     (f_mem_req$D_OUT[1:0] == 2'b11) ?
	       3'd2 :
	       { 1'b0, f_mem_req$D_OUT[1:0] } ;
  assign IF_nmio_fabric_adapter_f_rd_rsp_control_first__ETC___d200 =
	     (nmio_fabric_adapter_f_rd_rsp_control$D_OUT[10:9] == 2'b11) ?
	       (nmio_fabric_adapter_rg_rd_beat[0] ?
		  nmio_fabric_adapter_rg_rd_data_lower32_ok &&
		  nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT[2:1] ==
		  2'b0 :
		  nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT[2:1] ==
		  2'b0) :
	       nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT[2:1] ==
	       2'b0 ;
  assign IF_nmio_fabric_adapter_rg_rd_beat_60_BIT_0_61__ETC___d187 =
	     nmio_fabric_adapter_rg_rd_beat[0] ?
	       { nmio_fabric_adapter_rg_rd_data_lower32_ok &&
		 nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT[2:1] ==
		 2'b0,
		 data___2__h5360 } :
	       { nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT[2:1] ==
		 2'b0,
		 data__h5131 } ;
  assign IF_rg_req_0_BITS_104_TO_103_9_EQ_0b10_1_THEN_S_ETC___d103 =
	     (rg_req[104:103] == 2'b10) ?
	       { {32{rg_req_BITS_38_TO_7__q17[31]}},
		 rg_req_BITS_38_TO_7__q17 } :
	       rg_req[70:7] ;
  assign IF_rg_req_0_BITS_104_TO_103_9_EQ_0b10_1_THEN_S_ETC___d677 =
	     (rg_req[104:103] == 2'b10) ?
	       { {32{ram_out0978_BITS_31_TO_0__q20[31]}},
		 ram_out0978_BITS_31_TO_0__q20 } :
	       ram_out__h10978 ;
  assign NOT_rg_req_0_BITS_107_TO_106_1_EQ_2_5_6_OR_NOT_ETC___d705 =
	     (rg_req[107:106] != 2'd2 || rg_req[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_24_EQ_rg_req_0_BITS_102_TO_71_8___d525) &&
	     verbosity != 2'd0 ;
  assign NOT_soc_map_m_is_itcm_addr_w_dmem_req_wget__06_ETC___d900 =
	     !soc_map$m_is_itcm_addr &&
	     w_dmem_req_wget__06_BITS_104_TO_103_09_EQ_0b0__ETC___d891 &&
	     soc_map$m_is_dtcm_addr &&
	     w_dmem_req$wget[107:106] == 2'd1 &&
	     verbosity != 2'd0 ;
  assign NOT_soc_map_m_is_itcm_addr_w_dmem_req_wget__06_ETC___d974 =
	     !soc_map$m_is_itcm_addr &&
	     w_dmem_req_wget__06_BITS_104_TO_103_09_EQ_0b0__ETC___d891 &&
	     soc_map$m_is_dtcm_addr &&
	     w_dmem_req$wget[107:106] != 2'd1 &&
	     NOT_verbosity_ULT_2_44___d145 ;
  assign NOT_soc_map_m_is_itcm_addr_w_dmem_req_wget__06_ETC___d985 =
	     !soc_map$m_is_itcm_addr &&
	     w_dmem_req_wget__06_BITS_104_TO_103_09_EQ_0b0__ETC___d891 &&
	     soc_map$m_is_dtcm_addr &&
	     (w_dmem_req$wget[107:106] != 2'd2 ||
	      w_dmem_req$wget[6:2] != 5'b00011) &&
	     (w_dmem_req$wget[107:106] != 2'd2 ||
	      w_dmem_req$wget[6:2] == 5'b00010 ||
	      w_dmem_req$wget[6:2] == 5'b00011) &&
	     (w_dmem_req$wget[107:106] != 2'd2 ||
	      w_dmem_req$wget[6:2] != 5'b00010) ;
  assign NOT_verbosity_ULE_1_56___d457 = verbosity > 2'd1 ;
  assign NOT_verbosity_ULT_2_44___d145 = verbosity >= 2'd2 ;
  assign NOT_w_dmem_req_wget__06_BITS_104_TO_103_09_EQ__ETC___d830 =
	     w_dmem_req$wget[104:103] != 2'b0 &&
	     (w_dmem_req$wget[104:103] != 2'b01 || w_dmem_req$wget[71]) &&
	     (w_dmem_req$wget[104:103] != 2'b10 ||
	      w_dmem_req$wget[72:71] != 2'b0) &&
	     (w_dmem_req$wget[104:103] != 2'b11 ||
	      w_dmem_req$wget[73:71] != 3'b0) ;
  assign _dfoo1 =
	     rg_req[107:106] == 2'd2 &&
	     (rg_req[6:2] != 5'b00010 &&
	      rg_req_0_BITS_107_TO_106_1_EQ_2_5_AND_rg_req_0_ETC___d529 ||
	      rg_req[6:2] == 5'b00010) ;
  assign _theResult____h15028 =
	     rg_lrsc_word64[1] ? word64__h15093 : ram_out__h10978 ;
  assign _theResult___fst__h13514 =
	     (rg_req_0_BITS_102_TO_71_8_MINUS_soc_map_m_dtcm_ETC___d708[2:0] ==
	      3'h0) ?
	       8'd255 :
	       8'd0 ;
  assign _theResult___fst__h16758 =
	     (w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901[2:0] ==
	      3'h0) ?
	       8'd255 :
	       8'd0 ;
  assign _theResult___fst__h5355 =
	     nmio_fabric_adapter_f_rd_rsp_control$D_OUT[8] ?
	       data___1__h5414 :
	       data__h5131 ;
  assign _theResult___fst__h6792 =
	     nmio_fabric_adapter_f_wr_data_control$D_OUT[10] ?
	       wdata___1__h8188 :
	       f_mem_wdata$D_OUT ;
  assign _theResult___fst__h6877 =
	     nmio_fabric_adapter_rg_wr_beat[0] ?
	       wdata___1__h8188 :
	       f_mem_wdata$D_OUT ;
  assign _theResult___snd__h13416 = { st_value__h13164[55:0], 8'hAA } ;
  assign _theResult___snd__h13420 = { st_value__h13164[39:0], 24'hAAAAAA } ;
  assign _theResult___snd__h13424 =
	     { st_value__h13164[23:0], 40'hAAAAAAAAAA } ;
  assign _theResult___snd__h13428 =
	     { st_value__h13164[7:0], 56'hAAAAAAAAAAAAAA } ;
  assign _theResult___snd__h13475 = { st_value__h13164[47:0], 16'hAAAA } ;
  assign _theResult___snd__h13479 =
	     { st_value__h13164[15:0], 48'hAAAAAAAAAAAA } ;
  assign _theResult___snd__h13504 =
	     (rg_req_0_BITS_102_TO_71_8_MINUS_soc_map_m_dtcm_ETC___d708[2:0] ==
	      3'h0) ?
	       st_value__h13164 :
	       _theResult___snd__h13508 ;
  assign _theResult___snd__h13508 = { st_value__h13164[31:0], 32'hAAAAAAAA } ;
  assign _theResult___snd__h13515 =
	     (rg_req[107:106] == 2'd2 && rg_req[6:2] == 5'b00011) ?
	       rg_req[70:7] :
	       v__h11529 ;
  assign _theResult___snd__h16660 = { w_dmem_req$wget[62:0], 1'h0 } ;
  assign _theResult___snd__h16664 = { w_dmem_req$wget[46:0], 17'h0AAAA } ;
  assign _theResult___snd__h16668 = { w_dmem_req$wget[30:0], 33'h0AAAAAAAA } ;
  assign _theResult___snd__h16672 =
	     { w_dmem_req$wget[14:0], 49'h0AAAAAAAAAAAA } ;
  assign _theResult___snd__h16719 = { w_dmem_req$wget[54:0], 9'h0AA } ;
  assign _theResult___snd__h16723 =
	     { w_dmem_req$wget[22:0], 41'h0AAAAAAAAAA } ;
  assign _theResult___snd__h16748 =
	     (w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901[2:0] ==
	      3'h0) ?
	       w_dmem_req$wget[70:7] :
	       _theResult___snd__h16752 ;
  assign _theResult___snd__h16752 = { w_dmem_req$wget[38:0], 25'h0AAAAAA } ;
  assign _theResult___snd_fst__h6910 =
	     nmio_fabric_adapter_f_wr_data_control$D_OUT[10] ?
	       strb___1__h6826 :
	       strb__h6725 ;
  assign _theResult___snd_fst__h6992 =
	     nmio_fabric_adapter_rg_wr_beat[0] ? 8'd255 : strb__h6725 ;
  assign data1__h2488 = f_mem_rdata$D_OUT[63:0] >> shamt_bits__h2914 ;
  assign data___1__h5414 =
	     { nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT[34:3],
	       32'b0 } ;
  assign data___1__h8413 = { mem_master_HRDATA, 32'b0 } ;
  assign data___2__h5360 =
	     { nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT[34:3],
	       nmio_fabric_adapter_rg_rd_data_lower32 } ;
  assign data__h3631 = rg_req[70:7] & mask__h2532 ;
  assign data__h5131 =
	     { 32'd0,
	       nmio_fabric_adapter_master_xactor_f_rd_data$D_OUT[34:3] } ;
  assign data__h5332 =
	     (nmio_fabric_adapter_f_rd_rsp_control$D_OUT[10:9] == 2'b11) ?
	       y_avValue_fst__h5306 :
	       _theResult___fst__h5355 ;
  assign data__h6729 =
	     (nmio_fabric_adapter_f_wr_data_control$D_OUT[12:11] == 2'b11) ?
	       _theResult___fst__h6877 :
	       _theResult___fst__h6792 ;
  assign data__h8350 = { 32'd0, mem_master_HRDATA } ;
  assign dma_port_slave_xactor_f_rd_addrD_OUT_BITS_60__ETC__q22 =
	     dma_port_slave_xactor_f_rd_addr$D_OUT[60:29] -
	     dma_port_soc_map$m_itcm_addr_base ;
  assign dma_port_slave_xactor_f_wr_addrD_OUT_BITS_60__ETC__q21 =
	     dma_port_slave_xactor_f_wr_addr$D_OUT[60:29] -
	     dma_port_soc_map$m_itcm_addr_base ;
  assign dtcmDOA_BITS_15_TO_0__q2 = dtcm$DOA[15:0] ;
  assign dtcmDOA_BITS_15_TO_8__q4 = dtcm$DOA[15:8] ;
  assign dtcmDOA_BITS_23_TO_16__q5 = dtcm$DOA[23:16] ;
  assign dtcmDOA_BITS_31_TO_0__q3 = dtcm$DOA[31:0] ;
  assign dtcmDOA_BITS_31_TO_16__q6 = dtcm$DOA[31:16] ;
  assign dtcmDOA_BITS_31_TO_24__q7 = dtcm$DOA[31:24] ;
  assign dtcmDOA_BITS_39_TO_32__q9 = dtcm$DOA[39:32] ;
  assign dtcmDOA_BITS_47_TO_32__q10 = dtcm$DOA[47:32] ;
  assign dtcmDOA_BITS_47_TO_40__q8 = dtcm$DOA[47:40] ;
  assign dtcmDOA_BITS_55_TO_48__q12 = dtcm$DOA[55:48] ;
  assign dtcmDOA_BITS_63_TO_32__q11 = dtcm$DOA[63:32] ;
  assign dtcmDOA_BITS_63_TO_48__q13 = dtcm$DOA[63:48] ;
  assign dtcmDOA_BITS_63_TO_56__q14 = dtcm$DOA[63:56] ;
  assign dtcmDOA_BITS_7_TO_0__q1 = dtcm$DOA[7:0] ;
  assign f_mem_rdata_first__4_BIT_64_5_AND_NOT_rg_req_0_ETC___d139 =
	     f_mem_rdata$D_OUT[64] && rg_req[107:106] != 2'd0 &&
	     (rg_req[107:106] != 2'd2 || rg_req[6:2] != 5'b00010) &&
	     verbosity != 2'd0 ;
  assign f_mem_rdata_first__4_BIT_64_5_AND_NOT_rg_req_0_ETC___d91 =
	     f_mem_rdata$D_OUT[64] && rg_req[107:106] != 2'd0 &&
	     (rg_req[107:106] != 2'd2 || rg_req[6:2] != 5'b00010) &&
	     f_is_mem_req$D_OUT ;
  assign f_mem_rdata_first__4_BIT_64_5_AND_NOT_rg_req_0_ETC___d94 =
	     f_mem_rdata$D_OUT[64] && rg_req[107:106] != 2'd0 &&
	     (rg_req[107:106] != 2'd2 || rg_req[6:2] != 5'b00010) &&
	     !f_is_mem_req$D_OUT ;
  assign fabric_len__h5900 = num_beats__h5899 - 8'd1 ;
  assign fabric_size__h5785 = { 1'b0, f_nmio_req$D_OUT[1:0] } ;
  assign final_ld_val__h2903 =
	     (rg_req[104:103] == 2'b10) ?
	       { {32{ld_val_bits262_BITS_31_TO_0__q15[31]}},
		 ld_val_bits262_BITS_31_TO_0__q15 } :
	       ld_val_bits__h2262 ;
  assign final_st_val__h12819 = { 32'd0, _theResult_____2__h12795[31:0] } ;
  assign final_st_val__h12909 =
	     IF_rg_req_0_BITS_104_TO_103_9_EQ_0b10_1_THEN_S_ETC___d677 +
	     IF_rg_req_0_BITS_104_TO_103_9_EQ_0b10_1_THEN_S_ETC___d103 ;
  assign final_st_val__h12987 = w1__h12788 ^ w2__h3017 ;
  assign final_st_val__h12991 = w1__h12788 & w2__h3017 ;
  assign final_st_val__h12995 = w1__h12788 | w2__h3017 ;
  assign final_st_val__h12999 =
	     (w1__h12788 < w2__h3017) ? w1__h12788 : w2__h3017 ;
  assign final_st_val__h13004 =
	     (w1__h12788 <= w2__h3017) ? w2__h3017 : w1__h12788 ;
  assign final_st_val__h13010 =
	     ((IF_rg_req_0_BITS_104_TO_103_9_EQ_0b10_1_THEN_S_ETC___d677 ^
	       64'h8000000000000000) <
	      (IF_rg_req_0_BITS_104_TO_103_9_EQ_0b10_1_THEN_S_ETC___d103 ^
	       64'h8000000000000000)) ?
	       w1__h12788 :
	       w2__h3017 ;
  assign final_st_val__h13015 =
	     ((IF_rg_req_0_BITS_104_TO_103_9_EQ_0b10_1_THEN_S_ETC___d677 ^
	       64'h8000000000000000) <=
	      (IF_rg_req_0_BITS_104_TO_103_9_EQ_0b10_1_THEN_S_ETC___d103 ^
	       64'h8000000000000000)) ?
	       w2__h3017 :
	       w1__h12788 ;
  assign final_st_val__h2904 =
	     (rg_req[104:103] == 2'b10) ?
	       final_st_val__h3046 :
	       _theResult_____2__h3022 ;
  assign final_st_val__h3046 = { 32'd0, _theResult_____2__h3022[31:0] } ;
  assign final_st_val__h3136 =
	     final_ld_val__h2903 +
	     IF_rg_req_0_BITS_104_TO_103_9_EQ_0b10_1_THEN_S_ETC___d103 ;
  assign final_st_val__h3214 = w1__h3015 ^ w2__h3017 ;
  assign final_st_val__h3218 = w1__h3015 & w2__h3017 ;
  assign final_st_val__h3222 = w1__h3015 | w2__h3017 ;
  assign final_st_val__h3226 =
	     (w1__h3015 < w2__h3017) ? w1__h3015 : w2__h3017 ;
  assign final_st_val__h3231 =
	     (w1__h3015 <= w2__h3017) ? w2__h3017 : w1__h3015 ;
  assign final_st_val__h3237 =
	     ((final_ld_val__h2903 ^ 64'h8000000000000000) <
	      (IF_rg_req_0_BITS_104_TO_103_9_EQ_0b10_1_THEN_S_ETC___d103 ^
	       64'h8000000000000000)) ?
	       w1__h3015 :
	       w2__h3017 ;
  assign final_st_val__h3242 =
	     ((final_ld_val__h2903 ^ 64'h8000000000000000) <=
	      (IF_rg_req_0_BITS_104_TO_103_9_EQ_0b10_1_THEN_S_ETC___d103 ^
	       64'h8000000000000000)) ?
	       w2__h3017 :
	       w1__h3015 ;
  assign ld_val__h2380 =
	     (!rg_req[105] &&
	      CASE_rg_req_BITS_104_TO_103_0b0_ld_val_bits262_ETC__q16) ?
	       result__h2751 :
	       result__h2823 ;
  assign ld_val_bits262_BITS_31_TO_0__q15 = ld_val_bits__h2262[31:0] ;
  assign ld_val_bits__h2262 = data1__h2488 & mask__h2532 ;
  assign nmio_fabric_adapter_master_xactor_f_rd_data_i__ETC___d166 =
	     nmio_fabric_adapter_master_xactor_f_rd_data$EMPTY_N &&
	     (nmio_fabric_adapter_f_rd_rsp_control$D_OUT[10:9] == 2'b11 &&
	      !nmio_fabric_adapter_rg_rd_beat[0] ||
	      f_mem_rdata$FULL_N) ;
  assign nmio_fabric_adapter_rg_wr_beat_62_EQ_nmio_fabr_ETC___d268 =
	     nmio_fabric_adapter_rg_wr_beat ==
	     nmio_fabric_adapter_f_wr_data_control$D_OUT[7:0] - 8'd1 ;
  assign num_beats__h5899 = (f_nmio_req$D_OUT[1:0] == 2'd3) ? 8'd2 : 8'd1 ;
  assign ram_out0978_BITS_31_TO_0__q20 = ram_out__h10978[31:0] ;
  assign result__h11848 =
	     { {56{dtcmDOA_BITS_7_TO_0__q1[7]}}, dtcmDOA_BITS_7_TO_0__q1 } ;
  assign result__h11879 =
	     { {56{dtcmDOA_BITS_15_TO_8__q4[7]}}, dtcmDOA_BITS_15_TO_8__q4 } ;
  assign result__h11907 =
	     { {56{dtcmDOA_BITS_23_TO_16__q5[7]}},
	       dtcmDOA_BITS_23_TO_16__q5 } ;
  assign result__h11935 =
	     { {56{dtcmDOA_BITS_31_TO_24__q7[7]}},
	       dtcmDOA_BITS_31_TO_24__q7 } ;
  assign result__h11963 =
	     { {56{dtcmDOA_BITS_39_TO_32__q9[7]}},
	       dtcmDOA_BITS_39_TO_32__q9 } ;
  assign result__h11991 =
	     { {56{dtcmDOA_BITS_47_TO_40__q8[7]}},
	       dtcmDOA_BITS_47_TO_40__q8 } ;
  assign result__h12019 =
	     { {56{dtcmDOA_BITS_55_TO_48__q12[7]}},
	       dtcmDOA_BITS_55_TO_48__q12 } ;
  assign result__h12047 =
	     { {56{dtcmDOA_BITS_63_TO_56__q14[7]}},
	       dtcmDOA_BITS_63_TO_56__q14 } ;
  assign result__h12092 = { 56'd0, dtcm$DOA[7:0] } ;
  assign result__h12120 = { 56'd0, dtcm$DOA[15:8] } ;
  assign result__h12148 = { 56'd0, dtcm$DOA[23:16] } ;
  assign result__h12176 = { 56'd0, dtcm$DOA[31:24] } ;
  assign result__h12204 = { 56'd0, dtcm$DOA[39:32] } ;
  assign result__h12232 = { 56'd0, dtcm$DOA[47:40] } ;
  assign result__h12260 = { 56'd0, dtcm$DOA[55:48] } ;
  assign result__h12288 = { 56'd0, dtcm$DOA[63:56] } ;
  assign result__h12333 =
	     { {48{dtcmDOA_BITS_15_TO_0__q2[15]}},
	       dtcmDOA_BITS_15_TO_0__q2 } ;
  assign result__h12361 =
	     { {48{dtcmDOA_BITS_31_TO_16__q6[15]}},
	       dtcmDOA_BITS_31_TO_16__q6 } ;
  assign result__h12389 =
	     { {48{dtcmDOA_BITS_47_TO_32__q10[15]}},
	       dtcmDOA_BITS_47_TO_32__q10 } ;
  assign result__h12417 =
	     { {48{dtcmDOA_BITS_63_TO_48__q13[15]}},
	       dtcmDOA_BITS_63_TO_48__q13 } ;
  assign result__h12458 = { 48'd0, dtcm$DOA[15:0] } ;
  assign result__h12486 = { 48'd0, dtcm$DOA[31:16] } ;
  assign result__h12514 = { 48'd0, dtcm$DOA[47:32] } ;
  assign result__h12542 = { 48'd0, dtcm$DOA[63:48] } ;
  assign result__h12583 =
	     { {32{dtcmDOA_BITS_31_TO_0__q3[31]}},
	       dtcmDOA_BITS_31_TO_0__q3 } ;
  assign result__h12611 =
	     { {32{dtcmDOA_BITS_63_TO_32__q11[31]}},
	       dtcmDOA_BITS_63_TO_32__q11 } ;
  assign result__h12650 = { 32'd0, dtcm$DOA[31:0] } ;
  assign result__h12678 = { 32'd0, dtcm$DOA[63:32] } ;
  assign result__h2751 = ld_val_bits__h2262 | y__h2763 ;
  assign result__h2823 = ld_val_bits__h2262 & mask__h2532 ;
  assign rg_lrsc_pa_24_EQ_rg_req_0_BITS_102_TO_71_8___d525 =
	     rg_lrsc_pa == rg_req[102:71] ;
  assign rg_req_0_BITS_102_TO_71_8_MINUS_soc_map_m_dtcm_ETC___d708 =
	     rg_req[102:71] - soc_map$m_dtcm_addr_base ;
  assign rg_req_0_BITS_107_TO_106_1_EQ_0_7_OR_rg_req_0__ETC___d44 =
	     rg_req[107:106] == 2'd0 ||
	     rg_req[107:106] == 2'd2 && rg_req[6:2] == 5'b00010 ||
	     f_is_mem_req$EMPTY_N && f_mem_wdata$FULL_N &&
	     IF_f_is_mem_req_i_notEmpty_AND_f_is_mem_req_fi_ETC___d6 ;
  assign rg_req_0_BITS_107_TO_106_1_EQ_2_5_AND_rg_req_0_ETC___d529 =
	     rg_req[107:106] == 2'd2 &&
	     (rg_req[6:2] == 5'b00011 && rg_lrsc_valid &&
	      rg_lrsc_pa_24_EQ_rg_req_0_BITS_102_TO_71_8___d525 ||
	      rg_req[6:2] != 5'b00010 && rg_req[6:2] != 5'b00011 &&
	      rg_lrsc_pa_24_EQ_rg_req_0_BITS_102_TO_71_8___d525) ;
  assign rg_req_0_BITS_107_TO_106_1_EQ_2_5_AND_rg_req_0_ETC___d774 =
	     rg_req[107:106] == 2'd2 && rg_req[6:2] != 5'b00010 &&
	     (rg_req[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_24_EQ_rg_req_0_BITS_102_TO_71_8___d525) ;
  assign rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_NOT_rg_lr_ETC___d541 =
	     rg_req[6:2] == 5'b00011 &&
	     (!rg_lrsc_valid ||
	      !rg_lrsc_pa_24_EQ_rg_req_0_BITS_102_TO_71_8___d525) &&
	     verbosity != 2'd0 ;
  assign rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_rg_lrsc_v_ETC___d533 =
	     rg_req[6:2] == 5'b00011 && rg_lrsc_valid &&
	     rg_lrsc_pa_24_EQ_rg_req_0_BITS_102_TO_71_8___d525 &&
	     verbosity != 2'd0 ;
  assign rg_req_BITS_38_TO_7__q17 = rg_req[38:7] ;
  assign rg_watch_tohost_39_AND_w_dmem_req_wget__06_BIT_ETC___d850 =
	     rg_watch_tohost && w_dmem_req$wget[107:106] == 2'd1 &&
	     x__h15613 == rg_tohost_addr &&
	     w_dmem_req$wget[70:7] != 64'd0 ;
  assign rsp_data__h8373 =
	     (f_mem_req$D_OUT[1:0] == 2'b11) ?
	       data__h8350 :
	       (f_mem_req$D_OUT[4] ? data___1__h8413 : data__h8350) ;
  assign shamt_bits__h2914 = { rg_req[73:71], 3'b0 } ;
  assign soc_map_m_is_dtcm_addr_w_dmem_req_wget__06_BIT_ETC___d968 =
	     soc_map$m_is_dtcm_addr && w_dmem_req$wget[107:106] == 2'd1 &&
	     rg_lrsc_pa == w_dmem_req$wget[102:71] ;
  assign st_value__h13164 = _theResult___snd__h13515 ;
  assign strb___1__h6826 = { 4'b0, strb__h6725[7:4] } ;
  assign strb__h10759 = { 4'd0, dma_port_slave_xactor_f_wr_data$D_OUT[4:1] } ;
  assign strb__h6725 =
	     strb__h6724 <<
	     nmio_fabric_adapter_f_wr_data_control$D_OUT[10:8] ;
  assign strb__h6731 =
	     (nmio_fabric_adapter_f_wr_data_control$D_OUT[12:11] == 2'b11) ?
	       _theResult___snd_fst__h6992 :
	       _theResult___snd_fst__h6910 ;
  assign test_num__h15669 = { 1'd0, w_dmem_req$wget[70:8] } ;
  assign v__h11529 =
	     (rg_req[107:106] == 2'd2 && rg_req[6:2] != 5'b00010 &&
	      rg_req[6:2] != 5'b00011) ?
	       v__h11600 :
	       rg_req[70:7] ;
  assign v__h11600 =
	     (rg_req[104:103] == 2'b10) ?
	       final_st_val__h12819 :
	       _theResult_____2__h12795 ;
  assign w1___1__h12878 = { 32'd0, ram_out__h10978[31:0] } ;
  assign w1___1__h3105 = { 32'd0, ld_val_bits__h2262[31:0] } ;
  assign w1__h12788 =
	     (rg_req[104:103] == 2'b10) ? w1___1__h12878 : ram_out__h10978 ;
  assign w1__h3015 =
	     (rg_req[104:103] == 2'b10) ? w1___1__h3105 : ld_val_bits__h2262 ;
  assign w2___1__h3106 = { 32'd0, rg_req[38:7] } ;
  assign w2__h3017 =
	     (rg_req[104:103] == 2'b10) ? w2___1__h3106 : rg_req[70:7] ;
  assign w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901 =
	     w_dmem_req$wget[102:71] - soc_map$m_dtcm_addr_base ;
  assign w_dmem_req_wget__06_BITS_104_TO_103_09_EQ_0b0__ETC___d891 =
	     w_dmem_req$wget[104:103] == 2'b0 ||
	     w_dmem_req$wget[104:103] == 2'b01 && !w_dmem_req$wget[71] ||
	     w_dmem_req$wget[104:103] == 2'b10 &&
	     w_dmem_req$wget[72:71] == 2'b0 ||
	     w_dmem_req$wget[104:103] == 2'b11 &&
	     w_dmem_req$wget[73:71] == 3'b0 ;
  assign w_dmem_req_whas__05_AND_soc_map_m_is_itcm_addr_ETC___d836 =
	     EN_dmem_req &&
	     (soc_map$m_is_itcm_addr ||
	      NOT_w_dmem_req_wget__06_BITS_104_TO_103_09_EQ__ETC___d830 ||
	      soc_map$m_is_dtcm_addr ||
	      f_is_mem_req$FULL_N) ;
  assign wdata___1__h8188 = { 32'b0, f_mem_wdata$D_OUT[63:32] } ;
  assign word64__h15093 = { 63'd0, rg_lrsc_word64[0] } ;
  assign word__h10128 =
	     (dma_port_slave_xactor_f_rd_addr$D_OUT[31:29] == 3'd0) ?
	       dtcm$DOB[31:0] :
	       dtcm$DOB[63:32] ;
  assign word_addr__h17865 =
	     { 3'd0,
	       w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901[31:3] } ;
  assign x__h15613 = { 32'd0, w_dmem_req$wget[102:71] } ;
  assign x__h5957 =
	     (f_nmio_req$D_OUT[1:0] == 2'd3) ? 3'b010 : fabric_size__h5785 ;
  assign x__h6687 = nmio_fabric_adapter_rg_wr_beat + 8'd1 ;
  assign x__h8157 =
	     (f_mem_req$D_OUT[1:0] == 2'b11) ?
	       f_mem_wdata$D_OUT :
	       (f_mem_req$D_OUT[4] ? wdata___1__h8188 : f_mem_wdata$D_OUT) ;
  assign y_avValue_fst__h5306 =
	     nmio_fabric_adapter_rg_rd_beat[0] ?
	       data___2__h5360 :
	       data__h5131 ;
  always@(rg_req)
  begin
    case (rg_req[104:103])
      2'b0: mask__h2532 = 64'h00000000000000FF;
      2'b01: mask__h2532 = 64'h000000000000FFFF;
      2'b10: mask__h2532 = 64'h00000000FFFFFFFF;
      2'd3: mask__h2532 = 64'hFFFFFFFFFFFFFFFF;
    endcase
  end
  always@(rg_req)
  begin
    case (rg_req[104:103])
      2'b0: y__h2763 = 64'hFFFFFFFFFFFFFF00;
      2'b01: y__h2763 = 64'hFFFFFFFFFFFF0000;
      2'b10: y__h2763 = 64'hFFFFFFFF00000000;
      2'd3: y__h2763 = 64'd0;
    endcase
  end
  always@(nmio_fabric_adapter_f_wr_data_control$D_OUT)
  begin
    case (nmio_fabric_adapter_f_wr_data_control$D_OUT[12:11])
      2'b0: strb__h6724 = 8'h01;
      2'b01: strb__h6724 = 8'h03;
      2'b10: strb__h6724 = 8'h0F;
      2'd3: strb__h6724 = 8'hFF;
    endcase
  end
  always@(rg_req or ld_val_bits__h2262)
  begin
    case (rg_req[104:103])
      2'b0:
	  CASE_rg_req_BITS_104_TO_103_0b0_ld_val_bits262_ETC__q16 =
	      ld_val_bits__h2262[7];
      2'b01:
	  CASE_rg_req_BITS_104_TO_103_0b0_ld_val_bits262_ETC__q16 =
	      ld_val_bits__h2262[15];
      2'b10:
	  CASE_rg_req_BITS_104_TO_103_0b0_ld_val_bits262_ETC__q16 =
	      ld_val_bits__h2262[31];
      2'd3:
	  CASE_rg_req_BITS_104_TO_103_0b0_ld_val_bits262_ETC__q16 =
	      ld_val_bits__h2262[63];
    endcase
  end
  always@(rg_req or
	  final_st_val__h3242 or
	  final_st_val__h3136 or
	  w2__h3017 or
	  final_st_val__h3214 or
	  final_st_val__h3222 or
	  final_st_val__h3218 or
	  final_st_val__h3237 or final_st_val__h3226 or final_st_val__h3231)
  begin
    case (rg_req[6:2])
      5'b0: _theResult_____2__h3022 = final_st_val__h3136;
      5'b00001: _theResult_____2__h3022 = w2__h3017;
      5'b00100: _theResult_____2__h3022 = final_st_val__h3214;
      5'b01000: _theResult_____2__h3022 = final_st_val__h3222;
      5'b01100: _theResult_____2__h3022 = final_st_val__h3218;
      5'b10000: _theResult_____2__h3022 = final_st_val__h3237;
      5'b11000: _theResult_____2__h3022 = final_st_val__h3226;
      5'b11100: _theResult_____2__h3022 = final_st_val__h3231;
      default: _theResult_____2__h3022 = final_st_val__h3242;
    endcase
  end
  always@(rg_req or
	  result__h11848 or
	  result__h11879 or
	  result__h11907 or
	  result__h11935 or
	  result__h11963 or
	  result__h11991 or result__h12019 or result__h12047)
  begin
    case (rg_req[73:71])
      3'h0:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d614 =
	      result__h11848;
      3'h1:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d614 =
	      result__h11879;
      3'h2:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d614 =
	      result__h11907;
      3'h3:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d614 =
	      result__h11935;
      3'h4:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d614 =
	      result__h11963;
      3'h5:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d614 =
	      result__h11991;
      3'h6:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d614 =
	      result__h12019;
      3'h7:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d614 =
	      result__h12047;
    endcase
  end
  always@(rg_req or
	  result__h12092 or
	  result__h12120 or
	  result__h12148 or
	  result__h12176 or
	  result__h12204 or
	  result__h12232 or result__h12260 or result__h12288)
  begin
    case (rg_req[73:71])
      3'h0:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d631 =
	      result__h12092;
      3'h1:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d631 =
	      result__h12120;
      3'h2:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d631 =
	      result__h12148;
      3'h3:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d631 =
	      result__h12176;
      3'h4:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d631 =
	      result__h12204;
      3'h5:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d631 =
	      result__h12232;
      3'h6:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d631 =
	      result__h12260;
      3'h7:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d631 =
	      result__h12288;
    endcase
  end
  always@(rg_req or
	  result__h12333 or
	  result__h12361 or result__h12389 or result__h12417)
  begin
    case (rg_req[73:71])
      3'h0:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d644 =
	      result__h12333;
      3'h2:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d644 =
	      result__h12361;
      3'h4:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d644 =
	      result__h12389;
      3'h6:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d644 =
	      result__h12417;
      default: IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d644 =
		   64'd0;
    endcase
  end
  always@(rg_req or
	  result__h12458 or
	  result__h12486 or result__h12514 or result__h12542)
  begin
    case (rg_req[73:71])
      3'h0:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d653 =
	      result__h12458;
      3'h2:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d653 =
	      result__h12486;
      3'h4:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d653 =
	      result__h12514;
      3'h6:
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d653 =
	      result__h12542;
      default: IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d653 =
		   64'd0;
    endcase
  end
  always@(rg_req or result__h12583 or result__h12611)
  begin
    case (rg_req[73:71])
      3'h0:
	  CASE_rg_req_BITS_73_TO_71_0x0_result2583_0x4_r_ETC__q18 =
	      result__h12583;
      3'h4:
	  CASE_rg_req_BITS_73_TO_71_0x0_result2583_0x4_r_ETC__q18 =
	      result__h12611;
      default: CASE_rg_req_BITS_73_TO_71_0x0_result2583_0x4_r_ETC__q18 =
		   64'd0;
    endcase
  end
  always@(rg_req or result__h12650 or result__h12678)
  begin
    case (rg_req[73:71])
      3'h0:
	  CASE_rg_req_BITS_73_TO_71_0x0_result2650_0x4_r_ETC__q19 =
	      result__h12650;
      3'h4:
	  CASE_rg_req_BITS_73_TO_71_0x0_result2650_0x4_r_ETC__q19 =
	      result__h12678;
      default: CASE_rg_req_BITS_73_TO_71_0x0_result2650_0x4_r_ETC__q19 =
		   64'd0;
    endcase
  end
  always@(rg_req or
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d614 or
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d644 or
	  CASE_rg_req_BITS_73_TO_71_0x0_result2583_0x4_r_ETC__q18 or
	  dtcm$DOA or
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d631 or
	  IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d653 or
	  CASE_rg_req_BITS_73_TO_71_0x0_result2650_0x4_r_ETC__q19)
  begin
    case (rg_req[105:103])
      3'b0:
	  ram_out__h10978 =
	      IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d614;
      3'b001:
	  ram_out__h10978 =
	      IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_SEX_ETC___d644;
      3'b010:
	  ram_out__h10978 =
	      CASE_rg_req_BITS_73_TO_71_0x0_result2583_0x4_r_ETC__q18;
      3'b011: ram_out__h10978 = (rg_req[73:71] == 3'h0) ? dtcm$DOA : 64'd0;
      3'b100:
	  ram_out__h10978 =
	      IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d631;
      3'b101:
	  ram_out__h10978 =
	      IF_rg_req_0_BITS_73_TO_71_7_EQ_0x0_82_THEN_0_C_ETC___d653;
      3'b110:
	  ram_out__h10978 =
	      CASE_rg_req_BITS_73_TO_71_0x0_result2650_0x4_r_ETC__q19;
      3'd7: ram_out__h10978 = 64'd0;
    endcase
  end
  always@(rg_req or
	  final_st_val__h13015 or
	  final_st_val__h12909 or
	  w2__h3017 or
	  final_st_val__h12987 or
	  final_st_val__h12995 or
	  final_st_val__h12991 or
	  final_st_val__h13010 or
	  final_st_val__h12999 or final_st_val__h13004)
  begin
    case (rg_req[6:2])
      5'b0: _theResult_____2__h12795 = final_st_val__h12909;
      5'b00001: _theResult_____2__h12795 = w2__h3017;
      5'b00100: _theResult_____2__h12795 = final_st_val__h12987;
      5'b01000: _theResult_____2__h12795 = final_st_val__h12995;
      5'b01100: _theResult_____2__h12795 = final_st_val__h12991;
      5'b10000: _theResult_____2__h12795 = final_st_val__h13010;
      5'b11000: _theResult_____2__h12795 = final_st_val__h12999;
      5'b11100: _theResult_____2__h12795 = final_st_val__h13004;
      default: _theResult_____2__h12795 = final_st_val__h13015;
    endcase
  end
  always@(rg_req_0_BITS_102_TO_71_8_MINUS_soc_map_m_dtcm_ETC___d708)
  begin
    case (rg_req_0_BITS_102_TO_71_8_MINUS_soc_map_m_dtcm_ETC___d708[2:0])
      3'h0: _theResult___fst__h13411 = 8'h01;
      3'h1: _theResult___fst__h13411 = 8'h02;
      3'h2: _theResult___fst__h13411 = 8'h04;
      3'h3: _theResult___fst__h13411 = 8'h08;
      3'h4: _theResult___fst__h13411 = 8'h10;
      3'h5: _theResult___fst__h13411 = 8'h20;
      3'h6: _theResult___fst__h13411 = 8'h40;
      3'h7: _theResult___fst__h13411 = 8'h80;
    endcase
  end
  always@(rg_req_0_BITS_102_TO_71_8_MINUS_soc_map_m_dtcm_ETC___d708 or
	  _theResult___snd__h13428 or
	  st_value__h13164 or
	  _theResult___snd__h13416 or
	  _theResult___snd__h13475 or
	  _theResult___snd__h13420 or
	  _theResult___snd__h13508 or
	  _theResult___snd__h13424 or _theResult___snd__h13479)
  begin
    case (rg_req_0_BITS_102_TO_71_8_MINUS_soc_map_m_dtcm_ETC___d708[2:0])
      3'h0: _theResult___snd__h13412 = st_value__h13164;
      3'h1: _theResult___snd__h13412 = _theResult___snd__h13416;
      3'h2: _theResult___snd__h13412 = _theResult___snd__h13475;
      3'h3: _theResult___snd__h13412 = _theResult___snd__h13420;
      3'h4: _theResult___snd__h13412 = _theResult___snd__h13508;
      3'h5: _theResult___snd__h13412 = _theResult___snd__h13424;
      3'h6: _theResult___snd__h13412 = _theResult___snd__h13479;
      3'd7: _theResult___snd__h13412 = _theResult___snd__h13428;
    endcase
  end
  always@(rg_req_0_BITS_102_TO_71_8_MINUS_soc_map_m_dtcm_ETC___d708)
  begin
    case (rg_req_0_BITS_102_TO_71_8_MINUS_soc_map_m_dtcm_ETC___d708[2:0])
      3'h0: _theResult___fst__h13470 = 8'h03;
      3'h2: _theResult___fst__h13470 = 8'h0C;
      3'h4: _theResult___fst__h13470 = 8'h30;
      3'h6: _theResult___fst__h13470 = 8'hC0;
      default: _theResult___fst__h13470 = 8'd0;
    endcase
  end
  always@(rg_req_0_BITS_102_TO_71_8_MINUS_soc_map_m_dtcm_ETC___d708 or
	  _theResult___snd__h13479 or
	  st_value__h13164 or
	  _theResult___snd__h13475 or _theResult___snd__h13508)
  begin
    case (rg_req_0_BITS_102_TO_71_8_MINUS_soc_map_m_dtcm_ETC___d708[2:0])
      3'h0: _theResult___snd__h13471 = st_value__h13164;
      3'h2: _theResult___snd__h13471 = _theResult___snd__h13475;
      3'h4: _theResult___snd__h13471 = _theResult___snd__h13508;
      default: _theResult___snd__h13471 = _theResult___snd__h13479;
    endcase
  end
  always@(rg_req_0_BITS_102_TO_71_8_MINUS_soc_map_m_dtcm_ETC___d708)
  begin
    case (rg_req_0_BITS_102_TO_71_8_MINUS_soc_map_m_dtcm_ETC___d708[2:0])
      3'h0: _theResult___fst__h13503 = 8'h0F;
      3'h4: _theResult___fst__h13503 = 8'hF0;
      default: _theResult___fst__h13503 = 8'd0;
    endcase
  end
  always@(rg_req or
	  _theResult___snd__h13515 or
	  _theResult___snd__h13412 or
	  _theResult___snd__h13471 or _theResult___snd__h13504)
  begin
    case (rg_req[104:103])
      2'b0: ram_st_value__h13167 = _theResult___snd__h13412;
      2'b01: ram_st_value__h13167 = _theResult___snd__h13471;
      2'b10: ram_st_value__h13167 = _theResult___snd__h13504;
      2'd3: ram_st_value__h13167 = _theResult___snd__h13515;
    endcase
  end
  always@(rg_req or
	  _theResult___fst__h13411 or
	  _theResult___fst__h13470 or
	  _theResult___fst__h13503 or _theResult___fst__h13514)
  begin
    case (rg_req[104:103])
      2'b0: byte_en__h13166 = _theResult___fst__h13411;
      2'b01: byte_en__h13166 = _theResult___fst__h13470;
      2'b10: byte_en__h13166 = _theResult___fst__h13503;
      2'd3: byte_en__h13166 = _theResult___fst__h13514;
    endcase
  end
  always@(w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901)
  begin
    case (w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901[2:0])
      3'h0: _theResult___fst__h16655 = 8'h01;
      3'h1: _theResult___fst__h16655 = 8'h02;
      3'h2: _theResult___fst__h16655 = 8'h04;
      3'h3: _theResult___fst__h16655 = 8'h08;
      3'h4: _theResult___fst__h16655 = 8'h10;
      3'h5: _theResult___fst__h16655 = 8'h20;
      3'h6: _theResult___fst__h16655 = 8'h40;
      3'h7: _theResult___fst__h16655 = 8'h80;
    endcase
  end
  always@(w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901 or
	  _theResult___snd__h16672 or
	  w_dmem_req$wget or
	  _theResult___snd__h16660 or
	  _theResult___snd__h16719 or
	  _theResult___snd__h16664 or
	  _theResult___snd__h16752 or
	  _theResult___snd__h16668 or _theResult___snd__h16723)
  begin
    case (w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901[2:0])
      3'h0: _theResult___snd__h16656 = w_dmem_req$wget[70:7];
      3'h1: _theResult___snd__h16656 = _theResult___snd__h16660;
      3'h2: _theResult___snd__h16656 = _theResult___snd__h16719;
      3'h3: _theResult___snd__h16656 = _theResult___snd__h16664;
      3'h4: _theResult___snd__h16656 = _theResult___snd__h16752;
      3'h5: _theResult___snd__h16656 = _theResult___snd__h16668;
      3'h6: _theResult___snd__h16656 = _theResult___snd__h16723;
      3'd7: _theResult___snd__h16656 = _theResult___snd__h16672;
    endcase
  end
  always@(w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901)
  begin
    case (w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901[2:0])
      3'h0: _theResult___fst__h16714 = 8'h03;
      3'h2: _theResult___fst__h16714 = 8'h0C;
      3'h4: _theResult___fst__h16714 = 8'h30;
      3'h6: _theResult___fst__h16714 = 8'hC0;
      default: _theResult___fst__h16714 = 8'd0;
    endcase
  end
  always@(w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901 or
	  _theResult___snd__h16723 or
	  w_dmem_req$wget or
	  _theResult___snd__h16719 or _theResult___snd__h16752)
  begin
    case (w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901[2:0])
      3'h0: _theResult___snd__h16715 = w_dmem_req$wget[70:7];
      3'h2: _theResult___snd__h16715 = _theResult___snd__h16719;
      3'h4: _theResult___snd__h16715 = _theResult___snd__h16752;
      default: _theResult___snd__h16715 = _theResult___snd__h16723;
    endcase
  end
  always@(w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901)
  begin
    case (w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901[2:0])
      3'h0: _theResult___fst__h16747 = 8'h0F;
      3'h4: _theResult___fst__h16747 = 8'hF0;
      default: _theResult___fst__h16747 = 8'd0;
    endcase
  end
  always@(w_dmem_req$wget or
	  _theResult___snd__h16656 or
	  _theResult___snd__h16715 or _theResult___snd__h16748)
  begin
    case (w_dmem_req$wget[104:103])
      2'b0: ram_st_value__h16415 = _theResult___snd__h16656;
      2'b01: ram_st_value__h16415 = _theResult___snd__h16715;
      2'b10: ram_st_value__h16415 = _theResult___snd__h16748;
      2'd3: ram_st_value__h16415 = w_dmem_req$wget[70:7];
    endcase
  end
  always@(w_dmem_req$wget or
	  _theResult___fst__h16655 or
	  _theResult___fst__h16714 or
	  _theResult___fst__h16747 or _theResult___fst__h16758)
  begin
    case (w_dmem_req$wget[104:103])
      2'b0: byte_en__h16414 = _theResult___fst__h16655;
      2'b01: byte_en__h16414 = _theResult___fst__h16714;
      2'b10: byte_en__h16414 = _theResult___fst__h16747;
      2'b11: byte_en__h16414 = _theResult___fst__h16758;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        dma_port_rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	fabric_adapter_rg_htrans <= `BSV_ASSIGNMENT_DELAY 2'd0;
	fabric_adapter_rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	mmio_rg_err <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mmio_rg_final_st_val <= `BSV_ASSIGNMENT_DELAY 64'd0;
	mmio_rg_ld_val <= `BSV_ASSIGNMENT_DELAY 64'd0;
	mmio_rg_mmio_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	nmio_fabric_adapter_rg_wr_beat <= `BSV_ASSIGNMENT_DELAY 8'd0;
	nmio_fabric_adapter_rg_wr_rsps_pending <= `BSV_ASSIGNMENT_DELAY 1'd0;
	nmio_fabric_adapter_rg_write_error <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dmem_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_exc <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_word64 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_result_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_tohost_value <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_watch_tohost <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (dma_port_rg_state$EN)
	  dma_port_rg_state <= `BSV_ASSIGNMENT_DELAY dma_port_rg_state$D_IN;
	if (fabric_adapter_rg_htrans$EN)
	  fabric_adapter_rg_htrans <= `BSV_ASSIGNMENT_DELAY
	      fabric_adapter_rg_htrans$D_IN;
	if (fabric_adapter_rg_state$EN)
	  fabric_adapter_rg_state <= `BSV_ASSIGNMENT_DELAY
	      fabric_adapter_rg_state$D_IN;
	if (mmio_rg_err$EN)
	  mmio_rg_err <= `BSV_ASSIGNMENT_DELAY mmio_rg_err$D_IN;
	if (mmio_rg_final_st_val$EN)
	  mmio_rg_final_st_val <= `BSV_ASSIGNMENT_DELAY
	      mmio_rg_final_st_val$D_IN;
	if (mmio_rg_ld_val$EN)
	  mmio_rg_ld_val <= `BSV_ASSIGNMENT_DELAY mmio_rg_ld_val$D_IN;
	if (mmio_rg_mmio_state$EN)
	  mmio_rg_mmio_state <= `BSV_ASSIGNMENT_DELAY mmio_rg_mmio_state$D_IN;
	if (nmio_fabric_adapter_rg_wr_beat$EN)
	  nmio_fabric_adapter_rg_wr_beat <= `BSV_ASSIGNMENT_DELAY
	      nmio_fabric_adapter_rg_wr_beat$D_IN;
	if (nmio_fabric_adapter_rg_wr_rsps_pending$EN)
	  nmio_fabric_adapter_rg_wr_rsps_pending <= `BSV_ASSIGNMENT_DELAY
	      nmio_fabric_adapter_rg_wr_rsps_pending$D_IN;
	if (nmio_fabric_adapter_rg_write_error$EN)
	  nmio_fabric_adapter_rg_write_error <= `BSV_ASSIGNMENT_DELAY
	      nmio_fabric_adapter_rg_write_error$D_IN;
	if (rg_dmem_state$EN)
	  rg_dmem_state <= `BSV_ASSIGNMENT_DELAY rg_dmem_state$D_IN;
	if (rg_exc$EN) rg_exc <= `BSV_ASSIGNMENT_DELAY rg_exc$D_IN;
	if (rg_lrsc_valid$EN)
	  rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY rg_lrsc_valid$D_IN;
	if (rg_lrsc_word64$EN)
	  rg_lrsc_word64 <= `BSV_ASSIGNMENT_DELAY rg_lrsc_word64$D_IN;
	if (rg_result_valid$EN)
	  rg_result_valid <= `BSV_ASSIGNMENT_DELAY rg_result_valid$D_IN;
	if (rg_tohost_value$EN)
	  rg_tohost_value <= `BSV_ASSIGNMENT_DELAY rg_tohost_value$D_IN;
	if (rg_watch_tohost$EN)
	  rg_watch_tohost <= `BSV_ASSIGNMENT_DELAY rg_watch_tohost$D_IN;
      end
    if (fabric_adapter_rg_haddr$EN)
      fabric_adapter_rg_haddr <= `BSV_ASSIGNMENT_DELAY
	  fabric_adapter_rg_haddr$D_IN;
    if (fabric_adapter_rg_hsize$EN)
      fabric_adapter_rg_hsize <= `BSV_ASSIGNMENT_DELAY
	  fabric_adapter_rg_hsize$D_IN;
    if (fabric_adapter_rg_hwdata$EN)
      fabric_adapter_rg_hwdata <= `BSV_ASSIGNMENT_DELAY
	  fabric_adapter_rg_hwdata$D_IN;
    if (fabric_adapter_rg_hwrite$EN)
      fabric_adapter_rg_hwrite <= `BSV_ASSIGNMENT_DELAY
	  fabric_adapter_rg_hwrite$D_IN;
    if (nmio_fabric_adapter_rg_rd_beat$EN)
      nmio_fabric_adapter_rg_rd_beat <= `BSV_ASSIGNMENT_DELAY
	  nmio_fabric_adapter_rg_rd_beat$D_IN;
    if (nmio_fabric_adapter_rg_rd_client_id$EN)
      nmio_fabric_adapter_rg_rd_client_id <= `BSV_ASSIGNMENT_DELAY
	  nmio_fabric_adapter_rg_rd_client_id$D_IN;
    if (nmio_fabric_adapter_rg_rd_data_lower32$EN)
      nmio_fabric_adapter_rg_rd_data_lower32 <= `BSV_ASSIGNMENT_DELAY
	  nmio_fabric_adapter_rg_rd_data_lower32$D_IN;
    if (nmio_fabric_adapter_rg_rd_data_lower32_ok$EN)
      nmio_fabric_adapter_rg_rd_data_lower32_ok <= `BSV_ASSIGNMENT_DELAY
	  nmio_fabric_adapter_rg_rd_data_lower32_ok$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_lrsc_pa$EN) rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY rg_lrsc_pa$D_IN;
    if (rg_lrsc_size$EN)
      rg_lrsc_size <= `BSV_ASSIGNMENT_DELAY rg_lrsc_size$D_IN;
    if (rg_req$EN) rg_req <= `BSV_ASSIGNMENT_DELAY rg_req$D_IN;
    if (rg_tohost_addr$EN)
      rg_tohost_addr <= `BSV_ASSIGNMENT_DELAY rg_tohost_addr$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dma_port_rg_state = 2'h2;
    fabric_adapter_rg_haddr = 32'hAAAAAAAA;
    fabric_adapter_rg_hsize = 3'h2;
    fabric_adapter_rg_htrans = 2'h2;
    fabric_adapter_rg_hwdata = 32'hAAAAAAAA;
    fabric_adapter_rg_hwrite = 1'h0;
    fabric_adapter_rg_state = 2'h2;
    mmio_rg_err = 1'h0;
    mmio_rg_final_st_val = 64'hAAAAAAAAAAAAAAAA;
    mmio_rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    mmio_rg_mmio_state = 2'h2;
    nmio_fabric_adapter_rg_rd_beat = 8'hAA;
    nmio_fabric_adapter_rg_rd_client_id = 1'h0;
    nmio_fabric_adapter_rg_rd_data_lower32 = 32'hAAAAAAAA;
    nmio_fabric_adapter_rg_rd_data_lower32_ok = 1'h0;
    nmio_fabric_adapter_rg_wr_beat = 8'hAA;
    nmio_fabric_adapter_rg_wr_rsps_pending = 1'h0;
    nmio_fabric_adapter_rg_write_error = 1'h0;
    rg_dmem_state = 2'h2;
    rg_exc = 1'h0;
    rg_exc_code = 4'hA;
    rg_lrsc_pa = 32'hAAAAAAAA;
    rg_lrsc_size = 2'h2;
    rg_lrsc_valid = 1'h0;
    rg_lrsc_word64 = 2'h2;
    rg_req = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_result_valid = 1'h0;
    rg_tohost_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_tohost_value = 64'hAAAAAAAAAAAAAAAA;
    rg_watch_tohost = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_rg_lrsc_v_ETC___d533)
	begin
	  v__h11253 = $stime;
	  #0;
	end
    v__h11247 = v__h11253 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_rg_lrsc_v_ETC___d533)
	$display("%0d: %m.fav_amo_write_to_ram: SC success", v__h11247);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_rg_lrsc_v_ETC___d533)
	$display("      (va %08h) (data %016h)",
		 rg_req[102:71],
		 rg_req[70:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_NOT_rg_lr_ETC___d541)
	begin
	  v__h11412 = $stime;
	  #0;
	end
    v__h11406 = v__h11412 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_NOT_rg_lr_ETC___d541)
	$display("%0d: %m.fav_amo_write_to_ram: SC fail", v__h11406);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  rg_req_0_BITS_6_TO_2_7_EQ_0b11_8_AND_NOT_rg_lr_ETC___d541)
	$display("      (va %08h) (data %016h)",
		 rg_req[102:71],
		 rg_req[70:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  rg_req[6:2] != 5'b00010 &&
	  rg_req[6:2] != 5'b00011 &&
	  verbosity != 2'd0)
	begin
	  v__h11644 = $stime;
	  #0;
	end
    v__h11638 = v__h11644 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  rg_req[6:2] != 5'b00010 &&
	  rg_req[6:2] != 5'b00011 &&
	  verbosity != 2'd0)
	$write("%0d: %m.fav_amo_write_to_ram: AMO ", v__h11638);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b0)
	$write("ADD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b00001)
	$write("SWAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b00100)
	$write("XOR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b01100)
	$write("AND");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b01000)
	$write("OR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b10000)
	$write("MIN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b10100)
	$write("MAX");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b11000)
	$write("MINU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  rg_req[6:2] != 5'b00010 &&
	  rg_req[6:2] != 5'b00011 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] != 5'b0 &&
	  rg_req[6:2] != 5'b00001 &&
	  rg_req[6:2] != 5'b00100 &&
	  rg_req[6:2] != 5'b01100 &&
	  rg_req[6:2] != 5'b01000 &&
	  rg_req[6:2] != 5'b10000 &&
	  rg_req[6:2] != 5'b10100 &&
	  rg_req[6:2] != 5'b11000)
	$write("MAXU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  rg_req[6:2] != 5'b00010 &&
	  rg_req[6:2] != 5'b00011 &&
	  verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  rg_req[6:2] != 5'b00010 &&
	  rg_req[6:2] != 5'b00011 &&
	  verbosity != 2'd0)
	$display("      (va %08h) (rs2_val %016h) (f3 %03b)",
		 rg_req[102:71],
		 rg_req[70:7],
		 rg_req[105:103]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  rg_req[6:2] != 5'b00010 &&
	  rg_req[6:2] != 5'b00011 &&
	  verbosity != 2'd0)
	$display("      (load-result %016h)", ram_out__h10978);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  rg_req[6:2] != 5'b00010 &&
	  rg_req[6:2] != 5'b00011 &&
	  verbosity != 2'd0)
	$write("      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b0)
	$write("ADD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b00001)
	$write("SWAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b00100)
	$write("XOR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b01100)
	$write("AND");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b01000)
	$write("OR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b10000)
	$write("MIN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b10100)
	$write("MAX");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] == 5'b11000)
	$write("MINU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  rg_req[6:2] != 5'b00010 &&
	  rg_req[6:2] != 5'b00011 &&
	  verbosity != 2'd0 &&
	  rg_req[6:2] != 5'b0 &&
	  rg_req[6:2] != 5'b00001 &&
	  rg_req[6:2] != 5'b00100 &&
	  rg_req[6:2] != 5'b01100 &&
	  rg_req[6:2] != 5'b01000 &&
	  rg_req[6:2] != 5'b10000 &&
	  rg_req[6:2] != 5'b10100 &&
	  rg_req[6:2] != 5'b11000)
	$write("MAXU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  rg_req[6:2] != 5'b00010 &&
	  rg_req[6:2] != 5'b00011 &&
	  verbosity != 2'd0)
	$write(" (%016h, %016h) -> %016h",
	       ram_out__h10978,
	       rg_req[70:7],
	       v__h11600,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  (rg_req[6:2] == 5'b00011 || rg_req[6:2] != 5'b00010) &&
	  NOT_rg_req_0_BITS_107_TO_106_1_EQ_2_5_6_OR_NOT_ETC___d705)
	$display("      (RAM byte_en %08b) (RAM addr %08h) (RAM data %016h)",
		 byte_en__h13166,
		 rg_req_0_BITS_102_TO_71_8_MINUS_soc_map_m_dtcm_ETC___d708[14:3],
		 ram_st_value__h13167);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  rg_req[6:2] == 5'b00010 &&
	  verbosity != 2'd0)
	begin
	  v__h14753 = $stime;
	  #0;
	end
    v__h14747 = v__h14753 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_amo_rsp && rg_req[107:106] == 2'd2 &&
	  rg_req[6:2] == 5'b00010 &&
	  verbosity != 2'd0)
	$display("%0d: %m.rl_amo_rsp: LR-hit", v__h14747);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity != 2'd0)
	begin
	  v__h15146 = $stime;
	  #0;
	end
    v__h15140 = v__h15146 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && verbosity != 2'd0)
	$display("%0d: %m.rl_tcm_rsp: (va %08h) (word64 %016h)",
		 v__h15140,
		 rg_req[102:71],
		 _theResult____h15028);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && NOT_verbosity_ULT_2_44___d145)
	$write("     (ram_out %016h) (rg_req ", ram_out__h10978);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && NOT_verbosity_ULT_2_44___d145)
	$write("MMU_Cache_Req { ", "op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && NOT_verbosity_ULT_2_44___d145 &&
	  rg_req[107:106] == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && NOT_verbosity_ULT_2_44___d145 &&
	  rg_req[107:106] == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && NOT_verbosity_ULT_2_44___d145 &&
	  rg_req[107:106] != 2'd0 &&
	  rg_req[107:106] != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && NOT_verbosity_ULT_2_44___d145)
	$write(", ", "f3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && NOT_verbosity_ULT_2_44___d145)
	$write("'h%h", rg_req[105:103]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && NOT_verbosity_ULT_2_44___d145)
	$write(", ", "va: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && NOT_verbosity_ULT_2_44___d145)
	$write("'h%h", rg_req[102:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && NOT_verbosity_ULT_2_44___d145)
	$write(", ", "st_value: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && NOT_verbosity_ULT_2_44___d145)
	$write("'h%h", rg_req[70:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && NOT_verbosity_ULT_2_44___d145)
	$write(", ", "amo_funct7: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && NOT_verbosity_ULT_2_44___d145)
	$write("'h%h", rg_req[6:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_tcm_rsp && NOT_verbosity_ULT_2_44___d145)
	$write(" )", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mmio_rsp && verbosity != 2'd0)
	begin
	  v__h15442 = $stime;
	  #0;
	end
    v__h15436 = v__h15442 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mmio_rsp && verbosity != 2'd0)
	$display("%0d: %m.rl_mmio_rsp: (word64 %016h) (final_st_val %016h)",
		 v__h15436,
		 mmio_rg_ld_val,
		 mmio_rg_final_st_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_req && verbosity != 2'd0)
	begin
	  v__h1898 = $stime;
	  #0;
	end
    v__h1892 = v__h1898 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_req && verbosity != 2'd0)
	$display("%0d: %m.rl_read_req: f3 %0h vaddr %0h  paddr %0h",
		 v__h1892,
		 rg_req[105:103],
		 rg_req[102:71],
		 rg_req[102:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_AMO_SC && verbosity != 2'd0)
	begin
	  v__h4014 = $stime;
	  #0;
	end
    v__h4008 = v__h4014 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_AMO_SC && verbosity != 2'd0)
	$display("%0d: %m.rl_AMO_SC; f3 %0h  vaddr %0h  paddr %0h  st_value %0h",
		 v__h4008,
		 rg_req[105:103],
		 rg_req[102:71],
		 rg_req[102:71],
		 rg_req[70:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_AMO_SC && verbosity != 2'd0)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_AMO_SC && verbosity != 2'd0)
	$display("    goto MMIO_DONE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data && verbosity != 2'd0)
	begin
	  v__h5528 = $stime;
	  #0;
	end
    v__h5522 = v__h5528 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data && verbosity != 2'd0)
	$display("%0d: %m.rl_read_data: ", v__h5522);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data &&
	  verbosity != 2'd0 &&
	  nmio_fabric_adapter_rg_rd_client_id)
	$write("     single");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data &&
	  verbosity != 2'd0 &&
	  !nmio_fabric_adapter_rg_rd_client_id)
	$write("    line (beat %0d)", nmio_fabric_adapter_rg_rd_beat);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data && verbosity != 2'd0)
	$write(" ok %0d data %0h",
	       IF_nmio_fabric_adapter_f_rd_rsp_control_first__ETC___d200,
	       data__h5332);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data &&
	  verbosity != 2'd0 &&
	  !nmio_fabric_adapter_rg_rd_beat[0])
	$write(" (lower 32b of 64b)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data && verbosity != 2'd0)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req &&
	  verbosity != 2'd0)
	begin
	  v__h5822 = $stime;
	  #0;
	end
    v__h5816 = v__h5822 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req &&
	  verbosity != 2'd0)
	$write("%0d: %m.rl_single_read_req:\n    AXI4_Rd_Addr{araddr %0h arlen 0 (burst length 1) ",
	       v__h5816,
	       f_nmio_req$D_OUT[33:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req &&
	  verbosity != 2'd0 &&
	  f_nmio_req$D_OUT[1:0] == 2'd0)
	$write("sz1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req &&
	  verbosity != 2'd0 &&
	  f_nmio_req$D_OUT[1:0] == 2'd1)
	$write("sz2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req &&
	  verbosity != 2'd0 &&
	  f_nmio_req$D_OUT[1:0] == 2'd2)
	$write("sz4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req &&
	  verbosity != 2'd0 &&
	  f_nmio_req$D_OUT[1:0] != 2'd0 &&
	  f_nmio_req$D_OUT[1:0] != 2'd1 &&
	  f_nmio_req$D_OUT[1:0] != 2'd2)
	$write("sz8");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_read_req &&
	  verbosity != 2'd0)
	$write("}", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 2'd0)
	begin
	  v__h6284 = $stime;
	  #0;
	end
    v__h6278 = v__h6284 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 2'd0)
	$write("%0d: %m.rl_write_rsp: ", v__h6278);
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 2'd0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 2'd0)
	$write("'h%h",
	       nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 2'd0)
	$write("'h%h",
	       nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	begin
	  v__h6335 = $stime;
	  #0;
	end
    v__h6329 = v__h6335 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	$display("%0d: %m.rl_write_rsp: FABRIC RESPONSE ERROR", v__h6329);
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	$write("'h%h",
	       nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	$write("'h%h",
	       nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  nmio_fabric_adapter_rg_wr_rsps_pending &&
	  nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 &&
	  verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	begin
	  v__h6187 = $stime;
	  #0;
	end
    v__h6181 = v__h6187 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	$display("%0d: %m.rl_write_rsp: ERROR not expecting any write-response:",
		 v__h6181);
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	$write("'h%h",
	       nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	$write("'h%h",
	       nmio_fabric_adapter_master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (nmio_fabric_adapter_master_xactor_f_wr_resp$EMPTY_N &&
	  !nmio_fabric_adapter_rg_wr_rsps_pending)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	  verbosity != 2'd0)
	begin
	  v__h7350 = $stime;
	  #0;
	end
    v__h7344 = v__h7350 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	  verbosity != 2'd0)
	$write("%0d: %m.rl_single_write_req: AXI4_Wr_Addr{awaddr %0h awlen %0d burst-length %0d ",
	       v__h7344,
	       f_nmio_req$D_OUT[33:2],
	       fabric_len__h5900,
	       num_beats__h5899);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	  verbosity != 2'd0 &&
	  x__h5957 == 3'b0)
	$write("sz1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	  verbosity != 2'd0 &&
	  x__h5957 == 3'b001)
	$write("sz2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	  verbosity != 2'd0 &&
	  x__h5957 == 3'b010)
	$write("sz4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	  verbosity != 2'd0 &&
	  x__h5957 == 3'b011)
	$write("sz8");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	  verbosity != 2'd0 &&
	  x__h5957 == 3'b100)
	$write("sz16");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	  verbosity != 2'd0 &&
	  x__h5957 == 3'b101)
	$write("sz32");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	  verbosity != 2'd0 &&
	  x__h5957 == 3'b110)
	$write("sz64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	  verbosity != 2'd0 &&
	  x__h5957 != 3'b0 &&
	  x__h5957 != 3'b001 &&
	  x__h5957 != 3'b010 &&
	  x__h5957 != 3'b011 &&
	  x__h5957 != 3'b100 &&
	  x__h5957 != 3'b101 &&
	  x__h5957 != 3'b110)
	$write("sz128");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_single_write_req &&
	  verbosity != 2'd0)
	$write(" incr}", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0)
	begin
	  v__h7990 = $stime;
	  #0;
	end
    v__h7984 = v__h7990 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0)
	$write("%0d: %m.rl_nseq_req: (addr 0x%08h) ",
	       v__h7984,
	       f_mem_req$D_OUT[33:2],
	       "(read: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  f_mem_req$D_OUT[34])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  !f_mem_req$D_OUT[34])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0)
	$write(") ", "(size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  IF_f_mem_req_first__43_BITS_1_TO_0_53_EQ_0b11__ETC___d356 == 3'd0)
	$write("AHBL_BITS8");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  IF_f_mem_req_first__43_BITS_1_TO_0_53_EQ_0b11__ETC___d356 == 3'd1)
	$write("AHBL_BITS16");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  IF_f_mem_req_first__43_BITS_1_TO_0_53_EQ_0b11__ETC___d356 == 3'd2)
	$write("AHBL_BITS32");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  IF_f_mem_req_first__43_BITS_1_TO_0_53_EQ_0b11__ETC___d356 == 3'd3)
	$write("AHBL_BITS64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  IF_f_mem_req_first__43_BITS_1_TO_0_53_EQ_0b11__ETC___d356 == 3'd4)
	$write("AHBL_BITS128");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  IF_f_mem_req_first__43_BITS_1_TO_0_53_EQ_0b11__ETC___d356 == 3'd5)
	$write("AHBL_BITS256");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  IF_f_mem_req_first__43_BITS_1_TO_0_53_EQ_0b11__ETC___d356 == 3'd6)
	$write("AHBL_BITS512");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0 &&
	  IF_f_mem_req_first__43_BITS_1_TO_0_53_EQ_0b11__ETC___d356 != 3'd0 &&
	  IF_f_mem_req_first__43_BITS_1_TO_0_53_EQ_0b11__ETC___d356 != 3'd1 &&
	  IF_f_mem_req_first__43_BITS_1_TO_0_53_EQ_0b11__ETC___d356 != 3'd2 &&
	  IF_f_mem_req_first__43_BITS_1_TO_0_53_EQ_0b11__ETC___d356 != 3'd3 &&
	  IF_f_mem_req_first__43_BITS_1_TO_0_53_EQ_0b11__ETC___d356 != 3'd4 &&
	  IF_f_mem_req_first__43_BITS_1_TO_0_53_EQ_0b11__ETC___d356 != 3'd5 &&
	  IF_f_mem_req_first__43_BITS_1_TO_0_53_EQ_0b11__ETC___d356 != 3'd6)
	$write("AHBL_BITS1024");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_nseq_req && verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req &&
	  verbosity != 2'd0 &&
	  !f_mem_req$D_OUT[34] &&
	  f_mem_wdata$EMPTY_N)
	begin
	  v__h8256 = $stime;
	  #0;
	end
    v__h8250 = v__h8256 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req &&
	  verbosity != 2'd0 &&
	  !f_mem_req$D_OUT[34] &&
	  f_mem_wdata$EMPTY_N)
	$display("%0d: %m.rl_complete_nseq_req: (addr 0x%08h) (wdata 0x%08h)",
		 v__h8250,
		 f_mem_req$D_OUT[33:2],
		 x__h8157[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req &&
	  verbosity != 2'd0 &&
	  (f_mem_req$D_OUT[34] || !f_mem_wdata$EMPTY_N))
	begin
	  v__h8282 = $stime;
	  #0;
	end
    v__h8276 = v__h8282 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_complete_nseq_req &&
	  verbosity != 2'd0 &&
	  (f_mem_req$D_OUT[34] || !f_mem_wdata$EMPTY_N))
	$display("%0d: %m.rl_complete_nseq_req: (addr 0x%08h) ",
		 v__h8276,
		 f_mem_req$D_OUT[33:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && verbosity != 2'd0)
	begin
	  v__h2149 = $stime;
	  #0;
	end
    v__h2143 = v__h2149 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && verbosity != 2'd0)
	$display("%0d: %m.rl_read_rsp: vaddr %0h  paddr %0h",
		 v__h2143,
		 rg_req[102:71],
		 rg_req[102:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && verbosity != 2'd0) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && verbosity != 2'd0)
	$write("Read_Data { ", "ok: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && verbosity != 2'd0 &&
	  f_mem_rdata$D_OUT[64])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && verbosity != 2'd0 &&
	  !f_mem_rdata$D_OUT[64])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && verbosity != 2'd0)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && verbosity != 2'd0)
	$write("'h%h", f_mem_rdata$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && verbosity != 2'd0) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && f_mem_rdata$D_OUT[64] &&
	  (rg_req[107:106] == 2'd0 ||
	   rg_req[107:106] == 2'd2 && rg_req[6:2] == 5'b00010) &&
	  verbosity != 2'd0)
	$display("    Load or LR: f3 %0h ld_val %0h",
		 rg_req[105:103],
		 ld_val__h2380);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp &&
	  f_mem_rdata_first__4_BIT_64_5_AND_NOT_rg_req_0_ETC___d139)
	$display("    AMO: f3 %0d  f7 %0h  ld_val %0h st_val %0h",
		 rg_req[105:103],
		 rg_req[6:0],
		 ld_val_bits__h2262,
		 rg_req[70:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp &&
	  f_mem_rdata_first__4_BIT_64_5_AND_NOT_rg_req_0_ETC___d139)
	$display("    => final_ld_val %0h final_st_val %0h",
		 final_ld_val__h2903,
		 final_st_val__h2904);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_read_rsp && !f_mem_rdata$D_OUT[64] &&
	  verbosity != 2'd0)
	$display("    MEM_RSP_ERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_write_req && NOT_verbosity_ULT_2_44___d145)
	begin
	  v__h3579 = $stime;
	  #0;
	end
    v__h3573 = v__h3579 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_write_req && NOT_verbosity_ULT_2_44___d145)
	$display("%0d: %m.rl_write_req; f3 %0h  vaddr %0h  paddr %0h  word64 %0h",
		 v__h3573,
		 rg_req[105:103],
		 rg_req[102:71],
		 rg_req[102:71],
		 rg_req[70:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmio_rl_write_req && verbosity == 2'd3)
	$display("    goto MMIO_DONE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req &&
	  rg_watch_tohost_39_AND_w_dmem_req_wget__06_BIT_ETC___d850)
	begin
	  v__h15688 = $stime;
	  #0;
	end
    v__h15682 = v__h15688 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req &&
	  rg_watch_tohost_39_AND_w_dmem_req_wget__06_BIT_ETC___d850)
	$display("%0d: %m.watch_tohost", v__h15682);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req &&
	  rg_watch_tohost_39_AND_w_dmem_req_wget__06_BIT_ETC___d850 &&
	  w_dmem_req$wget[70:8] == 63'd0)
	$write("    PASS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req &&
	  rg_watch_tohost_39_AND_w_dmem_req_wget__06_BIT_ETC___d850 &&
	  w_dmem_req$wget[70:8] != 63'd0)
	$write("    FAIL <test_%0d>", test_num__h15669);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req &&
	  rg_watch_tohost_39_AND_w_dmem_req_wget__06_BIT_ETC___d850)
	$display("  (<tohost>  addr %08h  data %08h)",
		 w_dmem_req$wget[102:71],
		 w_dmem_req$wget[70:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req &&
	  rg_watch_tohost_39_AND_w_dmem_req_wget__06_BIT_ETC___d850)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && NOT_verbosity_ULE_1_56___d457)
	begin
	  v__h15917 = $stime;
	  #0;
	end
    v__h15911 = v__h15917 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && NOT_verbosity_ULE_1_56___d457)
	$write("%0d: %m.rl_req: ", v__h15911);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && NOT_verbosity_ULE_1_56___d457)
	$write("Req (op ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && NOT_verbosity_ULE_1_56___d457 &&
	  w_dmem_req$wget[107:106] == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && NOT_verbosity_ULE_1_56___d457 &&
	  w_dmem_req$wget[107:106] == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && NOT_verbosity_ULE_1_56___d457 &&
	  w_dmem_req$wget[107:106] != 2'd0 &&
	  w_dmem_req$wget[107:106] != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && NOT_verbosity_ULE_1_56___d457)
	$write(", f3 0x%0h, addr %0h, st_value 0x%0h)",
	       w_dmem_req$wget[105:103],
	       w_dmem_req$wget[102:71],
	       w_dmem_req$wget[70:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req && NOT_verbosity_ULE_1_56___d457) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req &&
	  NOT_soc_map_m_is_itcm_addr_w_dmem_req_wget__06_ETC___d900)
	$display("      (RAM byte_en %08b) (RAM addr %08h) (RAM data %016h)",
		 byte_en__h16414,
		 w_dmem_req_wget__06_BITS_102_TO_71_07_MINUS_so_ETC___d901[14:3],
		 ram_st_value__h16415);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_req &&
	  NOT_soc_map_m_is_itcm_addr_w_dmem_req_wget__06_ETC___d974)
	$display("   dtcm_rd_port.put (word_addr %08h)", word_addr__h17865);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_watch_tohost && verbosity != 2'd0)
	begin
	  v__h19490 = $stime;
	  #0;
	end
    v__h19484 = v__h19490 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_watch_tohost && verbosity != 2'd0)
	$display("%0d: %m.set_watch_tohost: watch %0d, addr %08h",
		 v__h19484,
		 set_watch_tohost_watch_tohost,
		 set_watch_tohost_tohost_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_write_data && verbosity != 2'd0)
	begin
	  v__h7090 = $stime;
	  #0;
	end
    v__h7084 = v__h7090 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_write_data && verbosity != 2'd0)
	$display("%0d: %m.rl_write_data: beat %0d/%0d",
		 v__h7084,
		 nmio_fabric_adapter_rg_wr_beat,
		 nmio_fabric_adapter_f_wr_data_control$D_OUT[7:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_write_data && verbosity != 2'd0)
	$display("    AXI4_Wr_Data{%0h strb %0h last %0d}",
		 data__h6729,
		 strb__h6731,
		 nmio_fabric_adapter_rg_wr_beat_62_EQ_nmio_fabr_ETC___d268);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_read_response && verbosity != 2'd0)
	begin
	  v__h8487 = $stime;
	  #0;
	end
    v__h8481 = v__h8487 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_read_response && verbosity != 2'd0)
	$write("%0d: %m.rl_read_response: ", v__h8481);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_read_response && verbosity != 2'd0)
	$write("Read_Data { ", "ok: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_read_response && verbosity != 2'd0 &&
	  mem_master_HRESP)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_read_response && verbosity != 2'd0 &&
	  !mem_master_HRESP)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_read_response && verbosity != 2'd0)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_read_response && verbosity != 2'd0)
	$write("'h%h", rsp_data__h8373, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_read_response && verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_read_data &&
	  WILL_FIRE_RL_fabric_adapter_rl_read_response)
	$display("Error: \"../src_Core/Near_Mem/Near_Mem_TCM/src/Near_Mem_TCM.bsv\", line 746, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_nmio_fabric_adapter_rl_read_data] and\n  [RL_fabric_adapter_rl_read_response] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_write_response && verbosity != 2'd0)
	begin
	  v__h8622 = $stime;
	  #0;
	end
    v__h8616 = v__h8622 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fabric_adapter_rl_write_response && verbosity != 2'd0)
	$display("%0d: %m.rl_write_response", v__h8616);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_nmio_fabric_adapter_rl_write_data &&
	  WILL_FIRE_RL_fabric_adapter_rl_write_response)
	$display("Error: \"../src_Core/Near_Mem/Near_Mem_TCM/src/Near_Mem_TCM.bsv\", line 747, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_nmio_fabric_adapter_rl_write_data] and\n  [RL_fabric_adapter_rl_write_response] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_rd_addr && verbosity != 2'd0)
	begin
	  v__h9962 = $stime;
	  #0;
	end
    v__h9956 = v__h9962 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_rd_addr && verbosity != 2'd0)
	$display("%0d: %m.rl_bad_rd_addr 0x%0h",
		 v__h9956,
		 dma_port_slave_xactor_f_rd_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_rd_rsp && NOT_verbosity_ULE_1_56___d457)
	begin
	  v__h10269 = $stime;
	  #0;
	end
    v__h10263 = v__h10269 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_rd_rsp && NOT_verbosity_ULE_1_56___d457)
	$display("%0d: %m.rl_rd_rsp: addr 0x%0h => data 0x%0h",
		 v__h10263,
		 dma_port_slave_xactor_f_rd_addr$D_OUT[60:29],
		 word__h10128);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	begin
	  v__h10548 = $stime;
	  #0;
	end
    v__h10542 = v__h10548 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$display("%0d: %m.rl_bad_wr_addr", v__h10542);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_data$D_OUT[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_data$D_OUT[4:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0 &&
	  dma_port_slave_xactor_f_wr_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0 &&
	  !dma_port_slave_xactor_f_wr_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("    => ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", 2'b10);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_bad_wr_addr && verbosity != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_rd_req && NOT_verbosity_ULE_1_56___d457)
	begin
	  v__h10093 = $stime;
	  #0;
	end
    v__h10087 = v__h10093 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_rd_req && NOT_verbosity_ULE_1_56___d457)
	$display("%0d: %m.rl_rd_req: addr 0x%0h",
		 v__h10087,
		 dma_port_slave_xactor_f_rd_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_rd_req && WILL_FIRE_RL_rl_req)
	$display("Error: \"../src_Core/Near_Mem/Near_Mem_TCM/src/Near_Mem_TCM.bsv\", line 753, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_dma_port_rl_rd_req] and\n  [RL_rl_req] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_rd_req && WILL_FIRE_RL_rl_amo_rsp)
	$display("Error: \"../src_Core/Near_Mem/Near_Mem_TCM/src/Near_Mem_TCM.bsv\", line 752, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_dma_port_rl_rd_req] and\n  [RL_rl_amo_rsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	begin
	  v__h10864 = $stime;
	  #0;
	end
    v__h10858 = v__h10864 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$display("%0d: %m.rl_wr_req", v__h10858);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[64:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("'h%h", dma_port_slave_xactor_f_wr_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("'h%h", dma_port_slave_xactor_f_wr_data$D_OUT[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("'h%h", dma_port_slave_xactor_f_wr_data$D_OUT[4:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457 &&
	  dma_port_slave_xactor_f_wr_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457 &&
	  !dma_port_slave_xactor_f_wr_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && NOT_verbosity_ULE_1_56___d457)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_reset && NOT_verbosity_ULE_1_56___d457)
	begin
	  v__h18617 = $stime;
	  #0;
	end
    v__h18611 = v__h18617 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_reset && NOT_verbosity_ULE_1_56___d457)
	$display("%0d: %m.reset", v__h18611);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_reset && NOT_verbosity_ULE_1_56___d457)
	begin
	  v__h18698 = $stime;
	  #0;
	end
    v__h18692 = v__h18698 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_reset && NOT_verbosity_ULE_1_56___d457)
	$display("%0d: %m.reset", v__h18692);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && WILL_FIRE_RL_rl_req)
	$display("Error: \"../src_Core/Near_Mem/Near_Mem_TCM/src/Near_Mem_TCM.bsv\", line 754, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_dma_port_rl_wr_req] and\n  [RL_rl_req] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_port_rl_wr_req && WILL_FIRE_RL_rl_amo_rsp)
	$display("Error: \"../src_Core/Near_Mem/Near_Mem_TCM/src/Near_Mem_TCM.bsv\", line 751, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_dma_port_rl_wr_req] and\n  [RL_rl_amo_rsp] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkDTCM

