//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awvalid             O     1 reg
// mem_master_awid                O     4 reg
// mem_master_awaddr              O    32 reg
// mem_master_awlen               O     8 reg
// mem_master_awsize              O     3 reg
// mem_master_awburst             O     2 reg
// mem_master_awlock              O     1 reg
// mem_master_awcache             O     4 reg
// mem_master_awprot              O     3 reg
// mem_master_awqos               O     4 reg
// mem_master_awregion            O     4 reg
// mem_master_wvalid              O     1 reg
// mem_master_wdata               O    32 reg
// mem_master_wstrb               O     4 reg
// mem_master_wlast               O     1 reg
// mem_master_bready              O     1 reg
// mem_master_arvalid             O     1 reg
// mem_master_arid                O     4 reg
// mem_master_araddr              O    32 reg
// mem_master_arlen               O     8 reg
// mem_master_arsize              O     3 reg
// mem_master_arburst             O     2 reg
// mem_master_arlock              O     1 reg
// mem_master_arcache             O     4 reg
// mem_master_arprot              O     3 reg
// mem_master_arqos               O     4 reg
// mem_master_arregion            O     4 reg
// mem_master_rready              O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_f3                         I     3
// req_amo_funct7                 I     7 reg
// req_addr                       I    32
// req_st_value                   I    64
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    32 unused
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bid                 I     4 reg
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rid                 I     4 reg
// mem_master_rdata               I    32 reg
// mem_master_rresp               I     2 reg
// mem_master_rlast               I     1 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_Cache(CLK,
		   RST_N,

		   set_verbosity_verbosity,
		   EN_set_verbosity,
		   RDY_set_verbosity,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_op,
		   req_f3,
		   req_amo_funct7,
		   req_addr,
		   req_st_value,
		   req_priv,
		   req_sstatus_SUM,
		   req_mstatus_MXR,
		   req_satp,
		   EN_req,

		   valid,

		   addr,

		   word64,

		   st_amo_val,

		   exc,

		   exc_code,

		   EN_server_flush_request_put,
		   RDY_server_flush_request_put,

		   EN_server_flush_response_get,
		   RDY_server_flush_response_get,

		   EN_tlb_flush,
		   RDY_tlb_flush,

		   mem_master_awvalid,

		   mem_master_awid,

		   mem_master_awaddr,

		   mem_master_awlen,

		   mem_master_awsize,

		   mem_master_awburst,

		   mem_master_awlock,

		   mem_master_awcache,

		   mem_master_awprot,

		   mem_master_awqos,

		   mem_master_awregion,

		   mem_master_awready,

		   mem_master_wvalid,

		   mem_master_wdata,

		   mem_master_wstrb,

		   mem_master_wlast,

		   mem_master_wready,

		   mem_master_bvalid,
		   mem_master_bid,
		   mem_master_bresp,

		   mem_master_bready,

		   mem_master_arvalid,

		   mem_master_arid,

		   mem_master_araddr,

		   mem_master_arlen,

		   mem_master_arsize,

		   mem_master_arburst,

		   mem_master_arlock,

		   mem_master_arcache,

		   mem_master_arprot,

		   mem_master_arqos,

		   mem_master_arregion,

		   mem_master_arready,

		   mem_master_rvalid,
		   mem_master_rid,
		   mem_master_rdata,
		   mem_master_rresp,
		   mem_master_rlast,

		   mem_master_rready);
  parameter [0 : 0] dmem_not_imem = 1'b0;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_f3;
  input  [6 : 0] req_amo_funct7;
  input  [31 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_m_awaddr
  output [31 : 0] mem_master_awaddr;

  // value method mem_master_m_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_m_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_m_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_m_awlock
  output mem_master_awlock;

  // value method mem_master_m_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_m_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [31 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [3 : 0] mem_master_wstrb;

  // value method mem_master_m_wlast
  output mem_master_wlast;

  // value method mem_master_m_wuser

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_m_araddr
  output [31 : 0] mem_master_araddr;

  // value method mem_master_m_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_m_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_m_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_m_arlock
  output mem_master_arlock;

  // value method mem_master_m_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_m_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [3 : 0] mem_master_rid;
  input  [31 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;

  // value method mem_master_m_rready
  output mem_master_rready;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [63 : 0] st_amo_val;
  wire [31 : 0] addr, mem_master_araddr, mem_master_awaddr, mem_master_wdata;
  wire [7 : 0] mem_master_arlen, mem_master_awlen;
  wire [3 : 0] exc_code,
	       mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion,
	       mem_master_wstrb;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       valid;

  // inlined wires
  wire [3 : 0] ctr_wr_rsps_pending_crg$port0__write_1,
	       ctr_wr_rsps_pending_crg$port1__write_1,
	       ctr_wr_rsps_pending_crg$port2__read,
	       ctr_wr_rsps_pending_crg$port3__read;
  wire ctr_wr_rsps_pending_crg$EN_port2__write, dw_valid$whas;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register ctr_wr_rsps_pending_crg
  reg [3 : 0] ctr_wr_rsps_pending_crg;
  wire [3 : 0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;

  // register rg_addr
  reg [31 : 0] rg_addr;
  wire [31 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_amo_funct7
  reg [6 : 0] rg_amo_funct7;
  wire [6 : 0] rg_amo_funct7$D_IN;
  wire rg_amo_funct7$EN;

  // register rg_cset_in_cache
  reg [6 : 0] rg_cset_in_cache;
  wire [6 : 0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;

  // register rg_error_during_refill
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN, rg_error_during_refill$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  reg [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_f3
  reg [2 : 0] rg_f3;
  wire [2 : 0] rg_f3$D_IN;
  wire rg_f3$EN;

  // register rg_ld_val
  reg [63 : 0] rg_ld_val;
  reg [63 : 0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;

  // register rg_lower_word32
  reg [31 : 0] rg_lower_word32;
  wire [31 : 0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;

  // register rg_lower_word32_full
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN, rg_lower_word32_full$EN;

  // register rg_lrsc_pa
  reg [31 : 0] rg_lrsc_pa;
  wire [31 : 0] rg_lrsc_pa$D_IN;
  wire rg_lrsc_pa$EN;

  // register rg_lrsc_valid
  reg rg_lrsc_valid;
  wire rg_lrsc_valid$D_IN, rg_lrsc_valid$EN;

  // register rg_op
  reg [1 : 0] rg_op;
  wire [1 : 0] rg_op$D_IN;
  wire rg_op$EN;

  // register rg_pa
  reg [31 : 0] rg_pa;
  wire [31 : 0] rg_pa$D_IN;
  wire rg_pa$EN;

  // register rg_pte_pa
  reg [31 : 0] rg_pte_pa;
  wire [31 : 0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;

  // register rg_st_amo_val
  reg [63 : 0] rg_st_amo_val;
  wire [63 : 0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_word64_set_in_cache
  reg [8 : 0] rg_word64_set_in_cache;
  wire [8 : 0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;

  // ports of submodule f_fabric_write_reqs
  reg [98 : 0] f_fabric_write_reqs$D_IN;
  wire [98 : 0] f_fabric_write_reqs$D_OUT;
  wire f_fabric_write_reqs$CLR,
       f_fabric_write_reqs$DEQ,
       f_fabric_write_reqs$EMPTY_N,
       f_fabric_write_reqs$ENQ,
       f_fabric_write_reqs$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule master_xactor_f_rd_addr
  wire [64 : 0] master_xactor_f_rd_addr$D_IN, master_xactor_f_rd_addr$D_OUT;
  wire master_xactor_f_rd_addr$CLR,
       master_xactor_f_rd_addr$DEQ,
       master_xactor_f_rd_addr$EMPTY_N,
       master_xactor_f_rd_addr$ENQ,
       master_xactor_f_rd_addr$FULL_N;

  // ports of submodule master_xactor_f_rd_data
  wire [38 : 0] master_xactor_f_rd_data$D_IN, master_xactor_f_rd_data$D_OUT;
  wire master_xactor_f_rd_data$CLR,
       master_xactor_f_rd_data$DEQ,
       master_xactor_f_rd_data$EMPTY_N,
       master_xactor_f_rd_data$ENQ,
       master_xactor_f_rd_data$FULL_N;

  // ports of submodule master_xactor_f_wr_addr
  wire [64 : 0] master_xactor_f_wr_addr$D_IN, master_xactor_f_wr_addr$D_OUT;
  wire master_xactor_f_wr_addr$CLR,
       master_xactor_f_wr_addr$DEQ,
       master_xactor_f_wr_addr$EMPTY_N,
       master_xactor_f_wr_addr$ENQ,
       master_xactor_f_wr_addr$FULL_N;

  // ports of submodule master_xactor_f_wr_data
  wire [36 : 0] master_xactor_f_wr_data$D_IN, master_xactor_f_wr_data$D_OUT;
  wire master_xactor_f_wr_data$CLR,
       master_xactor_f_wr_data$DEQ,
       master_xactor_f_wr_data$EMPTY_N,
       master_xactor_f_wr_data$ENQ,
       master_xactor_f_wr_data$FULL_N;

  // ports of submodule master_xactor_f_wr_resp
  wire [5 : 0] master_xactor_f_wr_resp$D_IN, master_xactor_f_wr_resp$D_OUT;
  wire master_xactor_f_wr_resp$CLR,
       master_xactor_f_wr_resp$DEQ,
       master_xactor_f_wr_resp$EMPTY_N,
       master_xactor_f_wr_resp$ENQ,
       master_xactor_f_wr_resp$FULL_N;

  // ports of submodule ram_state_and_ctag_cset
  wire [22 : 0] ram_state_and_ctag_cset$DIA,
		ram_state_and_ctag_cset$DIB,
		ram_state_and_ctag_cset$DOB;
  wire [6 : 0] ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$ADDRB;
  wire ram_state_and_ctag_cset$ENA,
       ram_state_and_ctag_cset$ENB,
       ram_state_and_ctag_cset$WEA,
       ram_state_and_ctag_cset$WEB;

  // ports of submodule ram_word64_set
  reg [63 : 0] ram_word64_set$DIB;
  reg [8 : 0] ram_word64_set$ADDRB;
  wire [63 : 0] ram_word64_set$DIA, ram_word64_set$DOB;
  wire [8 : 0] ram_word64_set$ADDRA;
  wire ram_word64_set$ENA,
       ram_word64_set$ENB,
       ram_word64_set$WEA,
       ram_word64_set$WEB;

  // ports of submodule soc_map
  wire [31 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;
  wire soc_map$m_is_mem_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_ST_AMO_response,
       CAN_FIRE_RL_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_rl_discard_write_rsp,
       CAN_FIRE_RL_rl_drive_exception_rsp,
       CAN_FIRE_RL_rl_fabric_send_write_req,
       CAN_FIRE_RL_rl_io_AMO_SC_req,
       CAN_FIRE_RL_rl_io_AMO_op_req,
       CAN_FIRE_RL_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_rl_io_read_req,
       CAN_FIRE_RL_rl_io_read_rsp,
       CAN_FIRE_RL_rl_io_write_req,
       CAN_FIRE_RL_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_rl_rereq,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_start_cache_refill,
       CAN_FIRE_RL_rl_start_reset,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_rl_ST_AMO_response,
       WILL_FIRE_RL_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_rl_discard_write_rsp,
       WILL_FIRE_RL_rl_drive_exception_rsp,
       WILL_FIRE_RL_rl_fabric_send_write_req,
       WILL_FIRE_RL_rl_io_AMO_SC_req,
       WILL_FIRE_RL_rl_io_AMO_op_req,
       WILL_FIRE_RL_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_rl_io_read_req,
       WILL_FIRE_RL_rl_io_read_rsp,
       WILL_FIRE_RL_rl_io_write_req,
       WILL_FIRE_RL_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_rl_rereq,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_start_cache_refill,
       WILL_FIRE_RL_rl_start_reset,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [98 : 0] MUX_f_fabric_write_reqs$enq_1__VAL_1,
		MUX_f_fabric_write_reqs$enq_1__VAL_2,
		MUX_f_fabric_write_reqs$enq_1__VAL_3;
  wire [64 : 0] MUX_master_xactor_f_rd_addr$enq_1__VAL_1,
		MUX_master_xactor_f_rd_addr$enq_1__VAL_2;
  wire [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_3,
		MUX_ram_word64_set$a_put_3__VAL_1,
		MUX_rg_ld_val$write_1__VAL_2;
  wire [22 : 0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [8 : 0] MUX_ram_word64_set$b_put_2__VAL_2,
	       MUX_ram_word64_set$b_put_2__VAL_4;
  wire [6 : 0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [3 : 0] MUX_rg_exc_code$write_1__VAL_1,
	       MUX_rg_state$write_1__VAL_1,
	       MUX_rg_state$write_1__VAL_10,
	       MUX_rg_state$write_1__VAL_12,
	       MUX_rg_state$write_1__VAL_3;
  wire MUX_dw_output_ld_val$wset_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_2,
       MUX_dw_output_ld_val$wset_1__SEL_3,
       MUX_dw_output_ld_val$wset_1__SEL_4,
       MUX_f_fabric_write_reqs$enq_1__SEL_2,
       MUX_master_xactor_f_rd_addr$enq_1__SEL_1,
       MUX_master_xactor_f_rd_addr$enq_1__SEL_2,
       MUX_ram_state_and_ctag_cset$a_put_1__SEL_1,
       MUX_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_ram_word64_set$a_put_1__SEL_1,
       MUX_ram_word64_set$b_put_1__SEL_2,
       MUX_rg_error_during_refill$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_2,
       MUX_rg_exc_code$write_1__SEL_3,
       MUX_rg_ld_val$write_1__SEL_2,
       MUX_rg_lrsc_valid$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_10,
       MUX_rg_state$write_1__SEL_12,
       MUX_rg_state$write_1__SEL_13,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h4201;
  reg [31 : 0] v__h4300;
  reg [31 : 0] v__h4449;
  reg [31 : 0] v__h12959;
  reg [31 : 0] v__h16548;
  reg [31 : 0] v__h19738;
  reg [31 : 0] v__h20379;
  reg [31 : 0] v__h20620;
  reg [31 : 0] v__h22644;
  reg [31 : 0] v__h22994;
  reg [31 : 0] v__h24096;
  reg [31 : 0] v__h24203;
  reg [31 : 0] v__h24308;
  reg [31 : 0] v__h24388;
  reg [31 : 0] v__h24598;
  reg [31 : 0] v__h24716;
  reg [31 : 0] v__h25010;
  reg [31 : 0] v__h25185;
  reg [31 : 0] v__h27430;
  reg [31 : 0] v__h25281;
  reg [31 : 0] v__h28037;
  reg [31 : 0] v__h27998;
  reg [31 : 0] v__h3831;
  reg [31 : 0] v__h28385;
  reg [31 : 0] v__h3825;
  reg [31 : 0] v__h4195;
  reg [31 : 0] v__h4294;
  reg [31 : 0] v__h4443;
  reg [31 : 0] v__h12953;
  reg [31 : 0] v__h16542;
  reg [31 : 0] v__h19732;
  reg [31 : 0] v__h20373;
  reg [31 : 0] v__h20614;
  reg [31 : 0] v__h22638;
  reg [31 : 0] v__h22988;
  reg [31 : 0] v__h24090;
  reg [31 : 0] v__h24197;
  reg [31 : 0] v__h24302;
  reg [31 : 0] v__h24382;
  reg [31 : 0] v__h24592;
  reg [31 : 0] v__h24710;
  reg [31 : 0] v__h25004;
  reg [31 : 0] v__h25179;
  reg [31 : 0] v__h25275;
  reg [31 : 0] v__h27424;
  reg [31 : 0] v__h27992;
  reg [31 : 0] v__h28031;
  reg [31 : 0] v__h28379;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q25,
	       CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q49,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result2779_0x4_re_ETC__q22,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result3688_0x2_re_ETC__q26,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result3688_0x2_re_ETC__q30,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result3809_0x2_re_ETC__q28,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result3809_0x2_re_ETC__q31,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result3876_0x4_re_ETC__q27,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result3941_0x4_re_ETC__q29,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result7138_0x4_re_ETC__q46,
	       CASE_rg_f3_0b0_IF_rg_addr_7_BITS_2_TO_0_31_EQ__ETC__q48,
	       IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d261,
	       IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d283,
	       IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d295,
	       IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d644,
	       IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d711,
	       IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d763,
	       IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d783,
	       IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d793,
	       IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d244,
	       IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d274,
	       IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d632,
	       IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d707,
	       IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d747,
	       IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d775,
	       IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d384,
	       IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d393,
	       IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d458,
	       IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d467,
	       IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d304,
	       IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d402,
	       IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d476,
	       IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_IF_rg_f3_11_E_ETC___d344,
	       _theResult_____2__h17048,
	       _theResult_____2__h25357,
	       ld_val__h23103,
	       ld_val__h25119,
	       new_ld_val__h25311,
	       w1__h17040,
	       w1__h25345,
	       w1__h25349,
	       word64__h2747;
  reg [7 : 0] strobe64__h2749;
  reg [2 : 0] value__h24897, x__h2777;
  wire [63 : 0] IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d717,
		IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_1_E_ETC___d312,
		IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_IF__ETC___d794,
		IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d297,
		IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_rg_st_amo_val_ETC___d408,
		IF_rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d482,
		_theResult_____1_fst__h2994,
		_theResult___fst__h2897,
		new_st_val__h16770,
		new_st_val__h17052,
		new_st_val__h17143,
		new_st_val__h18123,
		new_st_val__h18127,
		new_st_val__h18131,
		new_st_val__h18135,
		new_st_val__h18140,
		new_st_val__h18146,
		new_st_val__h18151,
		new_st_val__h25361,
		new_st_val__h25452,
		new_st_val__h27298,
		new_st_val__h27302,
		new_st_val__h27306,
		new_st_val__h27310,
		new_st_val__h27315,
		new_st_val__h27321,
		new_st_val__h27326,
		new_value__h15638,
		new_value__h5664,
		new_word64___1__h20748,
		result__h12047,
		result__h12075,
		result__h12103,
		result__h12131,
		result__h12159,
		result__h12187,
		result__h12215,
		result__h12243,
		result__h12288,
		result__h12316,
		result__h12344,
		result__h12372,
		result__h12400,
		result__h12428,
		result__h12456,
		result__h12484,
		result__h12529,
		result__h12557,
		result__h12585,
		result__h12613,
		result__h12654,
		result__h12682,
		result__h12710,
		result__h12738,
		result__h12779,
		result__h12807,
		result__h12846,
		result__h12874,
		result__h23276,
		result__h23303,
		result__h23330,
		result__h23357,
		result__h23509,
		result__h23536,
		result__h23563,
		result__h23590,
		result__h23688,
		result__h23715,
		result__h23809,
		result__h23836,
		result__h23876,
		result__h23941,
		result__h25540,
		result__h26434,
		result__h26462,
		result__h26490,
		result__h26518,
		result__h26546,
		result__h26574,
		result__h26602,
		result__h26647,
		result__h26675,
		result__h26703,
		result__h26731,
		result__h26759,
		result__h26787,
		result__h26815,
		result__h26843,
		result__h26888,
		result__h26916,
		result__h26944,
		result__h26972,
		result__h27013,
		result__h27041,
		result__h27069,
		result__h27097,
		result__h27138,
		result__h27166,
		result__h27205,
		result__h27233,
		w1___1__h17111,
		w1___1__h25420,
		w2___1__h25421,
		w2__h25351,
		word64__h23124,
		word64__h5444,
		x__h13346,
		x__h25340,
		x__h2966,
		y__h5691;
  wire [31 : 0] IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC__q23,
		cline_fabric_addr__h19791,
		ld_val5119_BITS_31_TO_0__q34,
		ld_val5119_BITS_63_TO_32__q41,
		master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q4,
		rg_st_amo_val_BITS_31_TO_0__q24,
		w15345_BITS_31_TO_0__q47,
		word64444_BITS_31_TO_0__q10,
		word64444_BITS_63_TO_32__q18;
  wire [21 : 0] pa_ctag__h5303;
  wire [15 : 0] ld_val5119_BITS_15_TO_0__q33,
		ld_val5119_BITS_31_TO_16__q37,
		ld_val5119_BITS_47_TO_32__q40,
		ld_val5119_BITS_63_TO_48__q44,
		master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q3,
		master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6,
		word64444_BITS_15_TO_0__q9,
		word64444_BITS_31_TO_16__q13,
		word64444_BITS_47_TO_32__q17,
		word64444_BITS_63_TO_48__q21;
  wire [7 : 0] ld_val5119_BITS_15_TO_8__q35,
	       ld_val5119_BITS_23_TO_16__q36,
	       ld_val5119_BITS_31_TO_24__q38,
	       ld_val5119_BITS_39_TO_32__q39,
	       ld_val5119_BITS_47_TO_40__q42,
	       ld_val5119_BITS_55_TO_48__q43,
	       ld_val5119_BITS_63_TO_56__q45,
	       ld_val5119_BITS_7_TO_0__q32,
	       master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q2,
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q5,
	       master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q1,
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7,
	       strobe64___1__h2993,
	       strobe64__h2896,
	       strobe64__h2899,
	       strobe64__h2902,
	       word64444_BITS_15_TO_8__q11,
	       word64444_BITS_23_TO_16__q12,
	       word64444_BITS_31_TO_24__q14,
	       word64444_BITS_39_TO_32__q16,
	       word64444_BITS_47_TO_40__q19,
	       word64444_BITS_55_TO_48__q20,
	       word64444_BITS_63_TO_56__q15,
	       word64444_BITS_7_TO_0__q8,
	       x__h3104;
  wire [5 : 0] shift_bits__h2744;
  wire [3 : 0] IF_rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d150,
	       IF_rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d149,
	       access_exc_code__h2512,
	       b__h19692;
  wire IF_rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d122,
       NOT_cfg_verbosity_read__8_ULE_1_9___d50,
       NOT_cfg_verbosity_read__8_ULE_2_44___d545,
       NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d340,
       NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d351,
       NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d485,
       NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d497,
       NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d518,
       NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d521,
       NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d525,
       NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d527,
       NOT_ram_state_and_ctag_cset_b_read__12_BIT_22__ETC___d159,
       NOT_req_f3_BITS_1_TO_0_79_EQ_0b0_80_81_AND_NOT_ETC___d900,
       NOT_rg_op_1_EQ_0_2_36_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d145,
       NOT_rg_op_1_EQ_0_2_36_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d480,
       NOT_rg_op_1_EQ_0_2_36_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d500,
       NOT_rg_op_1_EQ_0_2_36_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d508,
       NOT_rg_op_1_EQ_1_9_65_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d168,
       NOT_rg_op_1_EQ_1_9_65_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d348,
       NOT_rg_op_1_EQ_1_9_65_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d516,
       NOT_rg_op_1_EQ_1_9_65_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d519,
       NOT_rg_op_1_EQ_1_9_65_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d523,
       NOT_rg_op_1_EQ_2_3_37_OR_NOT_rg_amo_funct7_4_B_ETC___d346,
       NOT_rg_op_1_EQ_2_3_37_OR_NOT_rg_amo_funct7_4_B_ETC___d498,
       NOT_rg_op_1_EQ_2_3_37_OR_NOT_rg_amo_funct7_4_B_ETC___d502,
       NOT_rg_op_1_EQ_2_3_37_OR_NOT_rg_amo_funct7_4_B_ETC___d506,
       dmem_not_imem_AND_NOT_soc_map_m_is_mem_addr_rg_ETC___d124,
       lrsc_result__h13336,
       ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118,
       ram_state_and_ctag_cset_b_read__12_BIT_22_13_A_ETC___d160,
       req_f3_BITS_1_TO_0_79_EQ_0b0_80_OR_req_f3_BITS_ETC___d909,
       rg_addr_7_EQ_rg_lrsc_pa_05___d157,
       rg_amo_funct7_4_BITS_6_TO_2_5_EQ_0b10_6_AND_NO_ETC___d334,
       rg_lrsc_pa_05_EQ_rg_addr_7___d106,
       rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d135,
       rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d171,
       rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d173,
       rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d176,
       rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d317,
       rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d330,
       rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d169,
       rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d349,
       rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d478,
       rg_op_1_EQ_2_3_AND_rg_amo_funct7_4_BITS_6_TO_2_ETC___d512,
       rg_state_3_EQ_12_96_AND_rg_op_1_EQ_0_2_OR_rg_o_ETC___d598;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas ;

  // value method addr
  assign addr = rg_addr ;

  // value method word64
  always@(MUX_dw_output_ld_val$wset_1__SEL_1 or
	  new_ld_val__h25311 or
	  MUX_dw_output_ld_val$wset_1__SEL_2 or
	  ld_val__h23103 or
	  MUX_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_dw_output_ld_val$wset_1__SEL_4 or rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_1: word64 = new_ld_val__h25311;
      MUX_dw_output_ld_val$wset_1__SEL_2: word64 = ld_val__h23103;
      MUX_dw_output_ld_val$wset_1__SEL_3:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_3;
      MUX_dw_output_ld_val$wset_1__SEL_4: word64 = rg_ld_val;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_dw_output_ld_val$wset_1__SEL_3 ? 64'd0 : rg_st_amo_val ;

  // value method exc
  assign exc = rg_state == 4'd4 ;

  // value method exc_code
  assign exc_code = rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid = master_xactor_f_wr_addr$EMPTY_N ;

  // value method mem_master_m_awid
  assign mem_master_awid = master_xactor_f_wr_addr$D_OUT[64:61] ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = master_xactor_f_wr_addr$D_OUT[60:29] ;

  // value method mem_master_m_awlen
  assign mem_master_awlen = master_xactor_f_wr_addr$D_OUT[28:21] ;

  // value method mem_master_m_awsize
  assign mem_master_awsize = master_xactor_f_wr_addr$D_OUT[20:18] ;

  // value method mem_master_m_awburst
  assign mem_master_awburst = master_xactor_f_wr_addr$D_OUT[17:16] ;

  // value method mem_master_m_awlock
  assign mem_master_awlock = master_xactor_f_wr_addr$D_OUT[15] ;

  // value method mem_master_m_awcache
  assign mem_master_awcache = master_xactor_f_wr_addr$D_OUT[14:11] ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = master_xactor_f_wr_addr$D_OUT[10:8] ;

  // value method mem_master_m_awqos
  assign mem_master_awqos = master_xactor_f_wr_addr$D_OUT[7:4] ;

  // value method mem_master_m_awregion
  assign mem_master_awregion = master_xactor_f_wr_addr$D_OUT[3:0] ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid = master_xactor_f_wr_data$EMPTY_N ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = master_xactor_f_wr_data$D_OUT[36:5] ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = master_xactor_f_wr_data$D_OUT[4:1] ;

  // value method mem_master_m_wlast
  assign mem_master_wlast = master_xactor_f_wr_data$D_OUT[0] ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = master_xactor_f_wr_resp$FULL_N ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid = master_xactor_f_rd_addr$EMPTY_N ;

  // value method mem_master_m_arid
  assign mem_master_arid = master_xactor_f_rd_addr$D_OUT[64:61] ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = master_xactor_f_rd_addr$D_OUT[60:29] ;

  // value method mem_master_m_arlen
  assign mem_master_arlen = master_xactor_f_rd_addr$D_OUT[28:21] ;

  // value method mem_master_m_arsize
  assign mem_master_arsize = master_xactor_f_rd_addr$D_OUT[20:18] ;

  // value method mem_master_m_arburst
  assign mem_master_arburst = master_xactor_f_rd_addr$D_OUT[17:16] ;

  // value method mem_master_m_arlock
  assign mem_master_arlock = master_xactor_f_rd_addr$D_OUT[15] ;

  // value method mem_master_m_arcache
  assign mem_master_arcache = master_xactor_f_rd_addr$D_OUT[14:11] ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = master_xactor_f_rd_addr$D_OUT[10:8] ;

  // value method mem_master_m_arqos
  assign mem_master_arqos = master_xactor_f_rd_addr$D_OUT[7:4] ;

  // value method mem_master_m_arregion
  assign mem_master_arregion = master_xactor_f_rd_addr$D_OUT[3:0] ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = master_xactor_f_rd_data$FULL_N ;

  // submodule f_fabric_write_reqs
  FIFO2 #(.width(32'd99), .guarded(32'd1)) f_fabric_write_reqs(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(f_fabric_write_reqs$D_IN),
							       .ENQ(f_fabric_write_reqs$ENQ),
							       .DEQ(f_fabric_write_reqs$DEQ),
							       .CLR(f_fabric_write_reqs$CLR),
							       .D_OUT(f_fabric_write_reqs$D_OUT),
							       .FULL_N(f_fabric_write_reqs$FULL_N),
							       .EMPTY_N(f_fabric_write_reqs$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule master_xactor_f_rd_addr
  FIFO2 #(.width(32'd65),
	  .guarded(32'd1)) master_xactor_f_rd_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_addr$D_IN),
						   .ENQ(master_xactor_f_rd_addr$ENQ),
						   .DEQ(master_xactor_f_rd_addr$DEQ),
						   .CLR(master_xactor_f_rd_addr$CLR),
						   .D_OUT(master_xactor_f_rd_addr$D_OUT),
						   .FULL_N(master_xactor_f_rd_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_addr$EMPTY_N));

  // submodule master_xactor_f_rd_data
  FIFO2 #(.width(32'd39),
	  .guarded(32'd1)) master_xactor_f_rd_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_data$D_IN),
						   .ENQ(master_xactor_f_rd_data$ENQ),
						   .DEQ(master_xactor_f_rd_data$DEQ),
						   .CLR(master_xactor_f_rd_data$CLR),
						   .D_OUT(master_xactor_f_rd_data$D_OUT),
						   .FULL_N(master_xactor_f_rd_data$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_data$EMPTY_N));

  // submodule master_xactor_f_wr_addr
  FIFO2 #(.width(32'd65),
	  .guarded(32'd1)) master_xactor_f_wr_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_addr$D_IN),
						   .ENQ(master_xactor_f_wr_addr$ENQ),
						   .DEQ(master_xactor_f_wr_addr$DEQ),
						   .CLR(master_xactor_f_wr_addr$CLR),
						   .D_OUT(master_xactor_f_wr_addr$D_OUT),
						   .FULL_N(master_xactor_f_wr_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_addr$EMPTY_N));

  // submodule master_xactor_f_wr_data
  FIFO2 #(.width(32'd37),
	  .guarded(32'd1)) master_xactor_f_wr_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_data$D_IN),
						   .ENQ(master_xactor_f_wr_data$ENQ),
						   .DEQ(master_xactor_f_wr_data$DEQ),
						   .CLR(master_xactor_f_wr_data$CLR),
						   .D_OUT(master_xactor_f_wr_data$D_OUT),
						   .FULL_N(master_xactor_f_wr_data$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_data$EMPTY_N));

  // submodule master_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) master_xactor_f_wr_resp(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(master_xactor_f_wr_resp$D_IN),
								  .ENQ(master_xactor_f_wr_resp$ENQ),
								  .DEQ(master_xactor_f_wr_resp$DEQ),
								  .CLR(master_xactor_f_wr_resp$CLR),
								  .D_OUT(master_xactor_f_wr_resp$D_OUT),
								  .FULL_N(master_xactor_f_wr_resp$FULL_N),
								  .EMPTY_N(master_xactor_f_wr_resp$EMPTY_N));

  // submodule ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(8'd128)) ram_state_and_ctag_cset(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(ram_state_and_ctag_cset$ADDRA),
						    .ADDRB(ram_state_and_ctag_cset$ADDRB),
						    .DIA(ram_state_and_ctag_cset$DIA),
						    .DIB(ram_state_and_ctag_cset$DIB),
						    .WEA(ram_state_and_ctag_cset$WEA),
						    .WEB(ram_state_and_ctag_cset$WEB),
						    .ENA(ram_state_and_ctag_cset$ENA),
						    .ENB(ram_state_and_ctag_cset$ENB),
						    .DOA(),
						    .DOB(ram_state_and_ctag_cset$DOB));

  // submodule ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(10'd512)) ram_word64_set(.CLKA(CLK),
					    .CLKB(CLK),
					    .ADDRA(ram_word64_set$ADDRA),
					    .ADDRB(ram_word64_set$ADDRB),
					    .DIA(ram_word64_set$DIA),
					    .DIB(ram_word64_set$DIB),
					    .WEA(ram_word64_set$WEA),
					    .WEB(ram_word64_set$WEB),
					    .ENA(ram_word64_set$ENA),
					    .ENB(ram_word64_set$ENB),
					    .DOA(),
					    .DOB(ram_word64_set$DOB));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_quad_spi_0_mem_addr_base(),
		    .m_quad_spi_0_mem_addr_size(),
		    .m_quad_spi_0_mem_addr_lim(),
		    .m_quad_spi_0_reg_addr_base(),
		    .m_quad_spi_0_reg_addr_size(),
		    .m_quad_spi_0_reg_addr_lim(),
		    .m_ethernet_0_addr_base(),
		    .m_ethernet_0_addr_size(),
		    .m_ethernet_0_addr_lim(),
		    .m_dma_0_addr_base(),
		    .m_dma_0_addr_size(),
		    .m_dma_0_addr_lim(),
		    .m_uart16550_0_addr_base(),
		    .m_uart16550_0_addr_size(),
		    .m_uart16550_0_addr_lim(),
		    .m_gpio0_addr_base(),
		    .m_gpio0_addr_size(),
		    .m_gpio0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_ddr4_0_uncached_addr_base(),
		    .m_ddr4_0_uncached_addr_size(),
		    .m_ddr4_0_uncached_addr_lim(),
		    .m_ddr4_0_cached_addr_base(),
		    .m_ddr4_0_cached_addr_size(),
		    .m_ddr4_0_cached_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_is_mem_addr(soc_map$m_is_mem_addr),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // rule RL_rl_fabric_send_write_req
  assign CAN_FIRE_RL_rl_fabric_send_write_req =
	     ctr_wr_rsps_pending_crg != 4'd15 &&
	     f_fabric_write_reqs$EMPTY_N &&
	     master_xactor_f_wr_addr$FULL_N &&
	     master_xactor_f_wr_data$FULL_N ;
  assign WILL_FIRE_RL_rl_fabric_send_write_req =
	     CAN_FIRE_RL_rl_fabric_send_write_req ;

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset =
	     (rg_cset_in_cache != 7'd127 ||
	      f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N) &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // rule RL_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp =
	     dmem_not_imem_AND_NOT_soc_map_m_is_mem_addr_rg_ETC___d124 &&
	     rg_state == 4'd3 ;
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_cache_refill
  assign CAN_FIRE_RL_rl_start_cache_refill =
	     master_xactor_f_rd_addr$FULL_N && rg_state == 4'd8 &&
	     b__h19692 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_cache_refill =
	     MUX_master_xactor_f_rd_addr$enq_1__SEL_2 ;

  // rule RL_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop =
	     master_xactor_f_rd_data$EMPTY_N && rg_state == 4'd9 ;
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_rereq
  assign CAN_FIRE_RL_rl_rereq = rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_rereq =
	     CAN_FIRE_RL_rl_rereq && !WILL_FIRE_RL_rl_start_reset && !EN_req ;

  // rule RL_rl_ST_AMO_response
  assign CAN_FIRE_RL_rl_ST_AMO_response = rg_state == 4'd11 ;
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response ;

  // rule RL_rl_io_read_req
  assign CAN_FIRE_RL_rl_io_read_req =
	     master_xactor_f_rd_addr$FULL_N &&
	     rg_state_3_EQ_12_96_AND_rg_op_1_EQ_0_2_OR_rg_o_ETC___d598 ;
  assign WILL_FIRE_RL_rl_io_read_req =
	     CAN_FIRE_RL_rl_io_read_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_read_rsp
  assign CAN_FIRE_RL_rl_io_read_rsp =
	     master_xactor_f_rd_data$EMPTY_N && rg_state == 4'd13 ;
  assign WILL_FIRE_RL_rl_io_read_rsp =
	     CAN_FIRE_RL_rl_io_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = rg_state == 4'd14 ;
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_rl_maintain_io_read_rsp ;

  // rule RL_rl_io_write_req
  assign CAN_FIRE_RL_rl_io_write_req =
	     f_fabric_write_reqs$FULL_N && rg_state == 4'd12 &&
	     rg_op == 2'd1 ;
  assign WILL_FIRE_RL_rl_io_write_req =
	     CAN_FIRE_RL_rl_io_write_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_rl_io_AMO_SC_req =
	     rg_state == 4'd12 && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_rl_io_AMO_SC_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_op_req
  assign CAN_FIRE_RL_rl_io_AMO_op_req =
	     master_xactor_f_rd_addr$FULL_N && rg_state == 4'd12 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] != 5'b00010 &&
	     rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_op_req =
	     CAN_FIRE_RL_rl_io_AMO_op_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_rl_io_AMO_read_rsp =
	     master_xactor_f_rd_data$EMPTY_N &&
	     (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	      f_fabric_write_reqs$FULL_N) &&
	     rg_state == 4'd15 ;
  assign WILL_FIRE_RL_rl_io_AMO_read_rsp = MUX_rg_state$write_1__SEL_3 ;

  // rule RL_rl_discard_write_rsp
  assign CAN_FIRE_RL_rl_discard_write_rsp =
	     b__h19692 != 4'd0 && master_xactor_f_wr_resp$EMPTY_N ;
  assign WILL_FIRE_RL_rl_discard_write_rsp =
	     CAN_FIRE_RL_rl_discard_write_rsp ;

  // rule RL_rl_drive_exception_rsp
  assign CAN_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;
  assign WILL_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;

  // rule RL_rl_start_reset
  assign CAN_FIRE_RL_rl_start_reset = MUX_rg_state$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_start_reset = MUX_rg_state$write_1__SEL_2 ;

  // inputs to muxes for submodule ports
  assign MUX_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d176 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign MUX_f_fabric_write_reqs$enq_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     NOT_rg_op_1_EQ_0_2_36_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d480 ;
  assign MUX_master_xactor_f_rd_addr$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ;
  assign MUX_master_xactor_f_rd_addr$enq_1__SEL_2 =
	     CAN_FIRE_RL_rl_start_cache_refill &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;
  assign MUX_ram_state_and_ctag_cset$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop && rg_lower_word32_full &&
	     rg_word64_set_in_cache[1:0] == 2'd0 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_79_EQ_0b0_80_OR_req_f3_BITS_ETC___d909 ;
  assign MUX_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d351 ;
  assign MUX_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop && rg_lower_word32_full &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ;
  assign MUX_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_79_EQ_0b0_80_81_AND_NOT_ETC___d900 ;
  assign MUX_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d340 ;
  assign MUX_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d171 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     f_reset_reqs$EMPTY_N && rg_state != 4'd1 ;
  assign MUX_rg_state$write_1__SEL_3 =
	     CAN_FIRE_RL_rl_io_AMO_read_rsp && !WILL_FIRE_RL_rl_start_reset ;
  assign MUX_rg_state$write_1__SEL_10 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop && rg_lower_word32_full &&
	     rg_word64_set_in_cache[1:0] == 2'd3 ;
  assign MUX_rg_state$write_1__SEL_12 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (dmem_not_imem && !soc_map$m_is_mem_addr ||
	      rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d135 ||
	      NOT_rg_op_1_EQ_0_2_36_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d145) ;
  assign MUX_rg_state$write_1__SEL_13 =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign MUX_dw_output_ld_val$wset_1__VAL_3 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       new_value__h5664 :
	       new_value__h15638 ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_1 = { rg_f3, rg_pa, x__h25340 } ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_2 =
	     { rg_f3,
	       rg_addr,
	       IF_rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d482 } ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_3 =
	     { rg_f3, rg_pa, rg_st_amo_val } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_1 =
	     { 4'd0, rg_pa, 8'd0, value__h24897, 18'd65536 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_2 =
	     { 4'd0, cline_fabric_addr__h19791, 29'd15269888 } ;
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 = { 3'd4, rg_pa[31:12] } ;
  assign MUX_ram_word64_set$a_put_3__VAL_1 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d402 :
	       IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d476 ;
  assign MUX_ram_word64_set$b_put_2__VAL_2 = rg_word64_set_in_cache + 9'd1 ;
  assign MUX_ram_word64_set$b_put_2__VAL_4 = { rg_addr[11:5], 2'd0 } ;
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = rg_cset_in_cache + 7'd1 ;
  assign MUX_rg_exc_code$write_1__VAL_1 = (req_op == 2'd0) ? 4'd4 : 4'd6 ;
  assign MUX_rg_ld_val$write_1__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       x__h13346 :
	       IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_IF_rg_f3_11_E_ETC___d344 ;
  assign MUX_rg_state$write_1__VAL_1 =
	     NOT_req_f3_BITS_1_TO_0_79_EQ_0b0_80_81_AND_NOT_ETC___d900 ?
	       4'd4 :
	       4'd3 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ? 4'd14 : 4'd4 ;
  assign MUX_rg_state$write_1__VAL_10 =
	     (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	      rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_rg_state$write_1__VAL_12 =
	     (dmem_not_imem && !soc_map$m_is_mem_addr) ?
	       4'd12 :
	       IF_rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d150 ;

  // inlined wires
  assign dw_valid$whas =
	     (WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_rl_io_read_rsp) &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d176 ||
	     WILL_FIRE_RL_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign ctr_wr_rsps_pending_crg$port0__write_1 =
	     ctr_wr_rsps_pending_crg + 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port1__write_1 = b__h19692 - 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port2__read =
	     CAN_FIRE_RL_rl_discard_write_rsp ?
	       ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h19692 ;
  assign ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign ctr_wr_rsps_pending_crg$port3__read =
	     ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       ctr_wr_rsps_pending_crg$port2__read ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register ctr_wr_rsps_pending_crg
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read ;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register rg_addr
  assign rg_addr$D_IN = req_addr ;
  assign rg_addr$EN = EN_req ;

  // register rg_amo_funct7
  assign rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign rg_amo_funct7$EN = EN_req ;

  // register rg_cset_in_cache
  assign rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_rl_reset ?
	       MUX_rg_cset_in_cache$write_1__VAL_1 :
	       7'd0 ;
  assign rg_cset_in_cache$EN =
	     WILL_FIRE_RL_rl_reset || WILL_FIRE_RL_rl_start_reset ;

  // register rg_error_during_refill
  assign rg_error_during_refill$D_IN =
	     MUX_rg_error_during_refill$write_1__SEL_1 ;
  assign rg_error_during_refill$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_exc_code
  always@(MUX_rg_exc_code$write_1__SEL_1 or
	  MUX_rg_exc_code$write_1__VAL_1 or
	  MUX_rg_exc_code$write_1__SEL_2 or
	  MUX_rg_exc_code$write_1__SEL_3 or
	  MUX_rg_error_during_refill$write_1__SEL_1 or access_exc_code__h2512)
  case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 4'd7;
    MUX_rg_exc_code$write_1__SEL_3: rg_exc_code$D_IN = 4'd5;
    MUX_rg_error_during_refill$write_1__SEL_1:
	rg_exc_code$D_IN = access_exc_code__h2512;
    default: rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_79_EQ_0b0_80_81_AND_NOT_ETC___d900 ;

  // register rg_f3
  assign rg_f3$D_IN = req_f3 ;
  assign rg_f3$EN = EN_req ;

  // register rg_ld_val
  always@(MUX_dw_output_ld_val$wset_1__SEL_1 or
	  new_ld_val__h25311 or
	  MUX_rg_ld_val$write_1__SEL_2 or
	  MUX_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  ld_val__h23103 or WILL_FIRE_RL_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_1: rg_ld_val$D_IN = new_ld_val__h25311;
      MUX_rg_ld_val$write_1__SEL_2:
	  rg_ld_val$D_IN = MUX_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_read_rsp: rg_ld_val$D_IN = ld_val__h23103;
      WILL_FIRE_RL_rl_io_AMO_SC_req: rg_ld_val$D_IN = 64'd1;
      default: rg_ld_val$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_ld_val$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d340 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ;

  // register rg_lower_word32
  assign rg_lower_word32$D_IN = master_xactor_f_rd_data$D_OUT[34:3] ;
  assign rg_lower_word32$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop && !rg_lower_word32_full ;

  // register rg_lower_word32_full
  assign rg_lower_word32_full$D_IN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop && !rg_lower_word32_full ;
  assign rg_lower_word32_full$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_lrsc_pa
  assign rg_lrsc_pa$D_IN = rg_addr ;
  assign rg_lrsc_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118 ;

  // register rg_lrsc_valid
  assign rg_lrsc_valid$D_IN =
	     MUX_rg_lrsc_valid$write_1__SEL_2 &&
	     rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d173 ;
  assign rg_lrsc_valid$EN =
	     WILL_FIRE_RL_rl_io_read_req && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d171 ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_op
  assign rg_op$D_IN = req_op ;
  assign rg_op$EN = EN_req ;

  // register rg_pa
  assign rg_pa$D_IN = EN_req ? req_addr : rg_addr ;
  assign rg_pa$EN = EN_req || WILL_FIRE_RL_rl_probe_and_immed_rsp ;

  // register rg_pte_pa
  assign rg_pte_pa$D_IN = 32'h0 ;
  assign rg_pte_pa$EN = 1'b0 ;

  // register rg_st_amo_val
  assign rg_st_amo_val$D_IN = EN_req ? req_st_value : new_st_val__h16770 ;
  assign rg_st_amo_val$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d527 ||
	     EN_req ;

  // register rg_state
  always@(EN_req or
	  MUX_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_start_reset or
	  WILL_FIRE_RL_rl_io_AMO_read_rsp or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_io_AMO_op_req or
	  WILL_FIRE_RL_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_rl_io_write_req or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  WILL_FIRE_RL_rl_io_read_req or
	  WILL_FIRE_RL_rl_rereq or
	  MUX_rg_state$write_1__SEL_10 or
	  MUX_rg_state$write_1__VAL_10 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_rg_state$write_1__SEL_12 or
	  MUX_rg_state$write_1__VAL_12 or MUX_rg_state$write_1__SEL_13)
  case (1'b1)
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 4'd1;
    WILL_FIRE_RL_rl_io_AMO_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_io_AMO_op_req: rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_rl_io_AMO_SC_req || WILL_FIRE_RL_rl_io_write_req:
	rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 4'd3;
    MUX_rg_state$write_1__SEL_10:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_10;
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 4'd9;
    MUX_rg_state$write_1__SEL_12:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_12;
    MUX_rg_state$write_1__SEL_13: rg_state$D_IN = 4'd2;
    default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ||
	     MUX_rg_state$write_1__SEL_12 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop && rg_lower_word32_full &&
	     rg_word64_set_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_rl_start_reset ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ;

  // register rg_word64_set_in_cache
  assign rg_word64_set_in_cache$D_IN =
	     MUX_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_ram_word64_set$b_put_2__VAL_2 :
	       MUX_ram_word64_set$b_put_2__VAL_4 ;
  assign rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop && rg_lower_word32_full &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule f_fabric_write_reqs
  always@(MUX_dw_output_ld_val$wset_1__SEL_1 or
	  MUX_f_fabric_write_reqs$enq_1__VAL_1 or
	  MUX_f_fabric_write_reqs$enq_1__SEL_2 or
	  MUX_f_fabric_write_reqs$enq_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_write_req or
	  MUX_f_fabric_write_reqs$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_1:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_1;
      MUX_f_fabric_write_reqs$enq_1__SEL_2:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_2;
      WILL_FIRE_RL_rl_io_write_req:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_3;
      default: f_fabric_write_reqs$D_IN =
		   99'h2AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_fabric_write_reqs$ENQ =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     NOT_rg_op_1_EQ_0_2_36_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d480 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign f_fabric_write_reqs$DEQ = CAN_FIRE_RL_rl_fabric_send_write_req ;
  assign f_fabric_write_reqs$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign f_reset_reqs$DEQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule master_xactor_f_rd_addr
  assign master_xactor_f_rd_addr$D_IN =
	     MUX_master_xactor_f_rd_addr$enq_1__SEL_1 ?
	       MUX_master_xactor_f_rd_addr$enq_1__VAL_1 :
	       MUX_master_xactor_f_rd_addr$enq_1__VAL_2 ;
  assign master_xactor_f_rd_addr$ENQ =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_start_cache_refill ;
  assign master_xactor_f_rd_addr$DEQ =
	     master_xactor_f_rd_addr$EMPTY_N && mem_master_arready ;
  assign master_xactor_f_rd_addr$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_rd_data
  assign master_xactor_f_rd_data$D_IN =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast } ;
  assign master_xactor_f_rd_data$ENQ =
	     mem_master_rvalid && master_xactor_f_rd_data$FULL_N ;
  assign master_xactor_f_rd_data$DEQ =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp || WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop ;
  assign master_xactor_f_rd_data$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_addr
  assign master_xactor_f_wr_addr$D_IN =
	     { 4'd0,
	       f_fabric_write_reqs$D_OUT[95:64],
	       8'd0,
	       x__h2777,
	       18'd65536 } ;
  assign master_xactor_f_wr_addr$ENQ =
	     ctr_wr_rsps_pending_crg != 4'd15 &&
	     f_fabric_write_reqs$EMPTY_N &&
	     master_xactor_f_wr_addr$FULL_N &&
	     master_xactor_f_wr_data$FULL_N ;
  assign master_xactor_f_wr_addr$DEQ =
	     master_xactor_f_wr_addr$EMPTY_N && mem_master_awready ;
  assign master_xactor_f_wr_addr$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_data
  assign master_xactor_f_wr_data$D_IN =
	     { x__h2966[31:0], x__h3104[3:0], 1'd1 } ;
  assign master_xactor_f_wr_data$ENQ =
	     ctr_wr_rsps_pending_crg != 4'd15 &&
	     f_fabric_write_reqs$EMPTY_N &&
	     master_xactor_f_wr_addr$FULL_N &&
	     master_xactor_f_wr_data$FULL_N ;
  assign master_xactor_f_wr_data$DEQ =
	     master_xactor_f_wr_data$EMPTY_N && mem_master_wready ;
  assign master_xactor_f_wr_data$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_resp
  assign master_xactor_f_wr_resp$D_IN = { mem_master_bid, mem_master_bresp } ;
  assign master_xactor_f_wr_resp$ENQ =
	     mem_master_bvalid && master_xactor_f_wr_resp$FULL_N ;
  assign master_xactor_f_wr_resp$DEQ =
	     b__h19692 != 4'd0 && master_xactor_f_wr_resp$EMPTY_N ;
  assign master_xactor_f_wr_resp$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule ram_state_and_ctag_cset
  assign ram_state_and_ctag_cset$ADDRA =
	     MUX_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       rg_addr[11:5] :
	       rg_cset_in_cache ;
  assign ram_state_and_ctag_cset$ADDRB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:5] :
	       rg_addr[11:5] ;
  assign ram_state_and_ctag_cset$DIA =
	     MUX_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       23'd2796202 ;
  assign ram_state_and_ctag_cset$DIB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'b01010101010101010101010 /* unspecified value */  :
	       23'b01010101010101010101010 /* unspecified value */  ;
  assign ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop && rg_lower_word32_full &&
	     rg_word64_set_in_cache[1:0] == 2'd0 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_reset ;
  assign ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_79_EQ_0b0_80_OR_req_f3_BITS_ETC___d909 ||
	     WILL_FIRE_RL_rl_rereq ;

  // submodule ram_word64_set
  assign ram_word64_set$ADDRA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       rg_addr[11:3] :
	       rg_word64_set_in_cache ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  MUX_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_rl_rereq or
	  rg_addr or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$ADDRB = req_addr[11:3];
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[11:3];
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
      default: ram_word64_set$ADDRB = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$DIA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       MUX_ram_word64_set$a_put_3__VAL_1 :
	       new_word64___1__h20748 ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_rereq:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$WEA = 1'd1 ;
  assign ram_word64_set$WEB = 1'd0 ;
  assign ram_word64_set$ENA =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d351 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop && rg_lower_word32_full &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_79_EQ_0b0_80_OR_req_f3_BITS_ETC___d909 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop && rg_lower_word32_full &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 32'h0 ;
  assign soc_map$m_is_mem_addr_addr = rg_addr ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 32'h0 ;

  // remaining internal signals
  assign IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d717 =
	     (rg_addr[2:0] == 3'h0) ? result__h23941 : 64'd0 ;
  assign IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_1_E_ETC___d312 =
	     (rg_addr[2:0] == 3'h0) ? 64'd1 : 64'd0 ;
  assign IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_IF__ETC___d794 =
	     (rg_addr[2:0] == 3'h0) ? ld_val__h25119 : 64'd0 ;
  assign IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d297 =
	     (rg_addr[2:0] == 3'h0) ? word64__h5444 : 64'd0 ;
  assign IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC__q23 =
	     IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d304[31:0] ;
  assign IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_rg_st_amo_val_ETC___d408 =
	     (rg_f3 == 3'b010) ?
	       { {32{rg_st_amo_val_BITS_31_TO_0__q24[31]}},
		 rg_st_amo_val_BITS_31_TO_0__q24 } :
	       rg_st_amo_val ;
  assign IF_rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d150 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd8 :
	       IF_rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d149 ;
  assign IF_rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d122 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	       lrsc_result__h13336 ||
	       f_fabric_write_reqs$FULL_N :
	       !ram_state_and_ctag_cset$DOB[22] ||
	       !ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118 ||
	       f_fabric_write_reqs$FULL_N ;
  assign IF_rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d149 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd11 :
	       ((!ram_state_and_ctag_cset$DOB[22] ||
		 !ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118) ?
		  4'd8 :
		  4'd11) ;
  assign IF_rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d482 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_st_amo_val :
	       new_st_val__h16770 ;
  assign NOT_cfg_verbosity_read__8_ULE_1_9___d50 = cfg_verbosity > 4'd1 ;
  assign NOT_cfg_verbosity_read__8_ULE_2_44___d545 = cfg_verbosity > 4'd2 ;
  assign NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d340 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	      rg_op != 2'd1 && ram_state_and_ctag_cset$DOB[22] &&
	      ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118) ;
  assign NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d351 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d349 ;
  assign NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d485 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd1 &&
	     rg_addr_7_EQ_rg_lrsc_pa_05___d157 &&
	     NOT_cfg_verbosity_read__8_ULE_1_9___d50 ;
  assign NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d497 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     NOT_cfg_verbosity_read__8_ULE_1_9___d50 ;
  assign NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d518 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_1_EQ_1_9_65_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d516 ;
  assign NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d521 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_1_EQ_1_9_65_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d519 ;
  assign NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d525 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_1_EQ_1_9_65_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d523 ;
  assign NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d527 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_1_EQ_1_9_65_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d348 ;
  assign NOT_ram_state_and_ctag_cset_b_read__12_BIT_22__ETC___d159 =
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     rg_addr_7_EQ_rg_lrsc_pa_05___d157 ;
  assign NOT_req_f3_BITS_1_TO_0_79_EQ_0b0_80_81_AND_NOT_ETC___d900 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign NOT_rg_op_1_EQ_0_2_36_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d145 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_05_EQ_rg_addr_7___d106) ;
  assign NOT_rg_op_1_EQ_0_2_36_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d480 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d478 ||
	      NOT_rg_op_1_EQ_1_9_65_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d348) ;
  assign NOT_rg_op_1_EQ_0_2_36_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d500 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_1_EQ_2_3_37_OR_NOT_rg_amo_funct7_4_B_ETC___d498 ;
  assign NOT_rg_op_1_EQ_0_2_36_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d508 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_1_EQ_2_3_37_OR_NOT_rg_amo_funct7_4_B_ETC___d506 ;
  assign NOT_rg_op_1_EQ_1_9_65_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d168 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118 &&
	     rg_addr_7_EQ_rg_lrsc_pa_05___d157 ;
  assign NOT_rg_op_1_EQ_1_9_65_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d348 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118 ;
  assign NOT_rg_op_1_EQ_1_9_65_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d516 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118) &&
	     NOT_cfg_verbosity_read__8_ULE_1_9___d50 ;
  assign NOT_rg_op_1_EQ_1_9_65_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d519 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118 &&
	     NOT_cfg_verbosity_read__8_ULE_1_9___d50 ;
  assign NOT_rg_op_1_EQ_1_9_65_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d523 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118 &&
	     rg_addr_7_EQ_rg_lrsc_pa_05___d157 &&
	     NOT_cfg_verbosity_read__8_ULE_1_9___d50 ;
  assign NOT_rg_op_1_EQ_2_3_37_OR_NOT_rg_amo_funct7_4_B_ETC___d346 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_05_EQ_rg_addr_7___d106) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118 ;
  assign NOT_rg_op_1_EQ_2_3_37_OR_NOT_rg_amo_funct7_4_B_ETC___d498 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_05_EQ_rg_addr_7___d106) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118 &&
	     NOT_cfg_verbosity_read__8_ULE_1_9___d50 ;
  assign NOT_rg_op_1_EQ_2_3_37_OR_NOT_rg_amo_funct7_4_B_ETC___d502 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_05_EQ_rg_addr_7___d106) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118) &&
	     NOT_cfg_verbosity_read__8_ULE_1_9___d50 ;
  assign NOT_rg_op_1_EQ_2_3_37_OR_NOT_rg_amo_funct7_4_B_ETC___d506 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_05_EQ_rg_addr_7___d106) &&
	     NOT_cfg_verbosity_read__8_ULE_1_9___d50 ;
  assign _theResult_____1_fst__h2994 = { 32'h0, word64__h2747[63:32] } ;
  assign _theResult___fst__h2897 =
	     f_fabric_write_reqs$D_OUT[63:0] << shift_bits__h2744 ;
  assign access_exc_code__h2512 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd5 :
		  4'd7) :
	       4'd1 ;
  assign b__h19692 =
	     CAN_FIRE_RL_rl_fabric_send_write_req ?
	       ctr_wr_rsps_pending_crg$port0__write_1 :
	       ctr_wr_rsps_pending_crg ;
  assign cline_fabric_addr__h19791 = { rg_pa[31:5], 5'd0 } ;
  assign dmem_not_imem_AND_NOT_soc_map_m_is_mem_addr_rg_ETC___d124 =
	     dmem_not_imem && !soc_map$m_is_mem_addr || rg_op == 2'd0 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	     IF_rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d122 ;
  assign ld_val5119_BITS_15_TO_0__q33 = ld_val__h25119[15:0] ;
  assign ld_val5119_BITS_15_TO_8__q35 = ld_val__h25119[15:8] ;
  assign ld_val5119_BITS_23_TO_16__q36 = ld_val__h25119[23:16] ;
  assign ld_val5119_BITS_31_TO_0__q34 = ld_val__h25119[31:0] ;
  assign ld_val5119_BITS_31_TO_16__q37 = ld_val__h25119[31:16] ;
  assign ld_val5119_BITS_31_TO_24__q38 = ld_val__h25119[31:24] ;
  assign ld_val5119_BITS_39_TO_32__q39 = ld_val__h25119[39:32] ;
  assign ld_val5119_BITS_47_TO_32__q40 = ld_val__h25119[47:32] ;
  assign ld_val5119_BITS_47_TO_40__q42 = ld_val__h25119[47:40] ;
  assign ld_val5119_BITS_55_TO_48__q43 = ld_val__h25119[55:48] ;
  assign ld_val5119_BITS_63_TO_32__q41 = ld_val__h25119[63:32] ;
  assign ld_val5119_BITS_63_TO_48__q44 = ld_val__h25119[63:48] ;
  assign ld_val5119_BITS_63_TO_56__q45 = ld_val__h25119[63:56] ;
  assign ld_val5119_BITS_7_TO_0__q32 = ld_val__h25119[7:0] ;
  assign lrsc_result__h13336 =
	     !rg_lrsc_valid || !rg_lrsc_pa_05_EQ_rg_addr_7___d106 ;
  assign master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q2 =
	     master_xactor_f_rd_data$D_OUT[10:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q5 =
	     master_xactor_f_rd_data$D_OUT[18:11] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q3 =
	     master_xactor_f_rd_data$D_OUT[18:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q1 =
	     master_xactor_f_rd_data$D_OUT[26:19] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6 =
	     master_xactor_f_rd_data$D_OUT[34:19] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7 =
	     master_xactor_f_rd_data$D_OUT[34:27] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q4 =
	     master_xactor_f_rd_data$D_OUT[34:3] ;
  assign new_st_val__h16770 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h17052 :
	       _theResult_____2__h17048 ;
  assign new_st_val__h17052 = { 32'd0, _theResult_____2__h17048[31:0] } ;
  assign new_st_val__h17143 =
	     IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_IF_rg_f3_11_E_ETC___d344 +
	     IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_rg_st_amo_val_ETC___d408 ;
  assign new_st_val__h18123 = w1__h17040 ^ w2__h25351 ;
  assign new_st_val__h18127 = w1__h17040 & w2__h25351 ;
  assign new_st_val__h18131 = w1__h17040 | w2__h25351 ;
  assign new_st_val__h18135 =
	     (w1__h17040 < w2__h25351) ? w1__h17040 : w2__h25351 ;
  assign new_st_val__h18140 =
	     (w1__h17040 <= w2__h25351) ? w2__h25351 : w1__h17040 ;
  assign new_st_val__h18146 =
	     ((IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_IF_rg_f3_11_E_ETC___d344 ^
	       64'h8000000000000000) <
	      (IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_rg_st_amo_val_ETC___d408 ^
	       64'h8000000000000000)) ?
	       w1__h17040 :
	       w2__h25351 ;
  assign new_st_val__h18151 =
	     ((IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_IF_rg_f3_11_E_ETC___d344 ^
	       64'h8000000000000000) <=
	      (IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_rg_st_amo_val_ETC___d408 ^
	       64'h8000000000000000)) ?
	       w2__h25351 :
	       w1__h17040 ;
  assign new_st_val__h25361 = { 32'd0, _theResult_____2__h25357[31:0] } ;
  assign new_st_val__h25452 =
	     new_ld_val__h25311 +
	     IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_rg_st_amo_val_ETC___d408 ;
  assign new_st_val__h27298 = w1__h25349 ^ w2__h25351 ;
  assign new_st_val__h27302 = w1__h25349 & w2__h25351 ;
  assign new_st_val__h27306 = w1__h25349 | w2__h25351 ;
  assign new_st_val__h27310 =
	     (w1__h25349 < w2__h25351) ? w1__h25349 : w2__h25351 ;
  assign new_st_val__h27315 =
	     (w1__h25349 <= w2__h25351) ? w2__h25351 : w1__h25349 ;
  assign new_st_val__h27321 =
	     ((new_ld_val__h25311 ^ 64'h8000000000000000) <
	      (IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_rg_st_amo_val_ETC___d408 ^
	       64'h8000000000000000)) ?
	       w1__h25349 :
	       w2__h25351 ;
  assign new_st_val__h27326 =
	     ((new_ld_val__h25311 ^ 64'h8000000000000000) <=
	      (IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_rg_st_amo_val_ETC___d408 ^
	       64'h8000000000000000)) ?
	       w2__h25351 :
	       w1__h25349 ;
  assign new_value__h15638 =
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       64'd1 :
	       CASE_rg_f3_0b0_IF_rg_addr_7_BITS_2_TO_0_31_EQ__ETC__q48 ;
  assign new_value__h5664 =
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       word64__h5444 :
	       IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d304 ;
  assign new_word64___1__h20748 =
	     { master_xactor_f_rd_data$D_OUT[34:3], rg_lower_word32 } ;
  assign pa_ctag__h5303 = { 2'd0, rg_addr[31:12] } ;
  assign ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118 =
	     ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h5303 ;
  assign ram_state_and_ctag_cset_b_read__12_BIT_22_13_A_ETC___d160 =
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_ram_state_and_ctag_cset_b_read__12_BIT_22__ETC___d159 ;
  assign req_f3_BITS_1_TO_0_79_EQ_0b0_80_OR_req_f3_BITS_ETC___d909 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h12047 =
	     { {56{word64444_BITS_7_TO_0__q8[7]}},
	       word64444_BITS_7_TO_0__q8 } ;
  assign result__h12075 =
	     { {56{word64444_BITS_15_TO_8__q11[7]}},
	       word64444_BITS_15_TO_8__q11 } ;
  assign result__h12103 =
	     { {56{word64444_BITS_23_TO_16__q12[7]}},
	       word64444_BITS_23_TO_16__q12 } ;
  assign result__h12131 =
	     { {56{word64444_BITS_31_TO_24__q14[7]}},
	       word64444_BITS_31_TO_24__q14 } ;
  assign result__h12159 =
	     { {56{word64444_BITS_39_TO_32__q16[7]}},
	       word64444_BITS_39_TO_32__q16 } ;
  assign result__h12187 =
	     { {56{word64444_BITS_47_TO_40__q19[7]}},
	       word64444_BITS_47_TO_40__q19 } ;
  assign result__h12215 =
	     { {56{word64444_BITS_55_TO_48__q20[7]}},
	       word64444_BITS_55_TO_48__q20 } ;
  assign result__h12243 =
	     { {56{word64444_BITS_63_TO_56__q15[7]}},
	       word64444_BITS_63_TO_56__q15 } ;
  assign result__h12288 = { 56'd0, word64__h5444[7:0] } ;
  assign result__h12316 = { 56'd0, word64__h5444[15:8] } ;
  assign result__h12344 = { 56'd0, word64__h5444[23:16] } ;
  assign result__h12372 = { 56'd0, word64__h5444[31:24] } ;
  assign result__h12400 = { 56'd0, word64__h5444[39:32] } ;
  assign result__h12428 = { 56'd0, word64__h5444[47:40] } ;
  assign result__h12456 = { 56'd0, word64__h5444[55:48] } ;
  assign result__h12484 = { 56'd0, word64__h5444[63:56] } ;
  assign result__h12529 =
	     { {48{word64444_BITS_15_TO_0__q9[15]}},
	       word64444_BITS_15_TO_0__q9 } ;
  assign result__h12557 =
	     { {48{word64444_BITS_31_TO_16__q13[15]}},
	       word64444_BITS_31_TO_16__q13 } ;
  assign result__h12585 =
	     { {48{word64444_BITS_47_TO_32__q17[15]}},
	       word64444_BITS_47_TO_32__q17 } ;
  assign result__h12613 =
	     { {48{word64444_BITS_63_TO_48__q21[15]}},
	       word64444_BITS_63_TO_48__q21 } ;
  assign result__h12654 = { 48'd0, word64__h5444[15:0] } ;
  assign result__h12682 = { 48'd0, word64__h5444[31:16] } ;
  assign result__h12710 = { 48'd0, word64__h5444[47:32] } ;
  assign result__h12738 = { 48'd0, word64__h5444[63:48] } ;
  assign result__h12779 =
	     { {32{word64444_BITS_31_TO_0__q10[31]}},
	       word64444_BITS_31_TO_0__q10 } ;
  assign result__h12807 =
	     { {32{word64444_BITS_63_TO_32__q18[31]}},
	       word64444_BITS_63_TO_32__q18 } ;
  assign result__h12846 = { 32'd0, word64__h5444[31:0] } ;
  assign result__h12874 = { 32'd0, word64__h5444[63:32] } ;
  assign result__h23276 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q2[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q2 } ;
  assign result__h23303 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q5[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q5 } ;
  assign result__h23330 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q1[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q1 } ;
  assign result__h23357 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7 } ;
  assign result__h23509 = { 56'd0, master_xactor_f_rd_data$D_OUT[10:3] } ;
  assign result__h23536 = { 56'd0, master_xactor_f_rd_data$D_OUT[18:11] } ;
  assign result__h23563 = { 56'd0, master_xactor_f_rd_data$D_OUT[26:19] } ;
  assign result__h23590 = { 56'd0, master_xactor_f_rd_data$D_OUT[34:27] } ;
  assign result__h23688 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q3[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q3 } ;
  assign result__h23715 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6 } ;
  assign result__h23809 = { 48'd0, master_xactor_f_rd_data$D_OUT[18:3] } ;
  assign result__h23836 = { 48'd0, master_xactor_f_rd_data$D_OUT[34:19] } ;
  assign result__h23876 =
	     { {32{master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q4[31]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q4 } ;
  assign result__h23941 = { 32'd0, master_xactor_f_rd_data$D_OUT[34:3] } ;
  assign result__h25540 =
	     { {56{ld_val5119_BITS_7_TO_0__q32[7]}},
	       ld_val5119_BITS_7_TO_0__q32 } ;
  assign result__h26434 =
	     { {56{ld_val5119_BITS_15_TO_8__q35[7]}},
	       ld_val5119_BITS_15_TO_8__q35 } ;
  assign result__h26462 =
	     { {56{ld_val5119_BITS_23_TO_16__q36[7]}},
	       ld_val5119_BITS_23_TO_16__q36 } ;
  assign result__h26490 =
	     { {56{ld_val5119_BITS_31_TO_24__q38[7]}},
	       ld_val5119_BITS_31_TO_24__q38 } ;
  assign result__h26518 =
	     { {56{ld_val5119_BITS_39_TO_32__q39[7]}},
	       ld_val5119_BITS_39_TO_32__q39 } ;
  assign result__h26546 =
	     { {56{ld_val5119_BITS_47_TO_40__q42[7]}},
	       ld_val5119_BITS_47_TO_40__q42 } ;
  assign result__h26574 =
	     { {56{ld_val5119_BITS_55_TO_48__q43[7]}},
	       ld_val5119_BITS_55_TO_48__q43 } ;
  assign result__h26602 =
	     { {56{ld_val5119_BITS_63_TO_56__q45[7]}},
	       ld_val5119_BITS_63_TO_56__q45 } ;
  assign result__h26647 = { 56'd0, ld_val__h25119[7:0] } ;
  assign result__h26675 = { 56'd0, ld_val__h25119[15:8] } ;
  assign result__h26703 = { 56'd0, ld_val__h25119[23:16] } ;
  assign result__h26731 = { 56'd0, ld_val__h25119[31:24] } ;
  assign result__h26759 = { 56'd0, ld_val__h25119[39:32] } ;
  assign result__h26787 = { 56'd0, ld_val__h25119[47:40] } ;
  assign result__h26815 = { 56'd0, ld_val__h25119[55:48] } ;
  assign result__h26843 = { 56'd0, ld_val__h25119[63:56] } ;
  assign result__h26888 =
	     { {48{ld_val5119_BITS_15_TO_0__q33[15]}},
	       ld_val5119_BITS_15_TO_0__q33 } ;
  assign result__h26916 =
	     { {48{ld_val5119_BITS_31_TO_16__q37[15]}},
	       ld_val5119_BITS_31_TO_16__q37 } ;
  assign result__h26944 =
	     { {48{ld_val5119_BITS_47_TO_32__q40[15]}},
	       ld_val5119_BITS_47_TO_32__q40 } ;
  assign result__h26972 =
	     { {48{ld_val5119_BITS_63_TO_48__q44[15]}},
	       ld_val5119_BITS_63_TO_48__q44 } ;
  assign result__h27013 = { 48'd0, ld_val__h25119[15:0] } ;
  assign result__h27041 = { 48'd0, ld_val__h25119[31:16] } ;
  assign result__h27069 = { 48'd0, ld_val__h25119[47:32] } ;
  assign result__h27097 = { 48'd0, ld_val__h25119[63:48] } ;
  assign result__h27138 =
	     { {32{ld_val5119_BITS_31_TO_0__q34[31]}},
	       ld_val5119_BITS_31_TO_0__q34 } ;
  assign result__h27166 =
	     { {32{ld_val5119_BITS_63_TO_32__q41[31]}},
	       ld_val5119_BITS_63_TO_32__q41 } ;
  assign result__h27205 = { 32'd0, ld_val__h25119[31:0] } ;
  assign result__h27233 = { 32'd0, ld_val__h25119[63:32] } ;
  assign rg_addr_7_EQ_rg_lrsc_pa_05___d157 = rg_addr == rg_lrsc_pa ;
  assign rg_amo_funct7_4_BITS_6_TO_2_5_EQ_0b10_6_AND_NO_ETC___d334 =
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118) &&
	     rg_addr_7_EQ_rg_lrsc_pa_05___d157 &&
	     NOT_cfg_verbosity_read__8_ULE_1_9___d50 ;
  assign rg_lrsc_pa_05_EQ_rg_addr_7___d106 = rg_lrsc_pa == rg_addr ;
  assign rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d135 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118) ;
  assign rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d171 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset_b_read__12_BIT_22_13_A_ETC___d160 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d169 ;
  assign rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d173 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118 ;
  assign rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d176 =
	     rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d173 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h13336 ;
  assign rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d317 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118 &&
	     NOT_cfg_verbosity_read__8_ULE_1_9___d50 ;
  assign rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d330 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118) &&
	     NOT_cfg_verbosity_read__8_ULE_1_9___d50 ;
  assign rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d169 =
	     rg_op == 2'd1 && rg_addr_7_EQ_rg_lrsc_pa_05___d157 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_rg_op_1_EQ_1_9_65_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d168 ;
  assign rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d349 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_1_EQ_2_3_37_OR_NOT_rg_amo_funct7_4_B_ETC___d346 ||
	     NOT_rg_op_1_EQ_1_9_65_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d348 ;
  assign rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d478 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_05_EQ_rg_addr_7___d106) ;
  assign rg_op_1_EQ_2_3_AND_rg_amo_funct7_4_BITS_6_TO_2_ETC___d512 =
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h13336 &&
	     NOT_cfg_verbosity_read__8_ULE_1_9___d50 ;
  assign rg_st_amo_val_BITS_31_TO_0__q24 = rg_st_amo_val[31:0] ;
  assign rg_state_3_EQ_12_96_AND_rg_op_1_EQ_0_2_OR_rg_o_ETC___d598 =
	     rg_state == 4'd12 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     b__h19692 == 4'd0 ;
  assign shift_bits__h2744 = { f_fabric_write_reqs$D_OUT[66:64], 3'b0 } ;
  assign strobe64___1__h2993 = { 4'h0, strobe64__h2749[7:4] } ;
  assign strobe64__h2896 = 8'b00000001 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign strobe64__h2899 = 8'b00000011 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign strobe64__h2902 = 8'b00001111 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign w15345_BITS_31_TO_0__q47 = w1__h25345[31:0] ;
  assign w1___1__h17111 =
	     { 32'd0,
	       IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d304[31:0] } ;
  assign w1___1__h25420 = { 32'd0, w1__h25345[31:0] } ;
  assign w2___1__h25421 = { 32'd0, rg_st_amo_val[31:0] } ;
  assign w2__h25351 = (rg_f3 == 3'b010) ? w2___1__h25421 : rg_st_amo_val ;
  assign word64444_BITS_15_TO_0__q9 = word64__h5444[15:0] ;
  assign word64444_BITS_15_TO_8__q11 = word64__h5444[15:8] ;
  assign word64444_BITS_23_TO_16__q12 = word64__h5444[23:16] ;
  assign word64444_BITS_31_TO_0__q10 = word64__h5444[31:0] ;
  assign word64444_BITS_31_TO_16__q13 = word64__h5444[31:16] ;
  assign word64444_BITS_31_TO_24__q14 = word64__h5444[31:24] ;
  assign word64444_BITS_39_TO_32__q16 = word64__h5444[39:32] ;
  assign word64444_BITS_47_TO_32__q17 = word64__h5444[47:32] ;
  assign word64444_BITS_47_TO_40__q19 = word64__h5444[47:40] ;
  assign word64444_BITS_55_TO_48__q20 = word64__h5444[55:48] ;
  assign word64444_BITS_63_TO_32__q18 = word64__h5444[63:32] ;
  assign word64444_BITS_63_TO_48__q21 = word64__h5444[63:48] ;
  assign word64444_BITS_63_TO_56__q15 = word64__h5444[63:56] ;
  assign word64444_BITS_7_TO_0__q8 = word64__h5444[7:0] ;
  assign word64__h23124 = {2{master_xactor_f_rd_data$D_OUT[34:3]}} ;
  assign word64__h5444 = ram_word64_set$DOB & y__h5691 ;
  assign x__h13346 = { 63'd0, lrsc_result__h13336 } ;
  assign x__h25340 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h25361 :
	       _theResult_____2__h25357 ;
  assign x__h2966 =
	     f_fabric_write_reqs$D_OUT[66] ?
	       _theResult_____1_fst__h2994 :
	       word64__h2747 ;
  assign x__h3104 =
	     f_fabric_write_reqs$D_OUT[66] ?
	       strobe64___1__h2993 :
	       strobe64__h2749 ;
  assign y__h5691 =
	     {64{ram_state_and_ctag_cset$DOB[22] &&
		 ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118}} ;
  always@(rg_f3)
  begin
    case (rg_f3[1:0])
      2'b0: value__h24897 = 3'b0;
      2'b01: value__h24897 = 3'b001;
      2'b10: value__h24897 = 3'b010;
      2'd3: value__h24897 = 3'b011;
    endcase
  end
  always@(f_fabric_write_reqs$D_OUT)
  begin
    case (f_fabric_write_reqs$D_OUT[97:96])
      2'b0: x__h2777 = 3'b0;
      2'b01: x__h2777 = 3'b001;
      2'b10: x__h2777 = 3'b010;
      2'b11: x__h2777 = 3'b011;
    endcase
  end
  always@(f_fabric_write_reqs$D_OUT or
	  strobe64__h2896 or strobe64__h2899 or strobe64__h2902)
  begin
    case (f_fabric_write_reqs$D_OUT[97:96])
      2'b0: strobe64__h2749 = strobe64__h2896;
      2'b01: strobe64__h2749 = strobe64__h2899;
      2'b10: strobe64__h2749 = strobe64__h2902;
      2'b11: strobe64__h2749 = 8'b11111111;
    endcase
  end
  always@(f_fabric_write_reqs$D_OUT or _theResult___fst__h2897)
  begin
    case (f_fabric_write_reqs$D_OUT[97:96])
      2'b0, 2'b01, 2'b10: word64__h2747 = _theResult___fst__h2897;
      2'd3: word64__h2747 = f_fabric_write_reqs$D_OUT[63:0];
    endcase
  end
  always@(rg_addr or
	  result__h12047 or
	  result__h12075 or
	  result__h12103 or
	  result__h12131 or
	  result__h12159 or
	  result__h12187 or result__h12215 or result__h12243)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d244 =
	      result__h12047;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d244 =
	      result__h12075;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d244 =
	      result__h12103;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d244 =
	      result__h12131;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d244 =
	      result__h12159;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d244 =
	      result__h12187;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d244 =
	      result__h12215;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d244 =
	      result__h12243;
    endcase
  end
  always@(rg_addr or
	  result__h12288 or
	  result__h12316 or
	  result__h12344 or
	  result__h12372 or
	  result__h12400 or
	  result__h12428 or result__h12456 or result__h12484)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d261 =
	      result__h12288;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d261 =
	      result__h12316;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d261 =
	      result__h12344;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d261 =
	      result__h12372;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d261 =
	      result__h12400;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d261 =
	      result__h12428;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d261 =
	      result__h12456;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d261 =
	      result__h12484;
    endcase
  end
  always@(rg_addr or
	  result__h12529 or
	  result__h12557 or result__h12585 or result__h12613)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d274 =
	      result__h12529;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d274 =
	      result__h12557;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d274 =
	      result__h12585;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d274 =
	      result__h12613;
      default: IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d274 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h12654 or
	  result__h12682 or result__h12710 or result__h12738)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d283 =
	      result__h12654;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d283 =
	      result__h12682;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d283 =
	      result__h12710;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d283 =
	      result__h12738;
      default: IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d283 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h12846 or result__h12874)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d295 =
	      result__h12846;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d295 =
	      result__h12874;
      default: IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d295 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h12779 or result__h12807)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2779_0x4_re_ETC__q22 =
	      result__h12779;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2779_0x4_re_ETC__q22 =
	      result__h12807;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result2779_0x4_re_ETC__q22 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d244 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d274 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2779_0x4_re_ETC__q22 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d297 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d261 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d283 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d295)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d304 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d244;
      3'b001:
	  IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d304 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d274;
      3'b010:
	  IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d304 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result2779_0x4_re_ETC__q22;
      3'b011:
	  IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d304 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d297;
      3'b100:
	  IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d304 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d261;
      3'b101:
	  IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d304 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d283;
      3'b110:
	  IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d304 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d295;
      3'd7: IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d304 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d244 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d274 or
	  w1___1__h17111 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d297 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d261 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d283 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d295)
  begin
    case (rg_f3)
      3'b0:
	  w1__h17040 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d244;
      3'b001:
	  w1__h17040 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d274;
      3'b010: w1__h17040 = w1___1__h17111;
      3'b011:
	  w1__h17040 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d297;
      3'b100:
	  w1__h17040 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d261;
      3'b101:
	  w1__h17040 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d283;
      3'b110:
	  w1__h17040 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d295;
      3'd7: w1__h17040 = 64'd0;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d393 =
	      { ram_word64_set$DOB[63:16], rg_st_amo_val[15:0] };
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d393 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d393 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d393 =
	      { rg_st_amo_val[15:0], ram_word64_set$DOB[47:0] };
      default: IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d393 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d384 =
	      { ram_word64_set$DOB[63:8], rg_st_amo_val[7:0] };
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d384 =
	      { ram_word64_set$DOB[63:16],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d384 =
	      { ram_word64_set$DOB[63:24],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d384 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d384 =
	      { ram_word64_set$DOB[63:40],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d384 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d384 =
	      { ram_word64_set$DOB[63:56],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d384 =
	      { rg_st_amo_val[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d244 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d274 or
	  IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC__q23 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d297 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d261 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d283 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d295)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_IF_rg_f3_11_E_ETC___d344 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d244;
      3'b001:
	  IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_IF_rg_f3_11_E_ETC___d344 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d274;
      3'b010:
	  IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_IF_rg_f3_11_E_ETC___d344 =
	      { {32{IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC__q23[31]}},
		IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC__q23 };
      3'b011:
	  IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_IF_rg_f3_11_E_ETC___d344 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d297;
      3'b100:
	  IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_IF_rg_f3_11_E_ETC___d344 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d261;
      3'b101:
	  IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_IF_rg_f3_11_E_ETC___d344 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d283;
      3'b110:
	  IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_IF_rg_f3_11_E_ETC___d344 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d295;
      3'd7: IF_rg_f3_11_EQ_0b10_84_THEN_SEXT_IF_rg_f3_11_E_ETC___d344 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h18151 or
	  new_st_val__h17143 or
	  w2__h25351 or
	  new_st_val__h18123 or
	  new_st_val__h18131 or
	  new_st_val__h18127 or
	  new_st_val__h18146 or new_st_val__h18135 or new_st_val__h18140)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h17048 = new_st_val__h17143;
      5'b00001: _theResult_____2__h17048 = w2__h25351;
      5'b00100: _theResult_____2__h17048 = new_st_val__h18123;
      5'b01000: _theResult_____2__h17048 = new_st_val__h18131;
      5'b01100: _theResult_____2__h17048 = new_st_val__h18127;
      5'b10000: _theResult_____2__h17048 = new_st_val__h18146;
      5'b11000: _theResult_____2__h17048 = new_st_val__h18135;
      5'b11100: _theResult_____2__h17048 = new_st_val__h18140;
      default: _theResult_____2__h17048 = new_st_val__h18151;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or new_st_val__h16770)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d467 =
	      { ram_word64_set$DOB[63:16], new_st_val__h16770[15:0] };
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d467 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h16770[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d467 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h16770[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d467 =
	      { new_st_val__h16770[15:0], ram_word64_set$DOB[47:0] };
      default: IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d467 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or new_st_val__h16770)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d458 =
	      { ram_word64_set$DOB[63:8], new_st_val__h16770[7:0] };
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d458 =
	      { ram_word64_set$DOB[63:16],
		new_st_val__h16770[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d458 =
	      { ram_word64_set$DOB[63:24],
		new_st_val__h16770[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d458 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h16770[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d458 =
	      { ram_word64_set$DOB[63:40],
		new_st_val__h16770[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d458 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h16770[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d458 =
	      { ram_word64_set$DOB[63:56],
		new_st_val__h16770[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d458 =
	      { new_st_val__h16770[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q25 =
	      { ram_word64_set$DOB[63:32], rg_st_amo_val[31:0] };
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q25 =
	      { rg_st_amo_val[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q25 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d384 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d393 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q25 or
	  rg_st_amo_val)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d402 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d384;
      3'b001:
	  IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d402 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d393;
      3'b010:
	  IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d402 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q25;
      3'b011:
	  IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d402 =
	      rg_st_amo_val;
      default: IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d402 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or
	  result__h23509 or
	  result__h23536 or result__h23563 or result__h23590)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d644 =
	      result__h23509;
      3'h1, 3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d644 =
	      result__h23536;
      3'h2, 3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d644 =
	      result__h23563;
      3'h3, 3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d644 =
	      result__h23590;
    endcase
  end
  always@(rg_addr or
	  result__h23276 or
	  result__h23303 or result__h23330 or result__h23357)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d632 =
	      result__h23276;
      3'h1, 3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d632 =
	      result__h23303;
      3'h2, 3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d632 =
	      result__h23330;
      3'h3, 3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d632 =
	      result__h23357;
    endcase
  end
  always@(rg_addr or result__h23688 or result__h23715)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3688_0x2_re_ETC__q26 =
	      result__h23688;
      3'h2, 3'h6:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3688_0x2_re_ETC__q26 =
	      result__h23715;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result3688_0x2_re_ETC__q26 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h23876)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3876_0x4_re_ETC__q27 =
	      result__h23876;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result3876_0x4_re_ETC__q27 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h23809 or result__h23836)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3809_0x2_re_ETC__q28 =
	      result__h23809;
      3'h2, 3'h6:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3809_0x2_re_ETC__q28 =
	      result__h23836;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result3809_0x2_re_ETC__q28 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h23941)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3941_0x4_re_ETC__q29 =
	      result__h23941;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result3941_0x4_re_ETC__q29 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d632 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3688_0x2_re_ETC__q26 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3876_0x4_re_ETC__q27 or
	  rg_addr or
	  word64__h23124 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d644 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3809_0x2_re_ETC__q28 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3941_0x4_re_ETC__q29)
  begin
    case (rg_f3)
      3'b0:
	  ld_val__h23103 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d632;
      3'b001:
	  ld_val__h23103 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result3688_0x2_re_ETC__q26;
      3'b010:
	  ld_val__h23103 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result3876_0x4_re_ETC__q27;
      3'b011:
	  ld_val__h23103 = (rg_addr[2:0] == 3'h0) ? word64__h23124 : 64'd0;
      3'b100:
	  ld_val__h23103 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d644;
      3'b101:
	  ld_val__h23103 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result3809_0x2_re_ETC__q28;
      3'b110:
	  ld_val__h23103 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result3941_0x4_re_ETC__q29;
      3'd7: ld_val__h23103 = 64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h23509 or
	  result__h23536 or result__h23563 or result__h23590)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d711 =
	      result__h23509;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d711 =
	      result__h23536;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d711 =
	      result__h23563;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d711 =
	      result__h23590;
      default: IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d711 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h23276 or
	  result__h23303 or result__h23330 or result__h23357)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d707 =
	      result__h23276;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d707 =
	      result__h23303;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d707 =
	      result__h23330;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d707 =
	      result__h23357;
      default: IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d707 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h23688 or result__h23715)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3688_0x2_re_ETC__q30 =
	      result__h23688;
      3'h2:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3688_0x2_re_ETC__q30 =
	      result__h23715;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result3688_0x2_re_ETC__q30 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h23809 or result__h23836)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3809_0x2_re_ETC__q31 =
	      result__h23809;
      3'h2:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3809_0x2_re_ETC__q31 =
	      result__h23836;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result3809_0x2_re_ETC__q31 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d707 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3688_0x2_re_ETC__q30 or
	  rg_addr or
	  result__h23876 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d717 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d711 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3809_0x2_re_ETC__q31)
  begin
    case (rg_f3)
      3'b0:
	  ld_val__h25119 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d707;
      3'b001:
	  ld_val__h25119 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result3688_0x2_re_ETC__q30;
      3'b010:
	  ld_val__h25119 = (rg_addr[2:0] == 3'h0) ? result__h23876 : 64'd0;
      3'b011, 3'b110:
	  ld_val__h25119 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d717;
      3'b100:
	  ld_val__h25119 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d711;
      3'b101:
	  ld_val__h25119 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result3809_0x2_re_ETC__q31;
      3'd7: ld_val__h25119 = 64'd0;
    endcase
  end
  always@(rg_addr or result__h27205 or result__h27233)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d793 =
	      result__h27205;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d793 =
	      result__h27233;
      default: IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d793 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h27013 or
	  result__h27041 or result__h27069 or result__h27097)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d783 =
	      result__h27013;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d783 =
	      result__h27041;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d783 =
	      result__h27069;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d783 =
	      result__h27097;
      default: IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d783 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h26888 or
	  result__h26916 or result__h26944 or result__h26972)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d775 =
	      result__h26888;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d775 =
	      result__h26916;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d775 =
	      result__h26944;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d775 =
	      result__h26972;
      default: IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d775 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h26647 or
	  result__h26675 or
	  result__h26703 or
	  result__h26731 or
	  result__h26759 or
	  result__h26787 or result__h26815 or result__h26843)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d763 =
	      result__h26647;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d763 =
	      result__h26675;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d763 =
	      result__h26703;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d763 =
	      result__h26731;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d763 =
	      result__h26759;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d763 =
	      result__h26787;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d763 =
	      result__h26815;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d763 =
	      result__h26843;
    endcase
  end
  always@(rg_addr or
	  result__h25540 or
	  result__h26434 or
	  result__h26462 or
	  result__h26490 or
	  result__h26518 or
	  result__h26546 or result__h26574 or result__h26602)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d747 =
	      result__h25540;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d747 =
	      result__h26434;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d747 =
	      result__h26462;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d747 =
	      result__h26490;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d747 =
	      result__h26518;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d747 =
	      result__h26546;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d747 =
	      result__h26574;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d747 =
	      result__h26602;
    endcase
  end
  always@(rg_addr or result__h27138 or result__h27166)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result7138_0x4_re_ETC__q46 =
	      result__h27138;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result7138_0x4_re_ETC__q46 =
	      result__h27166;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result7138_0x4_re_ETC__q46 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d747 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d775 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result7138_0x4_re_ETC__q46 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_IF__ETC___d794 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d763 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d783 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d793)
  begin
    case (rg_f3)
      3'b0:
	  w1__h25345 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d747;
      3'b001:
	  w1__h25345 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d775;
      3'b010:
	  w1__h25345 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result7138_0x4_re_ETC__q46;
      3'b011:
	  w1__h25345 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_IF__ETC___d794;
      3'b100:
	  w1__h25345 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d763;
      3'b101:
	  w1__h25345 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d783;
      3'b110:
	  w1__h25345 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d793;
      3'd7: w1__h25345 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d747 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d775 or
	  w1___1__h25420 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_IF__ETC___d794 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d763 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d783 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d793)
  begin
    case (rg_f3)
      3'b0:
	  w1__h25349 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d747;
      3'b001:
	  w1__h25349 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d775;
      3'b010: w1__h25349 = w1___1__h25420;
      3'b011:
	  w1__h25349 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_IF__ETC___d794;
      3'b100:
	  w1__h25349 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d763;
      3'b101:
	  w1__h25349 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d783;
      3'b110:
	  w1__h25349 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d793;
      3'd7: w1__h25349 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d747 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d775 or
	  w15345_BITS_31_TO_0__q47 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_IF__ETC___d794 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d763 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d783 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d793)
  begin
    case (rg_f3)
      3'b0:
	  new_ld_val__h25311 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d747;
      3'b001:
	  new_ld_val__h25311 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_SEX_ETC___d775;
      3'b010:
	  new_ld_val__h25311 =
	      { {32{w15345_BITS_31_TO_0__q47[31]}},
		w15345_BITS_31_TO_0__q47 };
      3'b011:
	  new_ld_val__h25311 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_IF__ETC___d794;
      3'b100:
	  new_ld_val__h25311 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d763;
      3'b101:
	  new_ld_val__h25311 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d783;
      3'b110:
	  new_ld_val__h25311 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_0_C_ETC___d793;
      3'd7: new_ld_val__h25311 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h27326 or
	  new_st_val__h25452 or
	  w2__h25351 or
	  new_st_val__h27298 or
	  new_st_val__h27306 or
	  new_st_val__h27302 or
	  new_st_val__h27321 or new_st_val__h27310 or new_st_val__h27315)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h25357 = new_st_val__h25452;
      5'b00001: _theResult_____2__h25357 = w2__h25351;
      5'b00100: _theResult_____2__h25357 = new_st_val__h27298;
      5'b01000: _theResult_____2__h25357 = new_st_val__h27306;
      5'b01100: _theResult_____2__h25357 = new_st_val__h27302;
      5'b10000: _theResult_____2__h25357 = new_st_val__h27321;
      5'b11000: _theResult_____2__h25357 = new_st_val__h27310;
      5'b11100: _theResult_____2__h25357 = new_st_val__h27315;
      default: _theResult_____2__h25357 = new_st_val__h27326;
    endcase
  end
  always@(rg_f3 or IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_1_E_ETC___d312)
  begin
    case (rg_f3)
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  CASE_rg_f3_0b0_IF_rg_addr_7_BITS_2_TO_0_31_EQ__ETC__q48 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_1_E_ETC___d312;
      3'd7: CASE_rg_f3_0b0_IF_rg_addr_7_BITS_2_TO_0_31_EQ__ETC__q48 = 64'd0;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or new_st_val__h16770)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q49 =
	      { ram_word64_set$DOB[63:32], new_st_val__h16770[31:0] };
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q49 =
	      { new_st_val__h16770[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q49 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d458 or
	  IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d467 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q49 or
	  new_st_val__h16770)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d476 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d458;
      3'b001:
	  IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d476 =
	      IF_rg_addr_7_BITS_2_TO_0_31_EQ_0x0_13_THEN_ram_ETC___d467;
      3'b010:
	  IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d476 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q49;
      3'b011:
	  IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d476 =
	      new_st_val__h16770;
      default: IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d476 =
		   ram_word64_set$DOB;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (ctr_wr_rsps_pending_crg$EN)
	  ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      ctr_wr_rsps_pending_crg$D_IN;
	if (rg_cset_in_cache$EN)
	  rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY rg_cset_in_cache$D_IN;
	if (rg_lower_word32_full$EN)
	  rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      rg_lower_word32_full$D_IN;
	if (rg_lrsc_valid$EN)
	  rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY rg_lrsc_valid$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_amo_funct7$EN)
      rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY rg_amo_funct7$D_IN;
    if (rg_error_during_refill$EN)
      rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= `BSV_ASSIGNMENT_DELAY rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= `BSV_ASSIGNMENT_DELAY rg_ld_val$D_IN;
    if (rg_lower_word32$EN)
      rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY rg_lower_word32$D_IN;
    if (rg_lrsc_pa$EN) rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY rg_lrsc_pa$D_IN;
    if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= `BSV_ASSIGNMENT_DELAY rg_pa$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= `BSV_ASSIGNMENT_DELAY rg_pte_pa$D_IN;
    if (rg_st_amo_val$EN)
      rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY rg_st_amo_val$D_IN;
    if (rg_word64_set_in_cache$EN)
      rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    ctr_wr_rsps_pending_crg = 4'hA;
    rg_addr = 32'hAAAAAAAA;
    rg_amo_funct7 = 7'h2A;
    rg_cset_in_cache = 7'h2A;
    rg_error_during_refill = 1'h0;
    rg_exc_code = 4'hA;
    rg_f3 = 3'h2;
    rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    rg_lower_word32 = 32'hAAAAAAAA;
    rg_lower_word32_full = 1'h0;
    rg_lrsc_pa = 32'hAAAAAAAA;
    rg_lrsc_valid = 1'h0;
    rg_op = 2'h2;
    rg_pa = 32'hAAAAAAAA;
    rg_pte_pa = 32'hAAAAAAAA;
    rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_word64_set_in_cache = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", f_fabric_write_reqs$D_OUT[95:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", x__h2777);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", x__h2966[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", x__h3104[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	begin
	  v__h4201 = $stime;
	  #0;
	end
    v__h4195 = v__h4201 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4195,
		   "D_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
	else
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4195,
		   "I_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50 &&
	  f_reset_reqs$D_OUT)
	begin
	  v__h4300 = $stime;
	  #0;
	end
    v__h4294 = v__h4300 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50 &&
	  f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: Flushed", v__h4294, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_reset: Flushed", v__h4294, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	begin
	  v__h4449 = $stime;
	  #0;
	end
    v__h4443 = v__h4449 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4443,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4443,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 pa_ctag__h5303,
		 rg_addr[11:5],
		 rg_addr[4:3],
		 rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("        CSet 0x%0x: (state, tag):", rg_addr[11:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50 &&
	  ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50 &&
	  !ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50 &&
	  ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50 &&
	  !ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 4'hA, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && dmem_not_imem &&
	  !soc_map$m_is_mem_addr &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d317)
	begin
	  v__h12959 = $stime;
	  #0;
	end
    v__h12953 = v__h12959 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d317)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h12953,
		   "D_MMU_Cache",
		   rg_addr,
		   word64__h5444,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h12953,
		   "I_MMU_Cache",
		   rg_addr,
		   word64__h5444,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00010 &&
	  ram_state_and_ctag_cset$DOB[22] &&
	  ram_state_and_ctag_cset_b_read__12_BITS_21_TO__ETC___d118 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$display("        AMO LR: reserving PA 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d317)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 rg_addr,
		 word64__h5444);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d330)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7_4_BITS_6_TO_2_5_EQ_0b10_6_AND_NO_ETC___d334)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d485)
	$display("        ST: cancelling LR/SC reservation for PA", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00011 &&
	  rg_lrsc_valid &&
	  !rg_lrsc_pa_05_EQ_rg_addr_7___d106 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 rg_lrsc_pa,
		 rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00011 &&
	  !rg_lrsc_valid &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d497)
	$display("        AMO SC result = %0d", lrsc_result__h13336);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_1_EQ_0_2_36_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d500)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_1_EQ_0_2_36_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d500)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_1_EQ_0_2_36_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d500)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_1_EQ_0_2_36_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d500)
	$write(" 0x%0x",
	       IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d402);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_1_EQ_0_2_36_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d500)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op != 2'd0 &&
	  (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	  (rg_op == 2'd1 ||
	   rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	  NOT_rg_op_1_EQ_2_3_37_OR_NOT_rg_amo_funct7_4_B_ETC___d502)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_1_EQ_0_2_36_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d508)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_1_EQ_0_2_36_AND_NOT_rg_op_1_EQ_2_3_3_ETC___d508)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_1_EQ_2_3_AND_rg_amo_funct7_4_BITS_6_TO_2_ETC___d512)
	begin
	  v__h16548 = $stime;
	  #0;
	end
    v__h16542 = v__h16548 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_1_EQ_2_3_AND_rg_amo_funct7_4_BITS_6_TO_2_ETC___d512)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h16542,
		   "D_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h16542,
		   "I_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_1_EQ_2_3_AND_rg_amo_funct7_4_BITS_6_TO_2_ETC___d512)
	$display("        AMO SC: Fail response for addr 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d518)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d521)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h f3 %0d rs2_val 0x%0h",
		 rg_addr,
		 rg_amo_funct7,
		 rg_f3,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d521)
	$display("          PA 0x%0h ", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d521)
	$display("          Cache word64 0x%0h, load-result 0x%0h",
		 word64__h5444,
		 word64__h5444);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d521)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 word64__h5444,
		 word64__h5444,
		 new_st_val__h16770);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d521)
	$write("          New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d521)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d521)
	$write(" 0x%0x",
	       IF_rg_f3_11_EQ_0b0_12_THEN_IF_rg_addr_7_BITS_2_ETC___d476);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d521)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_53_OR_soc_map_m_is_mem_addr__ETC___d525)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	begin
	  v__h19738 = $stime;
	  #0;
	end
    v__h19732 = v__h19738 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h19732,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h19732,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("    To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", cline_fabric_addr__h19791);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 8'd7);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 3'b010);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	begin
	  v__h20379 = $stime;
	  #0;
	end
    v__h20373 = v__h20379 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h20373,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h20373,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[38:35]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[34:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	begin
	  v__h20620 = $stime;
	  #0;
	end
    v__h20614 = v__h20620 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h20614,
		   "D_MMU_Cache",
		   access_exc_code__h2512);
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h20614,
		   "I_MMU_Cache",
		   access_exc_code__h2512);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop && rg_lower_word32_full &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$display("        32b fabric: concat with rg_lower_word32: new_word64 0x%0x",
		 new_word64___1__h20748);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop && rg_lower_word32_full &&
	  rg_word64_set_in_cache[1:0] == 2'd3 &&
	  (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	   rg_error_during_refill) &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop && rg_lower_word32_full &&
	  rg_word64_set_in_cache[1:0] == 2'd3 &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !rg_error_during_refill &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop && rg_lower_word32_full &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$display("        Updating Cache word64_set 0x%0h, word64_in_cline %0d) old => new",
		 rg_word64_set_in_cache,
		 rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop && rg_lower_word32_full &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop && rg_lower_word32_full &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop && rg_lower_word32_full &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop && rg_lower_word32_full &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop && rg_lower_word32_full &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$write(" 0x%0x", new_word64___1__h20748);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop && rg_lower_word32_full &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop && !rg_lower_word32_full &&
	  NOT_cfg_verbosity_read__8_ULE_2_44___d545)
	$display("        Recording rdata in rg_lower_word32");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 rg_addr[11:5],
		 rg_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	begin
	  v__h22644 = $stime;
	  #0;
	end
    v__h22638 = v__h22644 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h22638,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h22638,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", value__h24897);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	begin
	  v__h22994 = $stime;
	  #0;
	end
    v__h22988 = v__h22994 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h22988,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h22988,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[38:35]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[34:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	begin
	  v__h24096 = $stime;
	  #0;
	end
    v__h24090 = v__h24096 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h24090,
		   "D_MMU_Cache",
		   rg_addr,
		   ld_val__h23103);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h24090,
		   "I_MMU_Cache",
		   rg_addr,
		   ld_val__h23103);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	begin
	  v__h24203 = $stime;
	  #0;
	end
    v__h24197 = v__h24203 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h24197,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h24197,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	begin
	  v__h24308 = $stime;
	  #0;
	end
    v__h24302 = v__h24308 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h24302,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h24302,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	begin
	  v__h24388 = $stime;
	  #0;
	end
    v__h24382 = v__h24388 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h24382,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h24382,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	begin
	  v__h24598 = $stime;
	  #0;
	end
    v__h24592 = v__h24598 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h24592,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h24592,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	begin
	  v__h24716 = $stime;
	  #0;
	end
    v__h24710 = v__h24716 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h24710,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h24710,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", value__h24897);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	begin
	  v__h25010 = $stime;
	  #0;
	end
    v__h25004 = v__h25010 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h25004,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h25004,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[38:35]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[34:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	begin
	  v__h25185 = $stime;
	  #0;
	end
    v__h25179 = v__h25185 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h25179,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h25179,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	begin
	  v__h27430 = $stime;
	  #0;
	end
    v__h27424 = v__h27430 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h27424,
		   "D_MMU_Cache",
		   rg_addr,
		   new_ld_val__h25311);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h27424,
		   "I_MMU_Cache",
		   rg_addr,
		   new_ld_val__h25311);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	begin
	  v__h25281 = $stime;
	  #0;
	end
    v__h25275 = v__h25281 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h25275,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h25275,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	begin
	  v__h28037 = $stime;
	  #0;
	end
    v__h28031 = v__h28037 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h28031,
		 "D_MMU_Cache",
		 $unsigned(b__h19692));
	else
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h28031,
		 "I_MMU_Cache",
		 $unsigned(b__h19692));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	begin
	  v__h27998 = $stime;
	  #0;
	end
    v__h27992 = v__h27998 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h27992,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h27992,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset)
	begin
	  v__h3831 = $stime;
	  #0;
	end
    v__h3825 = v__h3831 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset)
	if (dmem_not_imem)
	  $display("%0d: %s: cache size %0d KB, associativity %0d, line size %0d bytes (= %0d XLEN words)",
		   v__h3825,
		   "D_MMU_Cache",
		   $signed(32'd4),
		   $signed(32'd1),
		   $signed(32'd32),
		   $signed(32'd8));
	else
	  $display("%0d: %s: cache size %0d KB, associativity %0d, line size %0d bytes (= %0d XLEN words)",
		   v__h3825,
		   "I_MMU_Cache",
		   $signed(32'd4),
		   $signed(32'd1),
		   $signed(32'd32),
		   $signed(32'd8));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	begin
	  v__h28385 = $stime;
	  #0;
	end
    v__h28379 = v__h28385 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("%0d: %m.req: op:", v__h28379);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__8_ULE_1_9___d50 && req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__8_ULE_1_9___d50 && req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__8_ULE_1_9___d50 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h",
	       req_f3,
	       req_addr,
	       req_st_value,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write("    priv:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__8_ULE_1_9___d50 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__8_ULE_1_9___d50 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__8_ULE_1_9___d50 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__8_ULE_1_9___d50 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_79_EQ_0b0_80_OR_req_f3_BITS_ETC___d909 &&
	  NOT_cfg_verbosity_read__8_ULE_1_9___d50)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[11:5],
		 req_addr[11:3]);
  end
  // synopsys translate_on
endmodule  // mkMMU_Cache

